// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System.Text.Json.Serialization;
using DemoFile.Sdk;

namespace DemoFile.Game.Deadlock;

public partial class Source1GameEvents
{
    public Action<Source1ServerSpawnEvent>? ServerSpawn;
    public Action<Source1ServerPreShutdownEvent>? ServerPreShutdown;
    public Action<Source1ServerShutdownEvent>? ServerShutdown;
    public Action<Source1ServerMessageEvent>? ServerMessage;
    public Action<Source1ServerCvarEvent>? ServerCvar;
    public Action<Source1PlayerActivateEvent>? PlayerActivate;
    public Action<Source1PlayerConnectFullEvent>? PlayerConnectFull;
    public Action<Source1PlayerFullUpdateEvent>? PlayerFullUpdate;
    public Action<Source1PlayerConnectEvent>? PlayerConnect;
    public Action<Source1PlayerDisconnectEvent>? PlayerDisconnect;
    public Action<Source1PlayerInfoEvent>? PlayerInfo;
    public Action<Source1PlayerSpawnEvent>? PlayerSpawn;
    public Action<Source1PlayerTeamEvent>? PlayerTeam;
    public Action<Source1LocalPlayerTeamEvent>? LocalPlayerTeam;
    public Action<Source1LocalPlayerControllerTeamEvent>? LocalPlayerControllerTeam;
    public Action<Source1PlayerChangenameEvent>? PlayerChangename;
    public Action<Source1PlayerChatEvent>? PlayerChat;
    public Action<Source1LocalPlayerPawnChangedEvent>? LocalPlayerPawnChanged;
    public Action<Source1TeamplayBroadcastAudioEvent>? TeamplayBroadcastAudio;
    public Action<Source1FinaleStartEvent>? FinaleStart;
    public Action<Source1PlayerStatsUpdatedEvent>? PlayerStatsUpdated;
    public Action<Source1UserDataDownloadedEvent>? UserDataDownloaded;
    public Action<Source1RagdollDissolvedEvent>? RagdollDissolved;
    public Action<Source1TeamInfoEvent>? TeamInfo;
    public Action<Source1TeamScoreEvent>? TeamScore;
    public Action<Source1HltvCameramanEvent>? HltvCameraman;
    public Action<Source1HltvChaseEvent>? HltvChase;
    public Action<Source1HltvRankCameraEvent>? HltvRankCamera;
    public Action<Source1HltvRankEntityEvent>? HltvRankEntity;
    public Action<Source1HltvFixedEvent>? HltvFixed;
    public Action<Source1HltvMessageEvent>? HltvMessage;
    public Action<Source1HltvStatusEvent>? HltvStatus;
    public Action<Source1HltvTitleEvent>? HltvTitle;
    public Action<Source1HltvChatEvent>? HltvChat;
    public Action<Source1HltvVersioninfoEvent>? HltvVersioninfo;
    public Action<Source1HltvReplayEvent>? HltvReplay;
    public Action<Source1HltvReplayStatusEvent>? HltvReplayStatus;
    public Action<Source1DemoStopEvent>? DemoStop;
    public Action<Source1MapShutdownEvent>? MapShutdown;
    public Action<Source1MapTransitionEvent>? MapTransition;
    public Action<Source1HostnameChangedEvent>? HostnameChanged;
    public Action<Source1DifficultyChangedEvent>? DifficultyChanged;
    public Action<Source1GameMessageEvent>? GameMessage;
    public Action<Source1GameNewmapEvent>? GameNewmap;
    public Action<Source1RoundStartEvent>? RoundStart;
    public Action<Source1RoundEndEvent>? RoundEnd;
    public Action<Source1RoundStartPreEntityEvent>? RoundStartPreEntity;
    public Action<Source1RoundStartPostNavEvent>? RoundStartPostNav;
    public Action<Source1RoundFreezeEndEvent>? RoundFreezeEnd;
    public Action<Source1TeamplayRoundStartEvent>? TeamplayRoundStart;
    public Action<Source1PlayerDeathEvent>? PlayerDeath;
    public Action<Source1PlayerFootstepEvent>? PlayerFootstep;
    public Action<Source1PlayerHintmessageEvent>? PlayerHintmessage;
    public Action<Source1BreakBreakableEvent>? BreakBreakable;
    public Action<Source1BrokenBreakableEvent>? BrokenBreakable;
    public Action<Source1BreakPropEvent>? BreakProp;
    public Action<Source1EntityKilledEvent>? EntityKilled;
    public Action<Source1DoorCloseEvent>? DoorClose;
    public Action<Source1VoteStartedEvent>? VoteStarted;
    public Action<Source1VoteFailedEvent>? VoteFailed;
    public Action<Source1VotePassedEvent>? VotePassed;
    public Action<Source1VoteChangedEvent>? VoteChanged;
    public Action<Source1VoteCastYesEvent>? VoteCastYes;
    public Action<Source1VoteCastNoEvent>? VoteCastNo;
    public Action<Source1AchievementEventEvent>? AchievementEvent;
    public Action<Source1AchievementEarnedEvent>? AchievementEarned;
    public Action<Source1AchievementWriteFailedEvent>? AchievementWriteFailed;
    public Action<Source1BonusUpdatedEvent>? BonusUpdated;
    public Action<Source1SpecTargetUpdatedEvent>? SpecTargetUpdated;
    public Action<Source1SpecModeUpdatedEvent>? SpecModeUpdated;
    public Action<Source1EntityVisibleEvent>? EntityVisible;
    public Action<Source1GameinstructorDrawEvent>? GameinstructorDraw;
    public Action<Source1GameinstructorNodrawEvent>? GameinstructorNodraw;
    public Action<Source1FlareIgniteNpcEvent>? FlareIgniteNpc;
    public Action<Source1HelicopterGrenadePuntMissEvent>? HelicopterGrenadePuntMiss;
    public Action<Source1PhysgunPickupEvent>? PhysgunPickup;
    public Action<Source1InventoryUpdatedEvent>? InventoryUpdated;
    public Action<Source1CartUpdatedEvent>? CartUpdated;
    public Action<Source1StorePricesheetUpdatedEvent>? StorePricesheetUpdated;
    public Action<Source1ItemSchemaInitializedEvent>? ItemSchemaInitialized;
    public Action<Source1DropRateModifiedEvent>? DropRateModified;
    public Action<Source1EventTicketModifiedEvent>? EventTicketModified;
    public Action<Source1GcConnectedEvent>? GcConnected;
    public Action<Source1InstructorStartLessonEvent>? InstructorStartLesson;
    public Action<Source1InstructorCloseLessonEvent>? InstructorCloseLesson;
    public Action<Source1InstructorServerHintCreateEvent>? InstructorServerHintCreate;
    public Action<Source1InstructorServerHintStopEvent>? InstructorServerHintStop;
    public Action<Source1SetInstructorGroupEnabledEvent>? SetInstructorGroupEnabled;
    public Action<Source1ClientsideLessonClosedEvent>? ClientsideLessonClosed;
    public Action<Source1DynamicShadowLightChangedEvent>? DynamicShadowLightChanged;
    public Action<Source1GameuiActivatedEvent>? GameuiActivated;
    public Action<Source1GameuiHiddenEvent>? GameuiHidden;
    public Action<Source1GameuiFreeCursorChangedEvent>? GameuiFreeCursorChanged;
    public Action<Source1SpectateFowViewTeamChangedEvent>? SpectateFowViewTeamChanged;
    public Action<Source1ClientDisconnectEvent>? ClientDisconnect;
    public Action<Source1PlayerRespawnedEvent>? PlayerRespawned;
    public Action<Source1CitadelHintChangedEvent>? CitadelHintChanged;
    public Action<Source1CitadeltvChaseHeroEvent>? CitadeltvChaseHero;
    public Action<Source1CitadeltvUnitEventEvent>? CitadeltvUnitEvent;
    public Action<Source1PlayerBotReplaceEvent>? PlayerBotReplace;
    public Action<Source1BotPlayerReplaceEvent>? BotPlayerReplace;
    public Action<Source1WeaponReloadStartedEvent>? WeaponReloadStarted;
    public Action<Source1WeaponReloadCompleteEvent>? WeaponReloadComplete;
    public Action<Source1WeaponZoomStartedEvent>? WeaponZoomStarted;
    public Action<Source1MatchClockEvent>? MatchClock;
    public Action<Source1ItemPickupEvent>? ItemPickup;
    public Action<Source1GrenadeBounceEvent>? GrenadeBounce;
    public Action<Source1GameStateChangedEvent>? GameStateChanged;
    public Action<Source1HeroAssignedLaneChangedEvent>? HeroAssignedLaneChanged;
    public Action<Source1HeroDraftOrderChangedEvent>? HeroDraftOrderChanged;
    public Action<Source1PlayerDamageIncreasedEvent>? PlayerDamageIncreased;
    public Action<Source1PlayerMaxhealthIncreasedEvent>? PlayerMaxhealthIncreased;
    public Action<Source1PlayerAmmoIncreasedEvent>? PlayerAmmoIncreased;
    public Action<Source1PlayerAmmoFullEvent>? PlayerAmmoFull;
    public Action<Source1ClientPlayerCurrencyChangeEvent>? ClientPlayerCurrencyChange;
    public Action<Source1PlayerUsedAbilityEvent>? PlayerUsedAbility;
    public Action<Source1PlayerUsedItemEvent>? PlayerUsedItem;
    public Action<Source1PlayerRezIncomingEvent>? PlayerRezIncoming;
    public Action<Source1NonPlayerUsedAbilityEvent>? NonPlayerUsedAbility;
    public Action<Source1LocalPlayerUnitStatesChangedEvent>? LocalPlayerUnitStatesChanged;
    public Action<Source1PlayerItemsChangedEvent>? PlayerItemsChanged;
    public Action<Source1PlayerItemPriceChangedEvent>? PlayerItemPriceChanged;
    public Action<Source1PlayerAbilityUpgradeSellPriceChangedEvent>? PlayerAbilityUpgradeSellPriceChanged;
    public Action<Source1PlayerRespawnTimeChangedEvent>? PlayerRespawnTimeChanged;
    public Action<Source1LocalPlayerAbilitiesVdataChangedEvent>? LocalPlayerAbilitiesVdataChanged;
    public Action<Source1LocalPlayerWeaponsChangedEvent>? LocalPlayerWeaponsChanged;
    public Action<Source1PlayerAbilityUpgradedEvent>? PlayerAbilityUpgraded;
    public Action<Source1LocalPlayerAbilityCooldownEndChangedEvent>? LocalPlayerAbilityCooldownEndChanged;
    public Action<Source1PlayerDataAbilitiesChangedEvent>? PlayerDataAbilitiesChanged;
    public Action<Source1PlayerAbilityBonusCounterChangedEvent>? PlayerAbilityBonusCounterChanged;
    public Action<Source1PlayerModifiersChangedEvent>? PlayerModifiersChanged;
    public Action<Source1PlayerOpenedItemShopEvent>? PlayerOpenedItemShop;
    public Action<Source1ToolsContentChangedEvent>? ToolsContentChanged;
    public Action<Source1PlayerShopZoneChangedEvent>? PlayerShopZoneChanged;
    public Action<Source1PlayerHealedEvent>? PlayerHealed;
    public Action<Source1PlayerHealPreventedEvent>? PlayerHealPrevented;
    public Action<Source1PlayerGivenShieldEvent>? PlayerGivenShield;
    public Action<Source1PlayerWeaponSwitchedEvent>? PlayerWeaponSwitched;
    public Action<Source1PlayerHeroChangedEvent>? PlayerHeroChanged;
    public Action<Source1PlayerDraftingChangedEvent>? PlayerDraftingChanged;
    public Action<Source1PlayerGuidedSandboxStartedEvent>? PlayerGuidedSandboxStarted;
    public Action<Source1PlayerLaneChallengeStartedEvent>? PlayerLaneChallengeStarted;
    public Action<Source1PlayerLaneChallengeEndedEvent>? PlayerLaneChallengeEnded;
    public Action<Source1PlayerOpenedHeroSelectEvent>? PlayerOpenedHeroSelect;
    public Action<Source1PlayerHeroResetEvent>? PlayerHeroReset;
    public Action<Source1PlayerInfoIndividualUpdatedEvent>? PlayerInfoIndividualUpdated;
    public Action<Source1PersonaUpdatedEvent>? PersonaUpdated;
    public Action<Source1ItemFileReloadedEvent>? ItemFileReloaded;
    public Action<Source1PartyUpdatedEvent>? PartyUpdated;
    public Action<Source1AbilityCastSucceededEvent>? AbilityCastSucceeded;
    public Action<Source1AbilityCastFailedEvent>? AbilityCastFailed;
    public Action<Source1ReloadFailedNoAmmoEvent>? ReloadFailedNoAmmo;
    public Action<Source1BrokeEnemyShieldEvent>? BrokeEnemyShield;
    public Action<Source1AbilityAddedEvent>? AbilityAdded;
    public Action<Source1AbilityRemovedEvent>? AbilityRemoved;
    public Action<Source1AbilityLevelChangedEvent>? AbilityLevelChanged;
    public Action<Source1PlayerLevelChangedEvent>? PlayerLevelChanged;
    public Action<Source1CurrencyMissedEvent>? CurrencyMissed;
    public Action<Source1CurrencyDeniedEvent>? CurrencyDenied;
    public Action<Source1CurrencyClaimedDisplayEvent>? CurrencyClaimedDisplay;
    public Action<Source1LocalPlayerShotHitEvent>? LocalPlayerShotHit;
    public Action<Source1ZiplinePlayerAttachedEvent>? ZiplinePlayerAttached;
    public Action<Source1ZiplinePlayerDetachedEvent>? ZiplinePlayerDetached;
    public Action<Source1ClientPlayerHeroChangedEvent>? ClientPlayerHeroChanged;
    public Action<Source1CrateSpawnEvent>? CrateSpawn;
    public Action<Source1CrateSpawnNotificationEvent>? CrateSpawnNotification;
    public Action<Source1CitadelPauseEventEvent>? CitadelPauseEvent;
    public Action<Source1CitadelPregameTimerEvent>? CitadelPregameTimer;
    public Action<Source1BreakPieceSpawnedEvent>? BreakPieceSpawned;
    public Action<Source1SandboxPlayerMovedEvent>? SandboxPlayerMoved;
    public Action<Source1LaneTestStateUpdatedEvent>? LaneTestStateUpdated;
    public Action<Source1PlayerClosedItemShopEvent>? PlayerClosedItemShop;
    public Action<Source1SpectateHomeTeamChangedEvent>? SpectateHomeTeamChanged;
    public Action<Source1PlayerStatsChangedEvent>? PlayerStatsChanged;
    public Action<Source1TitanTransformingStartEvent>? TitanTransformingStart;
    public Action<Source1TitanTransformingCompleteEvent>? TitanTransformingComplete;
    public Action<Source1KeybindChangedEvent>? KeybindChanged;
    public Action<Source1QuickCastModeChangedEvent>? QuickCastModeChanged;

    internal void ParseSource1GameEventList(CMsgSource1LegacyGameEventList eventList)
    {
        _handlers = new Dictionary<int, Action<DeadlockDemoParser, CMsgSource1LegacyGameEvent>>(eventList.Descriptors.Count);
        foreach (var descriptor in eventList.Descriptors)
        {
            if (descriptor.Name == "server_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hostname")
                            return (@this, x) => @this.Hostname = x.ValString;
                        if (key.Name == "address")
                            return (@this, x) => @this.Address = x.ValString;
                        if (key.Name == "port")
                            return (@this, x) => @this.Port = x.ValShort;
                        if (key.Name == "game")
                            return (@this, x) => @this.Game = x.ValString;
                        if (key.Name == "mapname")
                            return (@this, x) => @this.Mapname = x.ValString;
                        if (key.Name == "addonname")
                            return (@this, x) => @this.Addonname = x.ValString;
                        if (key.Name == "maxplayers")
                            return (@this, x) => @this.Maxplayers = x.ValLong;
                        if (key.Name == "os")
                            return (@this, x) => @this.Os = x.ValString;
                        if (key.Name == "dedicated")
                            return (@this, x) => @this.Dedicated = x.ValBool;
                        if (key.Name == "password")
                            return (@this, x) => @this.Password = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ServerSpawn == null)
                        return;
                    var @this = new Source1ServerSpawnEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ServerSpawn?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "server_pre_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerPreShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ServerPreShutdown == null)
                        return;
                    var @this = new Source1ServerPreShutdownEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ServerPreShutdown?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "server_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ServerShutdown == null)
                        return;
                    var @this = new Source1ServerShutdownEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ServerShutdown?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "server_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ServerMessage == null)
                        return;
                    var @this = new Source1ServerMessageEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ServerMessage?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "server_cvar")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerCvarEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "cvarname")
                            return (@this, x) => @this.Cvarname = x.ValString;
                        if (key.Name == "cvarvalue")
                            return (@this, x) => @this.Cvarvalue = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ServerCvar == null)
                        return;
                    var @this = new Source1ServerCvarEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ServerCvar?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_activate")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerActivateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerActivate == null)
                        return;
                    var @this = new Source1PlayerActivateEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerActivate?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_connect_full")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerConnectFullEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerConnectFull == null)
                        return;
                    var @this = new Source1PlayerConnectFullEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerConnectFull?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_full_update")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerFullUpdateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "count")
                            return (@this, x) => @this.Count = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerFullUpdate == null)
                        return;
                    var @this = new Source1PlayerFullUpdateEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerFullUpdate?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_connect")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerConnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "networkid")
                            return (@this, x) => @this.Networkid = x.ValString;
                        if (key.Name == "xuid")
                            return (@this, x) => @this.SteamId = x.ValUint64;
                        if (key.Name == "address")
                            return (@this, x) => @this.Address = x.ValString;
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerConnect == null)
                        return;
                    var @this = new Source1PlayerConnectEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerConnect?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_disconnect")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDisconnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValShort;
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "networkid")
                            return (@this, x) => @this.Networkid = x.ValString;
                        if (key.Name == "xuid")
                            return (@this, x) => @this.SteamId = x.ValUint64;
                        if (key.Name == "PlayerID")
                            return (@this, x) => @this.PlayerID = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerDisconnect == null)
                        return;
                    var @this = new Source1PlayerDisconnectEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerDisconnect?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_info")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerInfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "steamid")
                            return (@this, x) => @this.SteamId = x.ValUint64;
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerInfo == null)
                        return;
                    var @this = new Source1PlayerInfoEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerInfo?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerSpawn == null)
                        return;
                    var @this = new Source1PlayerSpawnEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerSpawn?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "oldteam")
                            return (@this, x) => @this.Oldteam = x.ValByte;
                        if (key.Name == "disconnect")
                            return (@this, x) => @this.Disconnect = x.ValBool;
                        if (key.Name == "silent")
                            return (@this, x) => @this.Silent = x.ValBool;
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "isbot")
                            return (@this, x) => @this.Isbot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerTeam == null)
                        return;
                    var @this = new Source1PlayerTeamEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerTeam?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerTeam == null)
                        return;
                    var @this = new Source1LocalPlayerTeamEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerTeam?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_controller_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerControllerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerControllerTeam == null)
                        return;
                    var @this = new Source1LocalPlayerControllerTeamEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerControllerTeam?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_changename")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerChangenameEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "oldname")
                            return (@this, x) => @this.Oldname = x.ValString;
                        if (key.Name == "newname")
                            return (@this, x) => @this.Newname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerChangename == null)
                        return;
                    var @this = new Source1PlayerChangenameEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerChangename?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_chat")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerChatEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamonly")
                            return (@this, x) => @this.Teamonly = x.ValBool;
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "playerid")
                            return (@this, x) => @this.Playerid = x.ValShort;
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerChat == null)
                        return;
                    var @this = new Source1PlayerChatEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerChat?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_pawn_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerPawnChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerPawnChanged == null)
                        return;
                    var @this = new Source1LocalPlayerPawnChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerPawnChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "teamplay_broadcast_audio")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamplayBroadcastAudioEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "sound")
                            return (@this, x) => @this.Sound = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TeamplayBroadcastAudio == null)
                        return;
                    var @this = new Source1TeamplayBroadcastAudioEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TeamplayBroadcastAudio?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "finale_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1FinaleStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "rushes")
                            return (@this, x) => @this.Rushes = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && FinaleStart == null)
                        return;
                    var @this = new Source1FinaleStartEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    FinaleStart?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_stats_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerStatsUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "forceupload")
                            return (@this, x) => @this.Forceupload = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerStatsUpdated == null)
                        return;
                    var @this = new Source1PlayerStatsUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerStatsUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "user_data_downloaded")
            {
                var keys = descriptor.Keys.Select(Action<Source1UserDataDownloadedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && UserDataDownloaded == null)
                        return;
                    var @this = new Source1UserDataDownloadedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    UserDataDownloaded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ragdoll_dissolved")
            {
                var keys = descriptor.Keys.Select(Action<Source1RagdollDissolvedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RagdollDissolved == null)
                        return;
                    var @this = new Source1RagdollDissolvedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RagdollDissolved?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "team_info")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamInfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamid")
                            return (@this, x) => @this.Teamid = x.ValByte;
                        if (key.Name == "teamname")
                            return (@this, x) => @this.Teamname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TeamInfo == null)
                        return;
                    var @this = new Source1TeamInfoEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TeamInfo?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "team_score")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamScoreEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamid")
                            return (@this, x) => @this.Teamid = x.ValByte;
                        if (key.Name == "score")
                            return (@this, x) => @this.Score = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TeamScore == null)
                        return;
                    var @this = new Source1TeamScoreEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TeamScore?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_cameraman")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvCameramanEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvCameraman == null)
                        return;
                    var @this = new Source1HltvCameramanEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvCameraman?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_chase")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvChaseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target1")
                            return (@this, x) => @this.Target1Index = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "target2")
                            return (@this, x) => @this.Target2Index = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "distance")
                            return (@this, x) => @this.Distance = x.ValShort;
                        if (key.Name == "theta")
                            return (@this, x) => @this.Theta = x.ValShort;
                        if (key.Name == "phi")
                            return (@this, x) => @this.Phi = x.ValShort;
                        if (key.Name == "inertia")
                            return (@this, x) => @this.Inertia = x.ValByte;
                        if (key.Name == "ineye")
                            return (@this, x) => @this.Ineye = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvChase == null)
                        return;
                    var @this = new Source1HltvChaseEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvChase?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_rank_camera")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvRankCameraEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "index")
                            return (@this, x) => @this.Index = x.ValByte;
                        if (key.Name == "rank")
                            return (@this, x) => @this.Rank = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.TargetIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvRankCamera == null)
                        return;
                    var @this = new Source1HltvRankCameraEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvRankCamera?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_rank_entity")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvRankEntityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "rank")
                            return (@this, x) => @this.Rank = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.TargetIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvRankEntity == null)
                        return;
                    var @this = new Source1HltvRankEntityEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvRankEntity?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_fixed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvFixedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "posx")
                            return (@this, x) => @this.Posx = x.ValLong;
                        if (key.Name == "posy")
                            return (@this, x) => @this.Posy = x.ValLong;
                        if (key.Name == "posz")
                            return (@this, x) => @this.Posz = x.ValLong;
                        if (key.Name == "theta")
                            return (@this, x) => @this.Theta = x.ValShort;
                        if (key.Name == "phi")
                            return (@this, x) => @this.Phi = x.ValShort;
                        if (key.Name == "offset")
                            return (@this, x) => @this.Offset = x.ValShort;
                        if (key.Name == "fov")
                            return (@this, x) => @this.Fov = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.TargetIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvFixed == null)
                        return;
                    var @this = new Source1HltvFixedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvFixed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvMessage == null)
                        return;
                    var @this = new Source1HltvMessageEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvMessage?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_status")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvStatusEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "clients")
                            return (@this, x) => @this.Clients = x.ValLong;
                        if (key.Name == "slots")
                            return (@this, x) => @this.Slots = x.ValLong;
                        if (key.Name == "proxies")
                            return (@this, x) => @this.Proxies = x.ValShort;
                        if (key.Name == "master")
                            return (@this, x) => @this.Master = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvStatus == null)
                        return;
                    var @this = new Source1HltvStatusEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvStatus?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_title")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvTitleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvTitle == null)
                        return;
                    var @this = new Source1HltvTitleEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvTitle?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_chat")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvChatEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        if (key.Name == "steamID")
                            return (@this, x) => @this.SteamId = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvChat == null)
                        return;
                    var @this = new Source1HltvChatEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvChat?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_versioninfo")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvVersioninfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "version")
                            return (@this, x) => @this.Version = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvVersioninfo == null)
                        return;
                    var @this = new Source1HltvVersioninfoEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvVersioninfo?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_replay")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvReplayEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "delay")
                            return (@this, x) => @this.Delay = x.ValLong;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvReplay == null)
                        return;
                    var @this = new Source1HltvReplayEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvReplay?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hltv_replay_status")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvReplayStatusEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HltvReplayStatus == null)
                        return;
                    var @this = new Source1HltvReplayStatusEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HltvReplayStatus?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "demo_stop")
            {
                var keys = descriptor.Keys.Select(Action<Source1DemoStopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && DemoStop == null)
                        return;
                    var @this = new Source1DemoStopEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    DemoStop?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "map_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1MapShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && MapShutdown == null)
                        return;
                    var @this = new Source1MapShutdownEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    MapShutdown?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "map_transition")
            {
                var keys = descriptor.Keys.Select(Action<Source1MapTransitionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && MapTransition == null)
                        return;
                    var @this = new Source1MapTransitionEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    MapTransition?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hostname_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostnameChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hostname")
                            return (@this, x) => @this.Hostname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HostnameChanged == null)
                        return;
                    var @this = new Source1HostnameChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HostnameChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "difficulty_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1DifficultyChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "newDifficulty")
                            return (@this, x) => @this.NewDifficulty = x.ValShort;
                        if (key.Name == "oldDifficulty")
                            return (@this, x) => @this.OldDifficulty = x.ValShort;
                        if (key.Name == "strDifficulty")
                            return (@this, x) => @this.StrDifficulty = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && DifficultyChanged == null)
                        return;
                    var @this = new Source1DifficultyChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    DifficultyChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "game_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValByte;
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameMessage == null)
                        return;
                    var @this = new Source1GameMessageEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameMessage?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "game_newmap")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameNewmapEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "mapname")
                            return (@this, x) => @this.Mapname = x.ValString;
                        if (key.Name == "transition")
                            return (@this, x) => @this.Transition = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameNewmap == null)
                        return;
                    var @this = new Source1GameNewmapEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameNewmap?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "round_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "timelimit")
                            return (@this, x) => @this.Timelimit = x.ValLong;
                        if (key.Name == "fraglimit")
                            return (@this, x) => @this.Fraglimit = x.ValLong;
                        if (key.Name == "objective")
                            return (@this, x) => @this.Objective = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RoundStart == null)
                        return;
                    var @this = new Source1RoundStartEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RoundStart?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "round_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "winner")
                            return (@this, x) => @this.Winner = x.ValByte;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValByte;
                        if (key.Name == "message")
                            return (@this, x) => @this.Message = x.ValString;
                        if (key.Name == "time")
                            return (@this, x) => @this.Time = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RoundEnd == null)
                        return;
                    var @this = new Source1RoundEndEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RoundEnd?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "round_start_pre_entity")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartPreEntityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RoundStartPreEntity == null)
                        return;
                    var @this = new Source1RoundStartPreEntityEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RoundStartPreEntity?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "round_start_post_nav")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartPostNavEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RoundStartPostNav == null)
                        return;
                    var @this = new Source1RoundStartPostNavEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RoundStartPostNav?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "round_freeze_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundFreezeEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && RoundFreezeEnd == null)
                        return;
                    var @this = new Source1RoundFreezeEndEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    RoundFreezeEnd?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "teamplay_round_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamplayRoundStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "full_reset")
                            return (@this, x) => @this.FullReset = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TeamplayRoundStart == null)
                        return;
                    var @this = new Source1TeamplayRoundStartEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TeamplayRoundStart?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_death")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDeathEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        if (key.Name == "attacker")
                            return (@this, x) => @this.AttackerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "attacker_pawn")
                            return (@this, x) => @this.AttackerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "attackername")
                            return (@this, x) => @this.Attackername = x.ValString;
                        if (key.Name == "attackerehandle")
                            return (@this, x) => @this.Attackerehandle = x.ValLong;
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        if (key.Name == "headshot")
                            return (@this, x) => @this.Headshot = x.ValBool;
                        if (key.Name == "attackerisbot")
                            return (@this, x) => @this.Attackerisbot = x.ValBool;
                        if (key.Name == "victimname")
                            return (@this, x) => @this.Victimname = x.ValString;
                        if (key.Name == "victimisbot")
                            return (@this, x) => @this.Victimisbot = x.ValBool;
                        if (key.Name == "abort")
                            return (@this, x) => @this.Abort = x.ValBool;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValLong;
                        if (key.Name == "victim_x")
                            return (@this, x) => @this.VictimX = x.ValFloat;
                        if (key.Name == "victim_y")
                            return (@this, x) => @this.VictimY = x.ValFloat;
                        if (key.Name == "victim_z")
                            return (@this, x) => @this.VictimZ = x.ValFloat;
                        if (key.Name == "bounty")
                            return (@this, x) => @this.Bounty = x.ValShort;
                        if (key.Name == "dropped_gold")
                            return (@this, x) => @this.DroppedGold = x.ValShort;
                        if (key.Name == "assister1controller")
                            return (@this, x) => @this.Assister1controllerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "assister2controller")
                            return (@this, x) => @this.Assister2controllerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "assister3controller")
                            return (@this, x) => @this.Assister3controllerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "assister4controller")
                            return (@this, x) => @this.Assister4controllerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "assister5controller")
                            return (@this, x) => @this.Assister5controllerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerDeath == null)
                        return;
                    var @this = new Source1PlayerDeathEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerDeath?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_footstep")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerFootstepEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerFootstep == null)
                        return;
                    var @this = new Source1PlayerFootstepEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerFootstep?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_hintmessage")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHintmessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hintmessage")
                            return (@this, x) => @this.Hintmessage = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerHintmessage == null)
                        return;
                    var @this = new Source1PlayerHintmessageEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerHintmessage?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "break_breakable")
            {
                var keys = descriptor.Keys.Select(Action<Source1BreakBreakableEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "material")
                            return (@this, x) => @this.Material = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BreakBreakable == null)
                        return;
                    var @this = new Source1BreakBreakableEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BreakBreakable?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "broken_breakable")
            {
                var keys = descriptor.Keys.Select(Action<Source1BrokenBreakableEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "material")
                            return (@this, x) => @this.Material = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BrokenBreakable == null)
                        return;
                    var @this = new Source1BrokenBreakableEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BrokenBreakable?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "break_prop")
            {
                var keys = descriptor.Keys.Select(Action<Source1BreakPropEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "player_held")
                            return (@this, x) => @this.PlayerHeld = x.ValBool;
                        if (key.Name == "player_thrown")
                            return (@this, x) => @this.PlayerThrown = x.ValBool;
                        if (key.Name == "player_dropped")
                            return (@this, x) => @this.PlayerDropped = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BreakProp == null)
                        return;
                    var @this = new Source1BreakPropEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BreakProp?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "entity_killed")
            {
                var keys = descriptor.Keys.Select(Action<Source1EntityKilledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_killed")
                            return (@this, x) => @this.EntindexKilled = x.ValLong;
                        if (key.Name == "entindex_attacker")
                            return (@this, x) => @this.EntindexAttacker = x.ValLong;
                        if (key.Name == "entindex_inflictor")
                            return (@this, x) => @this.EntindexInflictor = x.ValLong;
                        if (key.Name == "damagebits")
                            return (@this, x) => @this.Damagebits = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && EntityKilled == null)
                        return;
                    var @this = new Source1EntityKilledEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    EntityKilled?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "door_close")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorCloseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "checkpoint")
                            return (@this, x) => @this.Checkpoint = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && DoorClose == null)
                        return;
                    var @this = new Source1DoorCloseEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    DoorClose?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "issue")
                            return (@this, x) => @this.Issue = x.ValString;
                        if (key.Name == "param1")
                            return (@this, x) => @this.Param1 = x.ValString;
                        if (key.Name == "votedata")
                            return (@this, x) => @this.Votedata = x.ValString;
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "initiator")
                            return (@this, x) => @this.Initiator = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VoteStarted == null)
                        return;
                    var @this = new Source1VoteStartedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VoteStarted?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VoteFailed == null)
                        return;
                    var @this = new Source1VoteFailedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VoteFailed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_passed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VotePassedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "details")
                            return (@this, x) => @this.Details = x.ValString;
                        if (key.Name == "param1")
                            return (@this, x) => @this.Param1 = x.ValString;
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VotePassed == null)
                        return;
                    var @this = new Source1VotePassedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VotePassed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "yesVotes")
                            return (@this, x) => @this.YesVotes = x.ValByte;
                        if (key.Name == "noVotes")
                            return (@this, x) => @this.NoVotes = x.ValByte;
                        if (key.Name == "potentialVotes")
                            return (@this, x) => @this.PotentialVotes = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VoteChanged == null)
                        return;
                    var @this = new Source1VoteChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VoteChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_cast_yes")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteCastYesEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VoteCastYes == null)
                        return;
                    var @this = new Source1VoteCastYesEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VoteCastYes?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "vote_cast_no")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteCastNoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && VoteCastNo == null)
                        return;
                    var @this = new Source1VoteCastNoEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    VoteCastNo?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "achievement_event")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementEventEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "achievement_name")
                            return (@this, x) => @this.AchievementName = x.ValString;
                        if (key.Name == "cur_val")
                            return (@this, x) => @this.CurVal = x.ValShort;
                        if (key.Name == "max_val")
                            return (@this, x) => @this.MaxVal = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AchievementEvent == null)
                        return;
                    var @this = new Source1AchievementEventEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AchievementEvent?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "achievement_earned")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementEarnedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "player")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "achievement")
                            return (@this, x) => @this.Achievement = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AchievementEarned == null)
                        return;
                    var @this = new Source1AchievementEarnedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AchievementEarned?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "achievement_write_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementWriteFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AchievementWriteFailed == null)
                        return;
                    var @this = new Source1AchievementWriteFailedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AchievementWriteFailed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "bonus_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1BonusUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "numadvanced")
                            return (@this, x) => @this.Numadvanced = x.ValShort;
                        if (key.Name == "numbronze")
                            return (@this, x) => @this.Numbronze = x.ValShort;
                        if (key.Name == "numsilver")
                            return (@this, x) => @this.Numsilver = x.ValShort;
                        if (key.Name == "numgold")
                            return (@this, x) => @this.Numgold = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BonusUpdated == null)
                        return;
                    var @this = new Source1BonusUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BonusUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "spec_target_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpecTargetUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SpecTargetUpdated == null)
                        return;
                    var @this = new Source1SpecTargetUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SpecTargetUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "spec_mode_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpecModeUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SpecModeUpdated == null)
                        return;
                    var @this = new Source1SpecModeUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SpecModeUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "entity_visible")
            {
                var keys = descriptor.Keys.Select(Action<Source1EntityVisibleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "subject")
                            return (@this, x) => @this.Subject = x.ValLong;
                        if (key.Name == "classname")
                            return (@this, x) => @this.Classname = x.ValString;
                        if (key.Name == "entityname")
                            return (@this, x) => @this.Entityname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && EntityVisible == null)
                        return;
                    var @this = new Source1EntityVisibleEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    EntityVisible?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gameinstructor_draw")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameinstructorDrawEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameinstructorDraw == null)
                        return;
                    var @this = new Source1GameinstructorDrawEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameinstructorDraw?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gameinstructor_nodraw")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameinstructorNodrawEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameinstructorNodraw == null)
                        return;
                    var @this = new Source1GameinstructorNodrawEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameinstructorNodraw?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "flare_ignite_npc")
            {
                var keys = descriptor.Keys.Select(Action<Source1FlareIgniteNpcEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && FlareIgniteNpc == null)
                        return;
                    var @this = new Source1FlareIgniteNpcEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    FlareIgniteNpc?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "helicopter_grenade_punt_miss")
            {
                var keys = descriptor.Keys.Select(Action<Source1HelicopterGrenadePuntMissEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HelicopterGrenadePuntMiss == null)
                        return;
                    var @this = new Source1HelicopterGrenadePuntMissEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HelicopterGrenadePuntMiss?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "physgun_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1PhysgunPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PhysgunPickup == null)
                        return;
                    var @this = new Source1PhysgunPickupEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PhysgunPickup?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "inventory_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1InventoryUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "itemdef")
                            return (@this, x) => @this.Itemdef = x.ValShort;
                        if (key.Name == "itemid")
                            return (@this, x) => @this.Itemid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && InventoryUpdated == null)
                        return;
                    var @this = new Source1InventoryUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    InventoryUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "cart_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1CartUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CartUpdated == null)
                        return;
                    var @this = new Source1CartUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CartUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "store_pricesheet_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1StorePricesheetUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && StorePricesheetUpdated == null)
                        return;
                    var @this = new Source1StorePricesheetUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    StorePricesheetUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "item_schema_initialized")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemSchemaInitializedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ItemSchemaInitialized == null)
                        return;
                    var @this = new Source1ItemSchemaInitializedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ItemSchemaInitialized?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "drop_rate_modified")
            {
                var keys = descriptor.Keys.Select(Action<Source1DropRateModifiedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && DropRateModified == null)
                        return;
                    var @this = new Source1DropRateModifiedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    DropRateModified?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "event_ticket_modified")
            {
                var keys = descriptor.Keys.Select(Action<Source1EventTicketModifiedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && EventTicketModified == null)
                        return;
                    var @this = new Source1EventTicketModifiedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    EventTicketModified?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gc_connected")
            {
                var keys = descriptor.Keys.Select(Action<Source1GcConnectedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GcConnected == null)
                        return;
                    var @this = new Source1GcConnectedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GcConnected?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "instructor_start_lesson")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorStartLessonEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        if (key.Name == "hint_target")
                            return (@this, x) => @this.HintTarget = x.ValLong;
                        if (key.Name == "vr_movement_type")
                            return (@this, x) => @this.VrMovementType = x.ValByte;
                        if (key.Name == "vr_single_controller")
                            return (@this, x) => @this.VrSingleController = x.ValBool;
                        if (key.Name == "vr_controller_type")
                            return (@this, x) => @this.VrControllerType = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && InstructorStartLesson == null)
                        return;
                    var @this = new Source1InstructorStartLessonEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    InstructorStartLesson?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "instructor_close_lesson")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorCloseLessonEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && InstructorCloseLesson == null)
                        return;
                    var @this = new Source1InstructorCloseLessonEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    InstructorCloseLesson?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "instructor_server_hint_create")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorServerHintCreateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "hint_entindex")
                            return (@this, x) => @this.HintEntindex = x.ValLong;
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        if (key.Name == "hint_replace_key")
                            return (@this, x) => @this.HintReplaceKey = x.ValString;
                        if (key.Name == "hint_target")
                            return (@this, x) => @this.HintTarget = x.ValLong;
                        if (key.Name == "hint_activator_userid")
                            return (@this, x) => @this.HintActivatorPlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "hint_timeout")
                            return (@this, x) => @this.HintTimeout = x.ValShort;
                        if (key.Name == "hint_icon_onscreen")
                            return (@this, x) => @this.HintIconOnscreen = x.ValString;
                        if (key.Name == "hint_icon_offscreen")
                            return (@this, x) => @this.HintIconOffscreen = x.ValString;
                        if (key.Name == "hint_caption")
                            return (@this, x) => @this.HintCaption = x.ValString;
                        if (key.Name == "hint_activator_caption")
                            return (@this, x) => @this.HintActivatorCaption = x.ValString;
                        if (key.Name == "hint_color")
                            return (@this, x) => @this.HintColor = x.ValString;
                        if (key.Name == "hint_icon_offset")
                            return (@this, x) => @this.HintIconOffset = x.ValFloat;
                        if (key.Name == "hint_range")
                            return (@this, x) => @this.HintRange = x.ValFloat;
                        if (key.Name == "hint_flags")
                            return (@this, x) => @this.HintFlags = x.ValLong;
                        if (key.Name == "hint_binding")
                            return (@this, x) => @this.HintBinding = x.ValString;
                        if (key.Name == "hint_allow_nodraw_target")
                            return (@this, x) => @this.HintAllowNodrawTarget = x.ValBool;
                        if (key.Name == "hint_nooffscreen")
                            return (@this, x) => @this.HintNooffscreen = x.ValBool;
                        if (key.Name == "hint_forcecaption")
                            return (@this, x) => @this.HintForcecaption = x.ValBool;
                        if (key.Name == "hint_local_player_only")
                            return (@this, x) => @this.HintLocalPlayerOnly = x.ValBool;
                        if (key.Name == "hint_start_sound")
                            return (@this, x) => @this.HintStartSound = x.ValString;
                        if (key.Name == "hint_layoutfile")
                            return (@this, x) => @this.HintLayoutfile = x.ValString;
                        if (key.Name == "hint_vr_panel_type")
                            return (@this, x) => @this.HintVrPanelType = x.ValShort;
                        if (key.Name == "hint_vr_height_offset")
                            return (@this, x) => @this.HintVrHeightOffset = x.ValFloat;
                        if (key.Name == "hint_vr_offset_x")
                            return (@this, x) => @this.HintVrOffsetX = x.ValFloat;
                        if (key.Name == "hint_vr_offset_y")
                            return (@this, x) => @this.HintVrOffsetY = x.ValFloat;
                        if (key.Name == "hint_vr_offset_z")
                            return (@this, x) => @this.HintVrOffsetZ = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && InstructorServerHintCreate == null)
                        return;
                    var @this = new Source1InstructorServerHintCreateEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    InstructorServerHintCreate?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "instructor_server_hint_stop")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorServerHintStopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        if (key.Name == "hint_entindex")
                            return (@this, x) => @this.HintEntindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && InstructorServerHintStop == null)
                        return;
                    var @this = new Source1InstructorServerHintStopEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    InstructorServerHintStop?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "set_instructor_group_enabled")
            {
                var keys = descriptor.Keys.Select(Action<Source1SetInstructorGroupEnabledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "group")
                            return (@this, x) => @this.Group = x.ValString;
                        if (key.Name == "enabled")
                            return (@this, x) => @this.Enabled = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SetInstructorGroupEnabled == null)
                        return;
                    var @this = new Source1SetInstructorGroupEnabledEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SetInstructorGroupEnabled?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "clientside_lesson_closed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientsideLessonClosedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "lesson_name")
                            return (@this, x) => @this.LessonName = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ClientsideLessonClosed == null)
                        return;
                    var @this = new Source1ClientsideLessonClosedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ClientsideLessonClosed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "dynamic_shadow_light_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1DynamicShadowLightChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && DynamicShadowLightChanged == null)
                        return;
                    var @this = new Source1DynamicShadowLightChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    DynamicShadowLightChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gameui_activated")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameuiActivatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameuiActivated == null)
                        return;
                    var @this = new Source1GameuiActivatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameuiActivated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gameui_hidden")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameuiHiddenEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameuiHidden == null)
                        return;
                    var @this = new Source1GameuiHiddenEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameuiHidden?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "gameui_free_cursor_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameuiFreeCursorChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameuiFreeCursorChanged == null)
                        return;
                    var @this = new Source1GameuiFreeCursorChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameuiFreeCursorChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "spectate_fow_view_team_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpectateFowViewTeamChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SpectateFowViewTeamChanged == null)
                        return;
                    var @this = new Source1SpectateFowViewTeamChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SpectateFowViewTeamChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "client_disconnect")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientDisconnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason_code")
                            return (@this, x) => @this.ReasonCode = x.ValLong;
                        if (key.Name == "reason_desc")
                            return (@this, x) => @this.ReasonDesc = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ClientDisconnect == null)
                        return;
                    var @this = new Source1ClientDisconnectEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ClientDisconnect?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_respawned")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerRespawnedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "facing_yaw")
                            return (@this, x) => @this.FacingYaw = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerRespawned == null)
                        return;
                    var @this = new Source1PlayerRespawnedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerRespawned?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "citadel_hint_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1CitadelHintChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hint_feature")
                            return (@this, x) => @this.HintFeature = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CitadelHintChanged == null)
                        return;
                    var @this = new Source1CitadelHintChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CitadelHintChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "citadeltv_chase_hero")
            {
                var keys = descriptor.Keys.Select(Action<Source1CitadeltvChaseHeroEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target1")
                            return (@this, x) => @this.Target1 = x.ValLong;
                        if (key.Name == "target2")
                            return (@this, x) => @this.Target2 = x.ValLong;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValByte;
                        if (key.Name == "priority")
                            return (@this, x) => @this.Priority = x.ValShort;
                        if (key.Name == "gametime")
                            return (@this, x) => @this.Gametime = x.ValFloat;
                        if (key.Name == "highlight")
                            return (@this, x) => @this.Highlight = x.ValBool;
                        if (key.Name == "target1playerid")
                            return (@this, x) => @this.Target1playeridIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "target2playerid")
                            return (@this, x) => @this.Target2playeridIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "eventtype")
                            return (@this, x) => @this.Eventtype = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CitadeltvChaseHero == null)
                        return;
                    var @this = new Source1CitadeltvChaseHeroEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CitadeltvChaseHero?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "citadeltv_unit_event")
            {
                var keys = descriptor.Keys.Select(Action<Source1CitadeltvUnitEventEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "victim")
                            return (@this, x) => @this.Victim = x.ValShort;
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = x.ValShort;
                        if (key.Name == "basepriority")
                            return (@this, x) => @this.Basepriority = x.ValShort;
                        if (key.Name == "priority")
                            return (@this, x) => @this.Priority = x.ValShort;
                        if (key.Name == "eventtype")
                            return (@this, x) => @this.Eventtype = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CitadeltvUnitEvent == null)
                        return;
                    var @this = new Source1CitadeltvUnitEventEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CitadeltvUnitEvent?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_bot_replace")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerBotReplaceEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "player")
                            return (@this, x) => @this.Player = x.ValShort;
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerBotReplace == null)
                        return;
                    var @this = new Source1PlayerBotReplaceEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerBotReplace?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "bot_player_replace")
            {
                var keys = descriptor.Keys.Select(Action<Source1BotPlayerReplaceEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValShort;
                        if (key.Name == "player")
                            return (@this, x) => @this.Player = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BotPlayerReplace == null)
                        return;
                    var @this = new Source1BotPlayerReplaceEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BotPlayerReplace?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "weapon_reload_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponReloadStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "bullets_left_in_clip")
                            return (@this, x) => @this.BulletsLeftInClip = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && WeaponReloadStarted == null)
                        return;
                    var @this = new Source1WeaponReloadStartedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    WeaponReloadStarted?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "weapon_reload_complete")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponReloadCompleteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && WeaponReloadComplete == null)
                        return;
                    var @this = new Source1WeaponReloadCompleteEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    WeaponReloadComplete?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "weapon_zoom_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponZoomStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && WeaponZoomStarted == null)
                        return;
                    var @this = new Source1WeaponZoomStartedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    WeaponZoomStarted?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "match_clock")
            {
                var keys = descriptor.Keys.Select(Action<Source1MatchClockEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "match_time")
                            return (@this, x) => @this.MatchTime = x.ValFloat;
                        if (key.Name == "paused")
                            return (@this, x) => @this.Paused = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && MatchClock == null)
                        return;
                    var @this = new Source1MatchClockEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    MatchClock?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "item_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ItemPickup == null)
                        return;
                    var @this = new Source1ItemPickupEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ItemPickup?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "grenade_bounce")
            {
                var keys = descriptor.Keys.Select(Action<Source1GrenadeBounceEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GrenadeBounce == null)
                        return;
                    var @this = new Source1GrenadeBounceEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GrenadeBounce?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "game_state_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameStateChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "game_state_new")
                            return (@this, x) => @this.GameStateNew = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && GameStateChanged == null)
                        return;
                    var @this = new Source1GameStateChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    GameStateChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hero_assigned_lane_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HeroAssignedLaneChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "player")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HeroAssignedLaneChanged == null)
                        return;
                    var @this = new Source1HeroAssignedLaneChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HeroAssignedLaneChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "hero_draft_order_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HeroDraftOrderChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && HeroDraftOrderChanged == null)
                        return;
                    var @this = new Source1HeroDraftOrderChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    HeroDraftOrderChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_damage_increased")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDamageIncreasedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "damage_increase")
                            return (@this, x) => @this.DamageIncrease = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerDamageIncreased == null)
                        return;
                    var @this = new Source1PlayerDamageIncreasedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerDamageIncreased?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_maxhealth_increased")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerMaxhealthIncreasedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "maxhealth_increase")
                            return (@this, x) => @this.MaxhealthIncrease = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerMaxhealthIncreased == null)
                        return;
                    var @this = new Source1PlayerMaxhealthIncreasedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerMaxhealthIncreased?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_ammo_increased")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAmmoIncreasedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "ammo_increase")
                            return (@this, x) => @this.AmmoIncrease = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerAmmoIncreased == null)
                        return;
                    var @this = new Source1PlayerAmmoIncreasedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerAmmoIncreased?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_ammo_full")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAmmoFullEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerAmmoFull == null)
                        return;
                    var @this = new Source1PlayerAmmoFullEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerAmmoFull?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "client_player_currency_change")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientPlayerCurrencyChangeEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ClientPlayerCurrencyChange == null)
                        return;
                    var @this = new Source1ClientPlayerCurrencyChangeEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ClientPlayerCurrencyChange?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_used_ability")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerUsedAbilityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "abilityname")
                            return (@this, x) => @this.Abilityname = x.ValString;
                        if (key.Name == "caster_entindex")
                            return (@this, x) => @this.CasterEntindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerUsedAbility == null)
                        return;
                    var @this = new Source1PlayerUsedAbilityEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerUsedAbility?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_used_item")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerUsedItemEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_caster_pawn")
                            return (@this, x) => @this.PlayerCasterPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "abilityid_used")
                            return (@this, x) => @this.AbilityidUsed = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerUsedItem == null)
                        return;
                    var @this = new Source1PlayerUsedItemEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerUsedItem?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_rez_incoming")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerRezIncomingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player_rezzer")
                            return (@this, x) => @this.EntindexPlayerRezzer = x.ValLong;
                        if (key.Name == "entindex_player_rezzee")
                            return (@this, x) => @this.EntindexPlayerRezzee = x.ValLong;
                        if (key.Name == "victim_x")
                            return (@this, x) => @this.VictimX = x.ValFloat;
                        if (key.Name == "victim_y")
                            return (@this, x) => @this.VictimY = x.ValFloat;
                        if (key.Name == "victim_z")
                            return (@this, x) => @this.VictimZ = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerRezIncoming == null)
                        return;
                    var @this = new Source1PlayerRezIncomingEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerRezIncoming?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "non_player_used_ability")
            {
                var keys = descriptor.Keys.Select(Action<Source1NonPlayerUsedAbilityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "abilityname")
                            return (@this, x) => @this.Abilityname = x.ValString;
                        if (key.Name == "entindex_caster")
                            return (@this, x) => @this.EntindexCaster = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && NonPlayerUsedAbility == null)
                        return;
                    var @this = new Source1NonPlayerUsedAbilityEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    NonPlayerUsedAbility?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_unit_states_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerUnitStatesChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerUnitStatesChanged == null)
                        return;
                    var @this = new Source1LocalPlayerUnitStatesChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerUnitStatesChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_items_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerItemsChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerItemsChanged == null)
                        return;
                    var @this = new Source1PlayerItemsChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerItemsChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_item_price_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerItemPriceChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerItemPriceChanged == null)
                        return;
                    var @this = new Source1PlayerItemPriceChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerItemPriceChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_ability_upgrade_sell_price_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAbilityUpgradeSellPriceChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerAbilityUpgradeSellPriceChanged == null)
                        return;
                    var @this = new Source1PlayerAbilityUpgradeSellPriceChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerAbilityUpgradeSellPriceChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_respawn_time_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerRespawnTimeChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerRespawnTimeChanged == null)
                        return;
                    var @this = new Source1PlayerRespawnTimeChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerRespawnTimeChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_abilities_vdata_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerAbilitiesVdataChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "ability")
                            return (@this, x) => @this.Ability = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerAbilitiesVdataChanged == null)
                        return;
                    var @this = new Source1LocalPlayerAbilitiesVdataChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerAbilitiesVdataChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_weapons_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerWeaponsChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerWeaponsChanged == null)
                        return;
                    var @this = new Source1LocalPlayerWeaponsChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerWeaponsChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_ability_upgraded")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAbilityUpgradedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "ability")
                            return (@this, x) => @this.Ability = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerAbilityUpgraded == null)
                        return;
                    var @this = new Source1PlayerAbilityUpgradedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerAbilityUpgraded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_ability_cooldown_end_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerAbilityCooldownEndChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_ability")
                            return (@this, x) => @this.EntindexAbility = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerAbilityCooldownEndChanged == null)
                        return;
                    var @this = new Source1LocalPlayerAbilityCooldownEndChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerAbilityCooldownEndChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_data_abilities_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDataAbilitiesChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerDataAbilitiesChanged == null)
                        return;
                    var @this = new Source1PlayerDataAbilitiesChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerDataAbilitiesChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_ability_bonus_counter_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAbilityBonusCounterChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerAbilityBonusCounterChanged == null)
                        return;
                    var @this = new Source1PlayerAbilityBonusCounterChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerAbilityBonusCounterChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_modifiers_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerModifiersChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "modifier_index")
                            return (@this, x) => @this.ModifierIndex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerModifiersChanged == null)
                        return;
                    var @this = new Source1PlayerModifiersChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerModifiersChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_opened_item_shop")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerOpenedItemShopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerOpenedItemShop == null)
                        return;
                    var @this = new Source1PlayerOpenedItemShopEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerOpenedItemShop?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "tools_content_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ToolsContentChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ToolsContentChanged == null)
                        return;
                    var @this = new Source1ToolsContentChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ToolsContentChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_shop_zone_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerShopZoneChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerShopZoneChanged == null)
                        return;
                    var @this = new Source1PlayerShopZoneChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerShopZoneChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_healed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHealedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_healer")
                            return (@this, x) => @this.EntindexHealer = x.ValLong;
                        if (key.Name == "entindex_healed")
                            return (@this, x) => @this.EntindexHealed = x.ValLong;
                        if (key.Name == "heal_amount")
                            return (@this, x) => @this.HealAmount = x.ValLong;
                        if (key.Name == "abilityid_healing_source")
                            return (@this, x) => @this.AbilityidHealingSource = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerHealed == null)
                        return;
                    var @this = new Source1PlayerHealedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerHealed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_heal_prevented")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHealPreventedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_attacker")
                            return (@this, x) => @this.EntindexAttacker = x.ValLong;
                        if (key.Name == "entindex_victim")
                            return (@this, x) => @this.EntindexVictim = x.ValLong;
                        if (key.Name == "prevented_amount")
                            return (@this, x) => @this.PreventedAmount = x.ValLong;
                        if (key.Name == "abilityid_source")
                            return (@this, x) => @this.AbilityidSource = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerHealPrevented == null)
                        return;
                    var @this = new Source1PlayerHealPreventedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerHealPrevented?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_given_shield")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerGivenShieldEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_provider")
                            return (@this, x) => @this.EntindexProvider = x.ValLong;
                        if (key.Name == "entindex_target")
                            return (@this, x) => @this.EntindexTarget = x.ValLong;
                        if (key.Name == "bullet_shield_amount")
                            return (@this, x) => @this.BulletShieldAmount = x.ValLong;
                        if (key.Name == "bullet_shield_health")
                            return (@this, x) => @this.BulletShieldHealth = x.ValLong;
                        if (key.Name == "bullet_shield_health_max")
                            return (@this, x) => @this.BulletShieldHealthMax = x.ValLong;
                        if (key.Name == "tech_shield_amount")
                            return (@this, x) => @this.TechShieldAmount = x.ValLong;
                        if (key.Name == "tech_shield_health")
                            return (@this, x) => @this.TechShieldHealth = x.ValLong;
                        if (key.Name == "tech_shield_health_max")
                            return (@this, x) => @this.TechShieldHealthMax = x.ValLong;
                        if (key.Name == "abilityid_source")
                            return (@this, x) => @this.AbilityidSource = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerGivenShield == null)
                        return;
                    var @this = new Source1PlayerGivenShieldEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerGivenShield?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_weapon_switched")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerWeaponSwitchedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "viewmodelindex")
                            return (@this, x) => @this.Viewmodelindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerWeaponSwitched == null)
                        return;
                    var @this = new Source1PlayerWeaponSwitchedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerWeaponSwitched?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_hero_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHeroChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerHeroChanged == null)
                        return;
                    var @this = new Source1PlayerHeroChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerHeroChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_drafting_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDraftingChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerDraftingChanged == null)
                        return;
                    var @this = new Source1PlayerDraftingChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerDraftingChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_guided_sandbox_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerGuidedSandboxStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerGuidedSandboxStarted == null)
                        return;
                    var @this = new Source1PlayerGuidedSandboxStartedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerGuidedSandboxStarted?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_lane_challenge_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerLaneChallengeStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerLaneChallengeStarted == null)
                        return;
                    var @this = new Source1PlayerLaneChallengeStartedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerLaneChallengeStarted?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_lane_challenge_ended")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerLaneChallengeEndedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerLaneChallengeEnded == null)
                        return;
                    var @this = new Source1PlayerLaneChallengeEndedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerLaneChallengeEnded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_opened_hero_select")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerOpenedHeroSelectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerOpenedHeroSelect == null)
                        return;
                    var @this = new Source1PlayerOpenedHeroSelectEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerOpenedHeroSelect?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_hero_reset")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHeroResetEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerHeroReset == null)
                        return;
                    var @this = new Source1PlayerHeroResetEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerHeroReset?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_info_individual_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerInfoIndividualUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "account_id")
                            return (@this, x) => @this.AccountId = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerInfoIndividualUpdated == null)
                        return;
                    var @this = new Source1PlayerInfoIndividualUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerInfoIndividualUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "persona_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1PersonaUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "SteamID")
                            return (@this, x) => @this.SteamId = x.ValUint64;
                        if (key.Name == "force_update")
                            return (@this, x) => @this.ForceUpdate = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PersonaUpdated == null)
                        return;
                    var @this = new Source1PersonaUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PersonaUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "item_file_reloaded")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemFileReloadedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ItemFileReloaded == null)
                        return;
                    var @this = new Source1ItemFileReloadedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ItemFileReloaded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "party_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1PartyUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PartyUpdated == null)
                        return;
                    var @this = new Source1PartyUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PartyUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ability_cast_succeeded")
            {
                var keys = descriptor.Keys.Select(Action<Source1AbilityCastSucceededEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_ability")
                            return (@this, x) => @this.EntindexAbility = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AbilityCastSucceeded == null)
                        return;
                    var @this = new Source1AbilityCastSucceededEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AbilityCastSucceeded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ability_cast_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1AbilityCastFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_ability")
                            return (@this, x) => @this.EntindexAbility = x.ValLong;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AbilityCastFailed == null)
                        return;
                    var @this = new Source1AbilityCastFailedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AbilityCastFailed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "reload_failed_no_ammo")
            {
                var keys = descriptor.Keys.Select(Action<Source1ReloadFailedNoAmmoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ReloadFailedNoAmmo == null)
                        return;
                    var @this = new Source1ReloadFailedNoAmmoEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ReloadFailedNoAmmo?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "broke_enemy_shield")
            {
                var keys = descriptor.Keys.Select(Action<Source1BrokeEnemyShieldEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_victim")
                            return (@this, x) => @this.EntindexVictim = x.ValLong;
                        if (key.Name == "entindex_inflictor")
                            return (@this, x) => @this.EntindexInflictor = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BrokeEnemyShield == null)
                        return;
                    var @this = new Source1BrokeEnemyShieldEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BrokeEnemyShield?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ability_added")
            {
                var keys = descriptor.Keys.Select(Action<Source1AbilityAddedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "ability")
                            return (@this, x) => @this.Ability = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AbilityAdded == null)
                        return;
                    var @this = new Source1AbilityAddedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AbilityAdded?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ability_removed")
            {
                var keys = descriptor.Keys.Select(Action<Source1AbilityRemovedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "ability")
                            return (@this, x) => @this.Ability = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AbilityRemoved == null)
                        return;
                    var @this = new Source1AbilityRemovedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AbilityRemoved?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "ability_level_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1AbilityLevelChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "ability")
                            return (@this, x) => @this.Ability = x.ValLong;
                        if (key.Name == "abilitylevel")
                            return (@this, x) => @this.Abilitylevel = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && AbilityLevelChanged == null)
                        return;
                    var @this = new Source1AbilityLevelChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    AbilityLevelChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_level_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerLevelChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        if (key.Name == "new_player_level")
                            return (@this, x) => @this.NewPlayerLevel = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerLevelChanged == null)
                        return;
                    var @this = new Source1PlayerLevelChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerLevelChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "currency_missed")
            {
                var keys = descriptor.Keys.Select(Action<Source1CurrencyMissedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValShort;
                        if (key.Name == "amount")
                            return (@this, x) => @this.Amount = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CurrencyMissed == null)
                        return;
                    var @this = new Source1CurrencyMissedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CurrencyMissed?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "currency_denied")
            {
                var keys = descriptor.Keys.Select(Action<Source1CurrencyDeniedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValShort;
                        if (key.Name == "amount")
                            return (@this, x) => @this.Amount = x.ValLong;
                        if (key.Name == "is_denier")
                            return (@this, x) => @this.IsDenier = x.ValBool;
                        if (key.Name == "pos_x")
                            return (@this, x) => @this.PosX = x.ValFloat;
                        if (key.Name == "pos_y")
                            return (@this, x) => @this.PosY = x.ValFloat;
                        if (key.Name == "pos_z")
                            return (@this, x) => @this.PosZ = x.ValFloat;
                        if (key.Name == "entindex_orb")
                            return (@this, x) => @this.EntindexOrb = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CurrencyDenied == null)
                        return;
                    var @this = new Source1CurrencyDeniedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CurrencyDenied?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "currency_claimed_display")
            {
                var keys = descriptor.Keys.Select(Action<Source1CurrencyClaimedDisplayEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_player")
                            return (@this, x) => @this.EntindexPlayer = x.ValLong;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValShort;
                        if (key.Name == "millisecondTime")
                            return (@this, x) => @this.MillisecondTime = x.ValLong;
                        if (key.Name == "is_denier")
                            return (@this, x) => @this.IsDenier = x.ValBool;
                        if (key.Name == "pos_x")
                            return (@this, x) => @this.PosX = x.ValFloat;
                        if (key.Name == "pos_y")
                            return (@this, x) => @this.PosY = x.ValFloat;
                        if (key.Name == "pos_z")
                            return (@this, x) => @this.PosZ = x.ValFloat;
                        if (key.Name == "entindex_orb")
                            return (@this, x) => @this.EntindexOrb = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CurrencyClaimedDisplay == null)
                        return;
                    var @this = new Source1CurrencyClaimedDisplayEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CurrencyClaimedDisplay?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "local_player_shot_hit")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerShotHitEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LocalPlayerShotHit == null)
                        return;
                    var @this = new Source1LocalPlayerShotHitEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LocalPlayerShotHit?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "zipline_player_attached")
            {
                var keys = descriptor.Keys.Select(Action<Source1ZiplinePlayerAttachedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ZiplinePlayerAttached == null)
                        return;
                    var @this = new Source1ZiplinePlayerAttachedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ZiplinePlayerAttached?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "zipline_player_detached")
            {
                var keys = descriptor.Keys.Select(Action<Source1ZiplinePlayerDetachedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ZiplinePlayerDetached == null)
                        return;
                    var @this = new Source1ZiplinePlayerDetachedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ZiplinePlayerDetached?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "client_player_hero_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientPlayerHeroChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && ClientPlayerHeroChanged == null)
                        return;
                    var @this = new Source1ClientPlayerHeroChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    ClientPlayerHeroChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "crate_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1CrateSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "early")
                            return (@this, x) => @this.Early = x.ValBool;
                        if (key.Name == "spawn_time")
                            return (@this, x) => @this.SpawnTime = x.ValFloat;
                        if (key.Name == "spawn_location")
                            return (@this, x) => @this.SpawnLocation = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CrateSpawn == null)
                        return;
                    var @this = new Source1CrateSpawnEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CrateSpawn?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "crate_spawn_notification")
            {
                var keys = descriptor.Keys.Select(Action<Source1CrateSpawnNotificationEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "spawn_time")
                            return (@this, x) => @this.SpawnTime = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CrateSpawnNotification == null)
                        return;
                    var @this = new Source1CrateSpawnNotificationEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CrateSpawnNotification?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "citadel_pause_event")
            {
                var keys = descriptor.Keys.Select(Action<Source1CitadelPauseEventEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.PlayerIndex = x.ValShort == ushort.MaxValue ? CEntityIndex.Invalid : new CEntityIndex((uint) (x.ValShort & 0xFF) + 1);
                        if (key.Name == "value")
                            return (@this, x) => @this.Value = x.ValShort;
                        if (key.Name == "message")
                            return (@this, x) => @this.Message = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CitadelPauseEvent == null)
                        return;
                    var @this = new Source1CitadelPauseEventEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CitadelPauseEvent?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "citadel_pregame_timer")
            {
                var keys = descriptor.Keys.Select(Action<Source1CitadelPregameTimerEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "value")
                            return (@this, x) => @this.Value = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && CitadelPregameTimer == null)
                        return;
                    var @this = new Source1CitadelPregameTimerEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    CitadelPregameTimer?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "break_piece_spawned")
            {
                var keys = descriptor.Keys.Select(Action<Source1BreakPieceSpawnedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "is_rigid")
                            return (@this, x) => @this.IsRigid = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && BreakPieceSpawned == null)
                        return;
                    var @this = new Source1BreakPieceSpawnedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    BreakPieceSpawned?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "sandbox_player_moved")
            {
                var keys = descriptor.Keys.Select(Action<Source1SandboxPlayerMovedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SandboxPlayerMoved == null)
                        return;
                    var @this = new Source1SandboxPlayerMovedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SandboxPlayerMoved?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "lane_test_state_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1LaneTestStateUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "running")
                            return (@this, x) => @this.Running = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && LaneTestStateUpdated == null)
                        return;
                    var @this = new Source1LaneTestStateUpdatedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    LaneTestStateUpdated?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_closed_item_shop")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerClosedItemShopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerClosedItemShop == null)
                        return;
                    var @this = new Source1PlayerClosedItemShopEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerClosedItemShop?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "spectate_home_team_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpectateHomeTeamChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && SpectateHomeTeamChanged == null)
                        return;
                    var @this = new Source1SpectateHomeTeamChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    SpectateHomeTeamChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "player_stats_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerStatsChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.PlayerPawnHandle = CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser>.FromEventStrictEHandle((uint) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && PlayerStatsChanged == null)
                        return;
                    var @this = new Source1PlayerStatsChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    PlayerStatsChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "titan_transforming_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1TitanTransformingStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TitanTransformingStart == null)
                        return;
                    var @this = new Source1TitanTransformingStartEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TitanTransformingStart?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "titan_transforming_complete")
            {
                var keys = descriptor.Keys.Select(Action<Source1TitanTransformingCompleteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && TitanTransformingComplete == null)
                        return;
                    var @this = new Source1TitanTransformingCompleteEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    TitanTransformingComplete?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "keybind_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1KeybindChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && KeybindChanged == null)
                        return;
                    var @this = new Source1KeybindChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    KeybindChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
            if (descriptor.Name == "quick_cast_mode_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1QuickCastModeChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = (demo, @event) =>
                {
                    if (Source1GameEvent == null && QuickCastModeChanged == null)
                        return;
                    var @this = new Source1QuickCastModeChangedEvent(demo);
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    QuickCastModeChanged?.Invoke(@this);
                    Source1GameEvent?.Invoke(@this);
                };
            }
        }
    }
}

public partial class Source1ServerSpawnEvent : Source1GameEventBase
{
    internal Source1ServerSpawnEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "server_spawn";

    public string Hostname { get; set; } = "";

    public string Address { get; set; } = "";

    public int Port { get; set; }

    public string Game { get; set; } = "";

    public string Mapname { get; set; } = "";

    public string Addonname { get; set; } = "";

    public int Maxplayers { get; set; }

    public string Os { get; set; } = "";

    public bool Dedicated { get; set; }

    public bool Password { get; set; }
}

public partial class Source1ServerPreShutdownEvent : Source1GameEventBase
{
    internal Source1ServerPreShutdownEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "server_pre_shutdown";

    public string Reason { get; set; } = "";
}

public partial class Source1ServerShutdownEvent : Source1GameEventBase
{
    internal Source1ServerShutdownEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "server_shutdown";

    public string Reason { get; set; } = "";
}

public partial class Source1ServerMessageEvent : Source1GameEventBase
{
    internal Source1ServerMessageEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "server_message";

    public string Text { get; set; } = "";
}

public partial class Source1ServerCvarEvent : Source1GameEventBase
{
    internal Source1ServerCvarEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "server_cvar";

    public string Cvarname { get; set; } = "";

    public string Cvarvalue { get; set; } = "";
}

public partial class Source1PlayerActivateEvent : Source1GameEventBase
{
    internal Source1PlayerActivateEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_activate";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);
}

public partial class Source1PlayerConnectFullEvent : Source1GameEventBase
{
    internal Source1PlayerConnectFullEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_connect_full";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);
}

public partial class Source1PlayerFullUpdateEvent : Source1GameEventBase
{
    internal Source1PlayerFullUpdateEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_full_update";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Count { get; set; }
}

public partial class Source1PlayerConnectEvent : Source1GameEventBase
{
    internal Source1PlayerConnectEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_connect";

    public string Name { get; set; } = "";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public string Networkid { get; set; } = "";

    public ulong SteamId { get; set; }

    public string Address { get; set; } = "";

    public bool Bot { get; set; }
}

public partial class Source1PlayerDisconnectEvent : Source1GameEventBase
{
    internal Source1PlayerDisconnectEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_disconnect";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Reason { get; set; }

    public string Name { get; set; } = "";

    public string Networkid { get; set; } = "";

    public ulong SteamId { get; set; }

    public int PlayerID { get; set; }
}

public partial class Source1PlayerInfoEvent : Source1GameEventBase
{
    internal Source1PlayerInfoEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_info";

    public string Name { get; set; } = "";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public ulong SteamId { get; set; }

    public bool Bot { get; set; }
}

public partial class Source1PlayerSpawnEvent : Source1GameEventBase
{
    internal Source1PlayerSpawnEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_spawn";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerTeamEvent : Source1GameEventBase
{
    internal Source1PlayerTeamEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_team";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Team { get; set; }

    public int Oldteam { get; set; }

    public bool Disconnect { get; set; }

    public bool Silent { get; set; }

    public string Name { get; set; } = "";

    public bool Isbot { get; set; }
}

public partial class Source1LocalPlayerTeamEvent : Source1GameEventBase
{
    internal Source1LocalPlayerTeamEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_team";
}

public partial class Source1LocalPlayerControllerTeamEvent : Source1GameEventBase
{
    internal Source1LocalPlayerControllerTeamEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_controller_team";
}

public partial class Source1PlayerChangenameEvent : Source1GameEventBase
{
    internal Source1PlayerChangenameEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_changename";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public string Oldname { get; set; } = "";

    public string Newname { get; set; } = "";
}

public partial class Source1PlayerChatEvent : Source1GameEventBase
{
    internal Source1PlayerChatEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_chat";

    public bool Teamonly { get; set; }

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Playerid { get; set; }

    public string Text { get; set; } = "";
}

public partial class Source1LocalPlayerPawnChangedEvent : Source1GameEventBase
{
    internal Source1LocalPlayerPawnChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_pawn_changed";
}

public partial class Source1TeamplayBroadcastAudioEvent : Source1GameEventBase
{
    internal Source1TeamplayBroadcastAudioEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "teamplay_broadcast_audio";

    public int Team { get; set; }

    public string Sound { get; set; } = "";
}

public partial class Source1FinaleStartEvent : Source1GameEventBase
{
    internal Source1FinaleStartEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "finale_start";

    public int Rushes { get; set; }
}

public partial class Source1PlayerStatsUpdatedEvent : Source1GameEventBase
{
    internal Source1PlayerStatsUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_stats_updated";

    public bool Forceupload { get; set; }
}

public partial class Source1UserDataDownloadedEvent : Source1GameEventBase
{
    internal Source1UserDataDownloadedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "user_data_downloaded";
}

public partial class Source1RagdollDissolvedEvent : Source1GameEventBase
{
    internal Source1RagdollDissolvedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ragdoll_dissolved";

    public int Entindex { get; set; }
}

public partial class Source1TeamInfoEvent : Source1GameEventBase
{
    internal Source1TeamInfoEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "team_info";

    public int Teamid { get; set; }

    public string Teamname { get; set; } = "";
}

public partial class Source1TeamScoreEvent : Source1GameEventBase
{
    internal Source1TeamScoreEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "team_score";

    public int Teamid { get; set; }

    public int Score { get; set; }
}

public partial class Source1HltvCameramanEvent : Source1GameEventBase
{
    internal Source1HltvCameramanEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_cameraman";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);
}

public partial class Source1HltvChaseEvent : Source1GameEventBase
{
    internal Source1HltvChaseEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_chase";

    public CEntityIndex Target1Index { get; set; }
    public CCitadelPlayerController? Target1 => _demo.GetEntityByIndex<CCitadelPlayerController>(Target1Index);

    public CEntityIndex Target2Index { get; set; }
    public CCitadelPlayerController? Target2 => _demo.GetEntityByIndex<CCitadelPlayerController>(Target2Index);

    public int Distance { get; set; }

    public int Theta { get; set; }

    public int Phi { get; set; }

    public int Inertia { get; set; }

    public int Ineye { get; set; }
}

public partial class Source1HltvRankCameraEvent : Source1GameEventBase
{
    internal Source1HltvRankCameraEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_rank_camera";

    public int Index { get; set; }

    public float Rank { get; set; }

    public CEntityIndex TargetIndex { get; set; }
    public CCitadelPlayerController? Target => _demo.GetEntityByIndex<CCitadelPlayerController>(TargetIndex);
}

public partial class Source1HltvRankEntityEvent : Source1GameEventBase
{
    internal Source1HltvRankEntityEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_rank_entity";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public float Rank { get; set; }

    public CEntityIndex TargetIndex { get; set; }
    public CCitadelPlayerController? Target => _demo.GetEntityByIndex<CCitadelPlayerController>(TargetIndex);
}

public partial class Source1HltvFixedEvent : Source1GameEventBase
{
    internal Source1HltvFixedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_fixed";

    public int Posx { get; set; }

    public int Posy { get; set; }

    public int Posz { get; set; }

    public int Theta { get; set; }

    public int Phi { get; set; }

    public int Offset { get; set; }

    public float Fov { get; set; }

    public CEntityIndex TargetIndex { get; set; }
    public CCitadelPlayerController? Target => _demo.GetEntityByIndex<CCitadelPlayerController>(TargetIndex);
}

public partial class Source1HltvMessageEvent : Source1GameEventBase
{
    internal Source1HltvMessageEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_message";

    public string Text { get; set; } = "";
}

public partial class Source1HltvStatusEvent : Source1GameEventBase
{
    internal Source1HltvStatusEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_status";

    public int Clients { get; set; }

    public int Slots { get; set; }

    public int Proxies { get; set; }

    public string Master { get; set; } = "";
}

public partial class Source1HltvTitleEvent : Source1GameEventBase
{
    internal Source1HltvTitleEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_title";

    public string Text { get; set; } = "";
}

public partial class Source1HltvChatEvent : Source1GameEventBase
{
    internal Source1HltvChatEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_chat";

    public string Text { get; set; } = "";

    public ulong SteamId { get; set; }
}

public partial class Source1HltvVersioninfoEvent : Source1GameEventBase
{
    internal Source1HltvVersioninfoEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_versioninfo";

    public int Version { get; set; }
}

public partial class Source1HltvReplayEvent : Source1GameEventBase
{
    internal Source1HltvReplayEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_replay";

    public int Delay { get; set; }

    public int Reason { get; set; }
}

public partial class Source1HltvReplayStatusEvent : Source1GameEventBase
{
    internal Source1HltvReplayStatusEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hltv_replay_status";

    public int Reason { get; set; }
}

public partial class Source1DemoStopEvent : Source1GameEventBase
{
    internal Source1DemoStopEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "demo_stop";
}

public partial class Source1MapShutdownEvent : Source1GameEventBase
{
    internal Source1MapShutdownEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "map_shutdown";
}

public partial class Source1MapTransitionEvent : Source1GameEventBase
{
    internal Source1MapTransitionEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "map_transition";
}

public partial class Source1HostnameChangedEvent : Source1GameEventBase
{
    internal Source1HostnameChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hostname_changed";

    public string Hostname { get; set; } = "";
}

public partial class Source1DifficultyChangedEvent : Source1GameEventBase
{
    internal Source1DifficultyChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "difficulty_changed";

    public int NewDifficulty { get; set; }

    public int OldDifficulty { get; set; }

    public string StrDifficulty { get; set; } = "";
}

public partial class Source1GameMessageEvent : Source1GameEventBase
{
    internal Source1GameMessageEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "game_message";

    public int Target { get; set; }

    public string Text { get; set; } = "";
}

public partial class Source1GameNewmapEvent : Source1GameEventBase
{
    internal Source1GameNewmapEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "game_newmap";

    public string Mapname { get; set; } = "";

    public bool Transition { get; set; }
}

public partial class Source1RoundStartEvent : Source1GameEventBase
{
    internal Source1RoundStartEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "round_start";

    public int Timelimit { get; set; }

    public int Fraglimit { get; set; }

    public string Objective { get; set; } = "";
}

public partial class Source1RoundEndEvent : Source1GameEventBase
{
    internal Source1RoundEndEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "round_end";

    public int Winner { get; set; }

    public int Reason { get; set; }

    public string Message { get; set; } = "";

    public float Time { get; set; }
}

public partial class Source1RoundStartPreEntityEvent : Source1GameEventBase
{
    internal Source1RoundStartPreEntityEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "round_start_pre_entity";
}

public partial class Source1RoundStartPostNavEvent : Source1GameEventBase
{
    internal Source1RoundStartPostNavEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "round_start_post_nav";
}

public partial class Source1RoundFreezeEndEvent : Source1GameEventBase
{
    internal Source1RoundFreezeEndEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "round_freeze_end";
}

public partial class Source1TeamplayRoundStartEvent : Source1GameEventBase
{
    internal Source1TeamplayRoundStartEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "teamplay_round_start";

    public bool FullReset { get; set; }
}

public partial class Source1PlayerDeathEvent : Source1GameEventBase
{
    internal Source1PlayerDeathEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_death";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Entityid { get; set; }

    public CEntityIndex AttackerIndex { get; set; }
    public CCitadelPlayerController? Attacker => _demo.GetEntityByIndex<CCitadelPlayerController>(AttackerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> AttackerPawnHandle { get; set; }
    public CCitadelPlayerPawn? AttackerPawn => _demo.GetEntityByHandle(AttackerPawnHandle) as CCitadelPlayerPawn;

    public string Attackername { get; set; } = "";

    public int Attackerehandle { get; set; }

    public string Weapon { get; set; } = "";

    public bool Headshot { get; set; }

    public bool Attackerisbot { get; set; }

    public string Victimname { get; set; } = "";

    public bool Victimisbot { get; set; }

    public bool Abort { get; set; }

    public int Type { get; set; }

    public float VictimX { get; set; }

    public float VictimY { get; set; }

    public float VictimZ { get; set; }

    public int Bounty { get; set; }

    public int DroppedGold { get; set; }

    public CEntityIndex Assister1controllerIndex { get; set; }
    public CCitadelPlayerController? Assister1controller => _demo.GetEntityByIndex<CCitadelPlayerController>(Assister1controllerIndex);

    public CEntityIndex Assister2controllerIndex { get; set; }
    public CCitadelPlayerController? Assister2controller => _demo.GetEntityByIndex<CCitadelPlayerController>(Assister2controllerIndex);

    public CEntityIndex Assister3controllerIndex { get; set; }
    public CCitadelPlayerController? Assister3controller => _demo.GetEntityByIndex<CCitadelPlayerController>(Assister3controllerIndex);

    public CEntityIndex Assister4controllerIndex { get; set; }
    public CCitadelPlayerController? Assister4controller => _demo.GetEntityByIndex<CCitadelPlayerController>(Assister4controllerIndex);

    public CEntityIndex Assister5controllerIndex { get; set; }
    public CCitadelPlayerController? Assister5controller => _demo.GetEntityByIndex<CCitadelPlayerController>(Assister5controllerIndex);
}

public partial class Source1PlayerFootstepEvent : Source1GameEventBase
{
    internal Source1PlayerFootstepEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_footstep";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerHintmessageEvent : Source1GameEventBase
{
    internal Source1PlayerHintmessageEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_hintmessage";

    public string Hintmessage { get; set; } = "";
}

public partial class Source1BreakBreakableEvent : Source1GameEventBase
{
    internal Source1BreakBreakableEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "break_breakable";

    public int Entindex { get; set; }

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Material { get; set; }
}

public partial class Source1BrokenBreakableEvent : Source1GameEventBase
{
    internal Source1BrokenBreakableEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "broken_breakable";

    public int Entindex { get; set; }

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Material { get; set; }
}

public partial class Source1BreakPropEvent : Source1GameEventBase
{
    internal Source1BreakPropEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "break_prop";

    public int Entindex { get; set; }

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public bool PlayerHeld { get; set; }

    public bool PlayerThrown { get; set; }

    public bool PlayerDropped { get; set; }
}

public partial class Source1EntityKilledEvent : Source1GameEventBase
{
    internal Source1EntityKilledEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "entity_killed";

    public int EntindexKilled { get; set; }

    public int EntindexAttacker { get; set; }

    public int EntindexInflictor { get; set; }

    public int Damagebits { get; set; }
}

public partial class Source1DoorCloseEvent : Source1GameEventBase
{
    internal Source1DoorCloseEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "door_close";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public bool Checkpoint { get; set; }
}

public partial class Source1VoteStartedEvent : Source1GameEventBase
{
    internal Source1VoteStartedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_started";

    public string Issue { get; set; } = "";

    public string Param1 { get; set; } = "";

    public string Votedata { get; set; } = "";

    public int Team { get; set; }

    public int Initiator { get; set; }
}

public partial class Source1VoteFailedEvent : Source1GameEventBase
{
    internal Source1VoteFailedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_failed";

    public int Team { get; set; }
}

public partial class Source1VotePassedEvent : Source1GameEventBase
{
    internal Source1VotePassedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_passed";

    public string Details { get; set; } = "";

    public string Param1 { get; set; } = "";

    public int Team { get; set; }
}

public partial class Source1VoteChangedEvent : Source1GameEventBase
{
    internal Source1VoteChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_changed";

    public int YesVotes { get; set; }

    public int NoVotes { get; set; }

    public int PotentialVotes { get; set; }
}

public partial class Source1VoteCastYesEvent : Source1GameEventBase
{
    internal Source1VoteCastYesEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_cast_yes";

    public int Team { get; set; }

    public int Entityid { get; set; }
}

public partial class Source1VoteCastNoEvent : Source1GameEventBase
{
    internal Source1VoteCastNoEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "vote_cast_no";

    public int Team { get; set; }

    public int Entityid { get; set; }
}

public partial class Source1AchievementEventEvent : Source1GameEventBase
{
    internal Source1AchievementEventEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "achievement_event";

    public string AchievementName { get; set; } = "";

    public int CurVal { get; set; }

    public int MaxVal { get; set; }
}

public partial class Source1AchievementEarnedEvent : Source1GameEventBase
{
    internal Source1AchievementEarnedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "achievement_earned";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Achievement { get; set; }
}

public partial class Source1AchievementWriteFailedEvent : Source1GameEventBase
{
    internal Source1AchievementWriteFailedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "achievement_write_failed";
}

public partial class Source1BonusUpdatedEvent : Source1GameEventBase
{
    internal Source1BonusUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "bonus_updated";

    public int Numadvanced { get; set; }

    public int Numbronze { get; set; }

    public int Numsilver { get; set; }

    public int Numgold { get; set; }
}

public partial class Source1SpecTargetUpdatedEvent : Source1GameEventBase
{
    internal Source1SpecTargetUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "spec_target_updated";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Target { get; set; }
}

public partial class Source1SpecModeUpdatedEvent : Source1GameEventBase
{
    internal Source1SpecModeUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "spec_mode_updated";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1EntityVisibleEvent : Source1GameEventBase
{
    internal Source1EntityVisibleEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "entity_visible";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Subject { get; set; }

    public string Classname { get; set; } = "";

    public string Entityname { get; set; } = "";
}

public partial class Source1GameinstructorDrawEvent : Source1GameEventBase
{
    internal Source1GameinstructorDrawEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gameinstructor_draw";
}

public partial class Source1GameinstructorNodrawEvent : Source1GameEventBase
{
    internal Source1GameinstructorNodrawEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gameinstructor_nodraw";
}

public partial class Source1FlareIgniteNpcEvent : Source1GameEventBase
{
    internal Source1FlareIgniteNpcEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "flare_ignite_npc";

    public int Entindex { get; set; }
}

public partial class Source1HelicopterGrenadePuntMissEvent : Source1GameEventBase
{
    internal Source1HelicopterGrenadePuntMissEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "helicopter_grenade_punt_miss";
}

public partial class Source1PhysgunPickupEvent : Source1GameEventBase
{
    internal Source1PhysgunPickupEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "physgun_pickup";

    public int Target { get; set; }
}

public partial class Source1InventoryUpdatedEvent : Source1GameEventBase
{
    internal Source1InventoryUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "inventory_updated";

    public int Itemdef { get; set; }

    public int Itemid { get; set; }
}

public partial class Source1CartUpdatedEvent : Source1GameEventBase
{
    internal Source1CartUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "cart_updated";
}

public partial class Source1StorePricesheetUpdatedEvent : Source1GameEventBase
{
    internal Source1StorePricesheetUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "store_pricesheet_updated";
}

public partial class Source1ItemSchemaInitializedEvent : Source1GameEventBase
{
    internal Source1ItemSchemaInitializedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "item_schema_initialized";
}

public partial class Source1DropRateModifiedEvent : Source1GameEventBase
{
    internal Source1DropRateModifiedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "drop_rate_modified";
}

public partial class Source1EventTicketModifiedEvent : Source1GameEventBase
{
    internal Source1EventTicketModifiedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "event_ticket_modified";
}

public partial class Source1GcConnectedEvent : Source1GameEventBase
{
    internal Source1GcConnectedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gc_connected";
}

public partial class Source1InstructorStartLessonEvent : Source1GameEventBase
{
    internal Source1InstructorStartLessonEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "instructor_start_lesson";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public string HintName { get; set; } = "";

    public int HintTarget { get; set; }

    public int VrMovementType { get; set; }

    public bool VrSingleController { get; set; }

    public int VrControllerType { get; set; }
}

public partial class Source1InstructorCloseLessonEvent : Source1GameEventBase
{
    internal Source1InstructorCloseLessonEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "instructor_close_lesson";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public string HintName { get; set; } = "";
}

public partial class Source1InstructorServerHintCreateEvent : Source1GameEventBase
{
    internal Source1InstructorServerHintCreateEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "instructor_server_hint_create";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int HintEntindex { get; set; }

    public string HintName { get; set; } = "";

    public string HintReplaceKey { get; set; } = "";

    public int HintTarget { get; set; }

    public CEntityIndex HintActivatorPlayerIndex { get; set; }
    public CCitadelPlayerController? HintActivatorPlayer => _demo.GetEntityByIndex<CCitadelPlayerController>(HintActivatorPlayerIndex);

    public int HintTimeout { get; set; }

    public string HintIconOnscreen { get; set; } = "";

    public string HintIconOffscreen { get; set; } = "";

    public string HintCaption { get; set; } = "";

    public string HintActivatorCaption { get; set; } = "";

    public string HintColor { get; set; } = "";

    public float HintIconOffset { get; set; }

    public float HintRange { get; set; }

    public int HintFlags { get; set; }

    public string HintBinding { get; set; } = "";

    public bool HintAllowNodrawTarget { get; set; }

    public bool HintNooffscreen { get; set; }

    public bool HintForcecaption { get; set; }

    public bool HintLocalPlayerOnly { get; set; }

    public string HintStartSound { get; set; } = "";

    public string HintLayoutfile { get; set; } = "";

    public int HintVrPanelType { get; set; }

    public float HintVrHeightOffset { get; set; }

    public float HintVrOffsetX { get; set; }

    public float HintVrOffsetY { get; set; }

    public float HintVrOffsetZ { get; set; }
}

public partial class Source1InstructorServerHintStopEvent : Source1GameEventBase
{
    internal Source1InstructorServerHintStopEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "instructor_server_hint_stop";

    public string HintName { get; set; } = "";

    public int HintEntindex { get; set; }
}

public partial class Source1SetInstructorGroupEnabledEvent : Source1GameEventBase
{
    internal Source1SetInstructorGroupEnabledEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "set_instructor_group_enabled";

    public string Group { get; set; } = "";

    public int Enabled { get; set; }
}

public partial class Source1ClientsideLessonClosedEvent : Source1GameEventBase
{
    internal Source1ClientsideLessonClosedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "clientside_lesson_closed";

    public string LessonName { get; set; } = "";
}

public partial class Source1DynamicShadowLightChangedEvent : Source1GameEventBase
{
    internal Source1DynamicShadowLightChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "dynamic_shadow_light_changed";
}

public partial class Source1GameuiActivatedEvent : Source1GameEventBase
{
    internal Source1GameuiActivatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gameui_activated";
}

public partial class Source1GameuiHiddenEvent : Source1GameEventBase
{
    internal Source1GameuiHiddenEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gameui_hidden";
}

public partial class Source1GameuiFreeCursorChangedEvent : Source1GameEventBase
{
    internal Source1GameuiFreeCursorChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "gameui_free_cursor_changed";
}

public partial class Source1SpectateFowViewTeamChangedEvent : Source1GameEventBase
{
    internal Source1SpectateFowViewTeamChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "spectate_fow_view_team_changed";
}

public partial class Source1ClientDisconnectEvent : Source1GameEventBase
{
    internal Source1ClientDisconnectEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "client_disconnect";

    public int ReasonCode { get; set; }

    public string ReasonDesc { get; set; } = "";
}

public partial class Source1PlayerRespawnedEvent : Source1GameEventBase
{
    internal Source1PlayerRespawnedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_respawned";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public float FacingYaw { get; set; }
}

public partial class Source1CitadelHintChangedEvent : Source1GameEventBase
{
    internal Source1CitadelHintChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "citadel_hint_changed";

    public int HintFeature { get; set; }
}

public partial class Source1CitadeltvChaseHeroEvent : Source1GameEventBase
{
    internal Source1CitadeltvChaseHeroEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "citadeltv_chase_hero";

    public int Target1 { get; set; }

    public int Target2 { get; set; }

    public int Type { get; set; }

    public int Priority { get; set; }

    public float Gametime { get; set; }

    public bool Highlight { get; set; }

    public CEntityIndex Target1playeridIndex { get; set; }
    public CCitadelPlayerController? Target1playerid => _demo.GetEntityByIndex<CCitadelPlayerController>(Target1playeridIndex);

    public CEntityIndex Target2playeridIndex { get; set; }
    public CCitadelPlayerController? Target2playerid => _demo.GetEntityByIndex<CCitadelPlayerController>(Target2playeridIndex);

    public int Eventtype { get; set; }
}

public partial class Source1CitadeltvUnitEventEvent : Source1GameEventBase
{
    internal Source1CitadeltvUnitEventEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "citadeltv_unit_event";

    public int Victim { get; set; }

    public int Attacker { get; set; }

    public int Basepriority { get; set; }

    public int Priority { get; set; }

    public int Eventtype { get; set; }
}

public partial class Source1PlayerBotReplaceEvent : Source1GameEventBase
{
    internal Source1PlayerBotReplaceEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_bot_replace";

    public int Player { get; set; }

    public int Bot { get; set; }
}

public partial class Source1BotPlayerReplaceEvent : Source1GameEventBase
{
    internal Source1BotPlayerReplaceEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "bot_player_replace";

    public int Bot { get; set; }

    public int Player { get; set; }
}

public partial class Source1WeaponReloadStartedEvent : Source1GameEventBase
{
    internal Source1WeaponReloadStartedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "weapon_reload_started";

    public int EntindexPlayer { get; set; }

    public int BulletsLeftInClip { get; set; }
}

public partial class Source1WeaponReloadCompleteEvent : Source1GameEventBase
{
    internal Source1WeaponReloadCompleteEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "weapon_reload_complete";

    public int EntindexPlayer { get; set; }
}

public partial class Source1WeaponZoomStartedEvent : Source1GameEventBase
{
    internal Source1WeaponZoomStartedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "weapon_zoom_started";

    public int EntindexPlayer { get; set; }
}

public partial class Source1MatchClockEvent : Source1GameEventBase
{
    internal Source1MatchClockEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "match_clock";

    public float MatchTime { get; set; }

    public bool Paused { get; set; }
}

public partial class Source1ItemPickupEvent : Source1GameEventBase
{
    internal Source1ItemPickupEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "item_pickup";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public string Item { get; set; } = "";
}

public partial class Source1GrenadeBounceEvent : Source1GameEventBase
{
    internal Source1GrenadeBounceEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "grenade_bounce";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1GameStateChangedEvent : Source1GameEventBase
{
    internal Source1GameStateChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "game_state_changed";

    public int GameStateNew { get; set; }
}

public partial class Source1HeroAssignedLaneChangedEvent : Source1GameEventBase
{
    internal Source1HeroAssignedLaneChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hero_assigned_lane_changed";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);
}

public partial class Source1HeroDraftOrderChangedEvent : Source1GameEventBase
{
    internal Source1HeroDraftOrderChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "hero_draft_order_changed";
}

public partial class Source1PlayerDamageIncreasedEvent : Source1GameEventBase
{
    internal Source1PlayerDamageIncreasedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_damage_increased";

    public int EntindexPlayer { get; set; }

    public int DamageIncrease { get; set; }
}

public partial class Source1PlayerMaxhealthIncreasedEvent : Source1GameEventBase
{
    internal Source1PlayerMaxhealthIncreasedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_maxhealth_increased";

    public int EntindexPlayer { get; set; }

    public int MaxhealthIncrease { get; set; }
}

public partial class Source1PlayerAmmoIncreasedEvent : Source1GameEventBase
{
    internal Source1PlayerAmmoIncreasedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_ammo_increased";

    public int EntindexPlayer { get; set; }

    public int AmmoIncrease { get; set; }
}

public partial class Source1PlayerAmmoFullEvent : Source1GameEventBase
{
    internal Source1PlayerAmmoFullEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_ammo_full";

    public int EntindexPlayer { get; set; }
}

public partial class Source1ClientPlayerCurrencyChangeEvent : Source1GameEventBase
{
    internal Source1ClientPlayerCurrencyChangeEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "client_player_currency_change";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerUsedAbilityEvent : Source1GameEventBase
{
    internal Source1PlayerUsedAbilityEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_used_ability";

    public int EntindexPlayer { get; set; }

    public string Abilityname { get; set; } = "";

    public int CasterEntindex { get; set; }
}

public partial class Source1PlayerUsedItemEvent : Source1GameEventBase
{
    internal Source1PlayerUsedItemEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_used_item";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerCasterPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerCasterPawn => _demo.GetEntityByHandle(PlayerCasterPawnHandle) as CCitadelPlayerPawn;

    public int AbilityidUsed { get; set; }
}

public partial class Source1PlayerRezIncomingEvent : Source1GameEventBase
{
    internal Source1PlayerRezIncomingEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_rez_incoming";

    public int EntindexPlayerRezzer { get; set; }

    public int EntindexPlayerRezzee { get; set; }

    public float VictimX { get; set; }

    public float VictimY { get; set; }

    public float VictimZ { get; set; }
}

public partial class Source1NonPlayerUsedAbilityEvent : Source1GameEventBase
{
    internal Source1NonPlayerUsedAbilityEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "non_player_used_ability";

    public string Abilityname { get; set; } = "";

    public int EntindexCaster { get; set; }
}

public partial class Source1LocalPlayerUnitStatesChangedEvent : Source1GameEventBase
{
    internal Source1LocalPlayerUnitStatesChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_unit_states_changed";
}

public partial class Source1PlayerItemsChangedEvent : Source1GameEventBase
{
    internal Source1PlayerItemsChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_items_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerItemPriceChangedEvent : Source1GameEventBase
{
    internal Source1PlayerItemPriceChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_item_price_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerAbilityUpgradeSellPriceChangedEvent : Source1GameEventBase
{
    internal Source1PlayerAbilityUpgradeSellPriceChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_ability_upgrade_sell_price_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerRespawnTimeChangedEvent : Source1GameEventBase
{
    internal Source1PlayerRespawnTimeChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_respawn_time_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1LocalPlayerAbilitiesVdataChangedEvent : Source1GameEventBase
{
    internal Source1LocalPlayerAbilitiesVdataChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_abilities_vdata_changed";

    public int Ability { get; set; }
}

public partial class Source1LocalPlayerWeaponsChangedEvent : Source1GameEventBase
{
    internal Source1LocalPlayerWeaponsChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_weapons_changed";
}

public partial class Source1PlayerAbilityUpgradedEvent : Source1GameEventBase
{
    internal Source1PlayerAbilityUpgradedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_ability_upgraded";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Ability { get; set; }
}

public partial class Source1LocalPlayerAbilityCooldownEndChangedEvent : Source1GameEventBase
{
    internal Source1LocalPlayerAbilityCooldownEndChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_ability_cooldown_end_changed";

    public int EntindexAbility { get; set; }
}

public partial class Source1PlayerDataAbilitiesChangedEvent : Source1GameEventBase
{
    internal Source1PlayerDataAbilitiesChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_data_abilities_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerAbilityBonusCounterChangedEvent : Source1GameEventBase
{
    internal Source1PlayerAbilityBonusCounterChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_ability_bonus_counter_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerModifiersChangedEvent : Source1GameEventBase
{
    internal Source1PlayerModifiersChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_modifiers_changed";

    public int EntindexPlayer { get; set; }

    public int ModifierIndex { get; set; }
}

public partial class Source1PlayerOpenedItemShopEvent : Source1GameEventBase
{
    internal Source1PlayerOpenedItemShopEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_opened_item_shop";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1ToolsContentChangedEvent : Source1GameEventBase
{
    internal Source1ToolsContentChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "tools_content_changed";
}

public partial class Source1PlayerShopZoneChangedEvent : Source1GameEventBase
{
    internal Source1PlayerShopZoneChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_shop_zone_changed";
}

public partial class Source1PlayerHealedEvent : Source1GameEventBase
{
    internal Source1PlayerHealedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_healed";

    public int EntindexHealer { get; set; }

    public int EntindexHealed { get; set; }

    public int HealAmount { get; set; }

    public int AbilityidHealingSource { get; set; }
}

public partial class Source1PlayerHealPreventedEvent : Source1GameEventBase
{
    internal Source1PlayerHealPreventedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_heal_prevented";

    public int EntindexAttacker { get; set; }

    public int EntindexVictim { get; set; }

    public int PreventedAmount { get; set; }

    public int AbilityidSource { get; set; }
}

public partial class Source1PlayerGivenShieldEvent : Source1GameEventBase
{
    internal Source1PlayerGivenShieldEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_given_shield";

    public int EntindexProvider { get; set; }

    public int EntindexTarget { get; set; }

    public int BulletShieldAmount { get; set; }

    public int BulletShieldHealth { get; set; }

    public int BulletShieldHealthMax { get; set; }

    public int TechShieldAmount { get; set; }

    public int TechShieldHealth { get; set; }

    public int TechShieldHealthMax { get; set; }

    public int AbilityidSource { get; set; }
}

public partial class Source1PlayerWeaponSwitchedEvent : Source1GameEventBase
{
    internal Source1PlayerWeaponSwitchedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_weapon_switched";

    public int EntindexPlayer { get; set; }

    public int Viewmodelindex { get; set; }
}

public partial class Source1PlayerHeroChangedEvent : Source1GameEventBase
{
    internal Source1PlayerHeroChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_hero_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1PlayerDraftingChangedEvent : Source1GameEventBase
{
    internal Source1PlayerDraftingChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_drafting_changed";
}

public partial class Source1PlayerGuidedSandboxStartedEvent : Source1GameEventBase
{
    internal Source1PlayerGuidedSandboxStartedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_guided_sandbox_started";
}

public partial class Source1PlayerLaneChallengeStartedEvent : Source1GameEventBase
{
    internal Source1PlayerLaneChallengeStartedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_lane_challenge_started";
}

public partial class Source1PlayerLaneChallengeEndedEvent : Source1GameEventBase
{
    internal Source1PlayerLaneChallengeEndedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_lane_challenge_ended";
}

public partial class Source1PlayerOpenedHeroSelectEvent : Source1GameEventBase
{
    internal Source1PlayerOpenedHeroSelectEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_opened_hero_select";

    public int EntindexPlayer { get; set; }
}

public partial class Source1PlayerHeroResetEvent : Source1GameEventBase
{
    internal Source1PlayerHeroResetEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_hero_reset";
}

public partial class Source1PlayerInfoIndividualUpdatedEvent : Source1GameEventBase
{
    internal Source1PlayerInfoIndividualUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_info_individual_updated";

    public int AccountId { get; set; }
}

public partial class Source1PersonaUpdatedEvent : Source1GameEventBase
{
    internal Source1PersonaUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "persona_updated";

    public ulong SteamId { get; set; }

    public bool ForceUpdate { get; set; }
}

public partial class Source1ItemFileReloadedEvent : Source1GameEventBase
{
    internal Source1ItemFileReloadedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "item_file_reloaded";
}

public partial class Source1PartyUpdatedEvent : Source1GameEventBase
{
    internal Source1PartyUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "party_updated";
}

public partial class Source1AbilityCastSucceededEvent : Source1GameEventBase
{
    internal Source1AbilityCastSucceededEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ability_cast_succeeded";

    public int EntindexAbility { get; set; }
}

public partial class Source1AbilityCastFailedEvent : Source1GameEventBase
{
    internal Source1AbilityCastFailedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ability_cast_failed";

    public int EntindexAbility { get; set; }

    public int Reason { get; set; }
}

public partial class Source1ReloadFailedNoAmmoEvent : Source1GameEventBase
{
    internal Source1ReloadFailedNoAmmoEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "reload_failed_no_ammo";
}

public partial class Source1BrokeEnemyShieldEvent : Source1GameEventBase
{
    internal Source1BrokeEnemyShieldEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "broke_enemy_shield";

    public int EntindexVictim { get; set; }

    public int EntindexInflictor { get; set; }
}

public partial class Source1AbilityAddedEvent : Source1GameEventBase
{
    internal Source1AbilityAddedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ability_added";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Ability { get; set; }
}

public partial class Source1AbilityRemovedEvent : Source1GameEventBase
{
    internal Source1AbilityRemovedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ability_removed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Ability { get; set; }
}

public partial class Source1AbilityLevelChangedEvent : Source1GameEventBase
{
    internal Source1AbilityLevelChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "ability_level_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int Ability { get; set; }

    public int Abilitylevel { get; set; }
}

public partial class Source1PlayerLevelChangedEvent : Source1GameEventBase
{
    internal Source1PlayerLevelChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_level_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;

    public int NewPlayerLevel { get; set; }
}

public partial class Source1CurrencyMissedEvent : Source1GameEventBase
{
    internal Source1CurrencyMissedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "currency_missed";

    public int EntindexPlayer { get; set; }

    public int Type { get; set; }

    public int Amount { get; set; }
}

public partial class Source1CurrencyDeniedEvent : Source1GameEventBase
{
    internal Source1CurrencyDeniedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "currency_denied";

    public int Type { get; set; }

    public int Amount { get; set; }

    public bool IsDenier { get; set; }

    public float PosX { get; set; }

    public float PosY { get; set; }

    public float PosZ { get; set; }

    public int EntindexOrb { get; set; }
}

public partial class Source1CurrencyClaimedDisplayEvent : Source1GameEventBase
{
    internal Source1CurrencyClaimedDisplayEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "currency_claimed_display";

    public int EntindexPlayer { get; set; }

    public int Type { get; set; }

    public int MillisecondTime { get; set; }

    public bool IsDenier { get; set; }

    public float PosX { get; set; }

    public float PosY { get; set; }

    public float PosZ { get; set; }

    public int EntindexOrb { get; set; }
}

public partial class Source1LocalPlayerShotHitEvent : Source1GameEventBase
{
    internal Source1LocalPlayerShotHitEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "local_player_shot_hit";
}

public partial class Source1ZiplinePlayerAttachedEvent : Source1GameEventBase
{
    internal Source1ZiplinePlayerAttachedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "zipline_player_attached";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1ZiplinePlayerDetachedEvent : Source1GameEventBase
{
    internal Source1ZiplinePlayerDetachedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "zipline_player_detached";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1ClientPlayerHeroChangedEvent : Source1GameEventBase
{
    internal Source1ClientPlayerHeroChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "client_player_hero_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1CrateSpawnEvent : Source1GameEventBase
{
    internal Source1CrateSpawnEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "crate_spawn";

    public bool Early { get; set; }

    public float SpawnTime { get; set; }

    public int SpawnLocation { get; set; }
}

public partial class Source1CrateSpawnNotificationEvent : Source1GameEventBase
{
    internal Source1CrateSpawnNotificationEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "crate_spawn_notification";

    public float SpawnTime { get; set; }
}

public partial class Source1CitadelPauseEventEvent : Source1GameEventBase
{
    internal Source1CitadelPauseEventEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "citadel_pause_event";

    public CEntityIndex PlayerIndex { get; set; }
    public CCitadelPlayerController? Player => _demo.GetEntityByIndex<CCitadelPlayerController>(PlayerIndex);

    public int Value { get; set; }

    public int Message { get; set; }
}

public partial class Source1CitadelPregameTimerEvent : Source1GameEventBase
{
    internal Source1CitadelPregameTimerEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "citadel_pregame_timer";

    public int Value { get; set; }
}

public partial class Source1BreakPieceSpawnedEvent : Source1GameEventBase
{
    internal Source1BreakPieceSpawnedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "break_piece_spawned";

    public int Entindex { get; set; }

    public bool IsRigid { get; set; }
}

public partial class Source1SandboxPlayerMovedEvent : Source1GameEventBase
{
    internal Source1SandboxPlayerMovedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "sandbox_player_moved";
}

public partial class Source1LaneTestStateUpdatedEvent : Source1GameEventBase
{
    internal Source1LaneTestStateUpdatedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "lane_test_state_updated";

    public bool Running { get; set; }
}

public partial class Source1PlayerClosedItemShopEvent : Source1GameEventBase
{
    internal Source1PlayerClosedItemShopEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_closed_item_shop";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1SpectateHomeTeamChangedEvent : Source1GameEventBase
{
    internal Source1SpectateHomeTeamChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "spectate_home_team_changed";
}

public partial class Source1PlayerStatsChangedEvent : Source1GameEventBase
{
    internal Source1PlayerStatsChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "player_stats_changed";

    public CHandle<CEntityInstance<DeadlockDemoParser>, DeadlockDemoParser> PlayerPawnHandle { get; set; }
    public CCitadelPlayerPawn? PlayerPawn => _demo.GetEntityByHandle(PlayerPawnHandle) as CCitadelPlayerPawn;
}

public partial class Source1TitanTransformingStartEvent : Source1GameEventBase
{
    internal Source1TitanTransformingStartEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "titan_transforming_start";

    public int Entindex { get; set; }
}

public partial class Source1TitanTransformingCompleteEvent : Source1GameEventBase
{
    internal Source1TitanTransformingCompleteEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "titan_transforming_complete";

    public int Entindex { get; set; }
}

public partial class Source1KeybindChangedEvent : Source1GameEventBase
{
    internal Source1KeybindChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "keybind_changed";
}

public partial class Source1QuickCastModeChangedEvent : Source1GameEventBase
{
    internal Source1QuickCastModeChangedEvent(DeadlockDemoParser demo) : base(demo) {}

    public override string GameEventName => "quick_cast_mode_changed";
}

[JsonDerivedType(typeof(Source1ServerSpawnEvent))]
[JsonDerivedType(typeof(Source1ServerPreShutdownEvent))]
[JsonDerivedType(typeof(Source1ServerShutdownEvent))]
[JsonDerivedType(typeof(Source1ServerMessageEvent))]
[JsonDerivedType(typeof(Source1ServerCvarEvent))]
[JsonDerivedType(typeof(Source1PlayerActivateEvent))]
[JsonDerivedType(typeof(Source1PlayerConnectFullEvent))]
[JsonDerivedType(typeof(Source1PlayerFullUpdateEvent))]
[JsonDerivedType(typeof(Source1PlayerConnectEvent))]
[JsonDerivedType(typeof(Source1PlayerDisconnectEvent))]
[JsonDerivedType(typeof(Source1PlayerInfoEvent))]
[JsonDerivedType(typeof(Source1PlayerSpawnEvent))]
[JsonDerivedType(typeof(Source1PlayerTeamEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerTeamEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerControllerTeamEvent))]
[JsonDerivedType(typeof(Source1PlayerChangenameEvent))]
[JsonDerivedType(typeof(Source1PlayerChatEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerPawnChangedEvent))]
[JsonDerivedType(typeof(Source1TeamplayBroadcastAudioEvent))]
[JsonDerivedType(typeof(Source1FinaleStartEvent))]
[JsonDerivedType(typeof(Source1PlayerStatsUpdatedEvent))]
[JsonDerivedType(typeof(Source1UserDataDownloadedEvent))]
[JsonDerivedType(typeof(Source1RagdollDissolvedEvent))]
[JsonDerivedType(typeof(Source1TeamInfoEvent))]
[JsonDerivedType(typeof(Source1TeamScoreEvent))]
[JsonDerivedType(typeof(Source1HltvCameramanEvent))]
[JsonDerivedType(typeof(Source1HltvChaseEvent))]
[JsonDerivedType(typeof(Source1HltvRankCameraEvent))]
[JsonDerivedType(typeof(Source1HltvRankEntityEvent))]
[JsonDerivedType(typeof(Source1HltvFixedEvent))]
[JsonDerivedType(typeof(Source1HltvMessageEvent))]
[JsonDerivedType(typeof(Source1HltvStatusEvent))]
[JsonDerivedType(typeof(Source1HltvTitleEvent))]
[JsonDerivedType(typeof(Source1HltvChatEvent))]
[JsonDerivedType(typeof(Source1HltvVersioninfoEvent))]
[JsonDerivedType(typeof(Source1HltvReplayEvent))]
[JsonDerivedType(typeof(Source1HltvReplayStatusEvent))]
[JsonDerivedType(typeof(Source1DemoStopEvent))]
[JsonDerivedType(typeof(Source1MapShutdownEvent))]
[JsonDerivedType(typeof(Source1MapTransitionEvent))]
[JsonDerivedType(typeof(Source1HostnameChangedEvent))]
[JsonDerivedType(typeof(Source1DifficultyChangedEvent))]
[JsonDerivedType(typeof(Source1GameMessageEvent))]
[JsonDerivedType(typeof(Source1GameNewmapEvent))]
[JsonDerivedType(typeof(Source1RoundStartEvent))]
[JsonDerivedType(typeof(Source1RoundEndEvent))]
[JsonDerivedType(typeof(Source1RoundStartPreEntityEvent))]
[JsonDerivedType(typeof(Source1RoundStartPostNavEvent))]
[JsonDerivedType(typeof(Source1RoundFreezeEndEvent))]
[JsonDerivedType(typeof(Source1TeamplayRoundStartEvent))]
[JsonDerivedType(typeof(Source1PlayerDeathEvent))]
[JsonDerivedType(typeof(Source1PlayerFootstepEvent))]
[JsonDerivedType(typeof(Source1PlayerHintmessageEvent))]
[JsonDerivedType(typeof(Source1BreakBreakableEvent))]
[JsonDerivedType(typeof(Source1BrokenBreakableEvent))]
[JsonDerivedType(typeof(Source1BreakPropEvent))]
[JsonDerivedType(typeof(Source1EntityKilledEvent))]
[JsonDerivedType(typeof(Source1DoorCloseEvent))]
[JsonDerivedType(typeof(Source1VoteStartedEvent))]
[JsonDerivedType(typeof(Source1VoteFailedEvent))]
[JsonDerivedType(typeof(Source1VotePassedEvent))]
[JsonDerivedType(typeof(Source1VoteChangedEvent))]
[JsonDerivedType(typeof(Source1VoteCastYesEvent))]
[JsonDerivedType(typeof(Source1VoteCastNoEvent))]
[JsonDerivedType(typeof(Source1AchievementEventEvent))]
[JsonDerivedType(typeof(Source1AchievementEarnedEvent))]
[JsonDerivedType(typeof(Source1AchievementWriteFailedEvent))]
[JsonDerivedType(typeof(Source1BonusUpdatedEvent))]
[JsonDerivedType(typeof(Source1SpecTargetUpdatedEvent))]
[JsonDerivedType(typeof(Source1SpecModeUpdatedEvent))]
[JsonDerivedType(typeof(Source1EntityVisibleEvent))]
[JsonDerivedType(typeof(Source1GameinstructorDrawEvent))]
[JsonDerivedType(typeof(Source1GameinstructorNodrawEvent))]
[JsonDerivedType(typeof(Source1FlareIgniteNpcEvent))]
[JsonDerivedType(typeof(Source1HelicopterGrenadePuntMissEvent))]
[JsonDerivedType(typeof(Source1PhysgunPickupEvent))]
[JsonDerivedType(typeof(Source1InventoryUpdatedEvent))]
[JsonDerivedType(typeof(Source1CartUpdatedEvent))]
[JsonDerivedType(typeof(Source1StorePricesheetUpdatedEvent))]
[JsonDerivedType(typeof(Source1ItemSchemaInitializedEvent))]
[JsonDerivedType(typeof(Source1DropRateModifiedEvent))]
[JsonDerivedType(typeof(Source1EventTicketModifiedEvent))]
[JsonDerivedType(typeof(Source1GcConnectedEvent))]
[JsonDerivedType(typeof(Source1InstructorStartLessonEvent))]
[JsonDerivedType(typeof(Source1InstructorCloseLessonEvent))]
[JsonDerivedType(typeof(Source1InstructorServerHintCreateEvent))]
[JsonDerivedType(typeof(Source1InstructorServerHintStopEvent))]
[JsonDerivedType(typeof(Source1SetInstructorGroupEnabledEvent))]
[JsonDerivedType(typeof(Source1ClientsideLessonClosedEvent))]
[JsonDerivedType(typeof(Source1DynamicShadowLightChangedEvent))]
[JsonDerivedType(typeof(Source1GameuiActivatedEvent))]
[JsonDerivedType(typeof(Source1GameuiHiddenEvent))]
[JsonDerivedType(typeof(Source1GameuiFreeCursorChangedEvent))]
[JsonDerivedType(typeof(Source1SpectateFowViewTeamChangedEvent))]
[JsonDerivedType(typeof(Source1ClientDisconnectEvent))]
[JsonDerivedType(typeof(Source1PlayerRespawnedEvent))]
[JsonDerivedType(typeof(Source1CitadelHintChangedEvent))]
[JsonDerivedType(typeof(Source1CitadeltvChaseHeroEvent))]
[JsonDerivedType(typeof(Source1CitadeltvUnitEventEvent))]
[JsonDerivedType(typeof(Source1PlayerBotReplaceEvent))]
[JsonDerivedType(typeof(Source1BotPlayerReplaceEvent))]
[JsonDerivedType(typeof(Source1WeaponReloadStartedEvent))]
[JsonDerivedType(typeof(Source1WeaponReloadCompleteEvent))]
[JsonDerivedType(typeof(Source1WeaponZoomStartedEvent))]
[JsonDerivedType(typeof(Source1MatchClockEvent))]
[JsonDerivedType(typeof(Source1ItemPickupEvent))]
[JsonDerivedType(typeof(Source1GrenadeBounceEvent))]
[JsonDerivedType(typeof(Source1GameStateChangedEvent))]
[JsonDerivedType(typeof(Source1HeroAssignedLaneChangedEvent))]
[JsonDerivedType(typeof(Source1HeroDraftOrderChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerDamageIncreasedEvent))]
[JsonDerivedType(typeof(Source1PlayerMaxhealthIncreasedEvent))]
[JsonDerivedType(typeof(Source1PlayerAmmoIncreasedEvent))]
[JsonDerivedType(typeof(Source1PlayerAmmoFullEvent))]
[JsonDerivedType(typeof(Source1ClientPlayerCurrencyChangeEvent))]
[JsonDerivedType(typeof(Source1PlayerUsedAbilityEvent))]
[JsonDerivedType(typeof(Source1PlayerUsedItemEvent))]
[JsonDerivedType(typeof(Source1PlayerRezIncomingEvent))]
[JsonDerivedType(typeof(Source1NonPlayerUsedAbilityEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerUnitStatesChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerItemsChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerItemPriceChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerAbilityUpgradeSellPriceChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerRespawnTimeChangedEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerAbilitiesVdataChangedEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerWeaponsChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerAbilityUpgradedEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerAbilityCooldownEndChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerDataAbilitiesChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerAbilityBonusCounterChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerModifiersChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerOpenedItemShopEvent))]
[JsonDerivedType(typeof(Source1ToolsContentChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerShopZoneChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerHealedEvent))]
[JsonDerivedType(typeof(Source1PlayerHealPreventedEvent))]
[JsonDerivedType(typeof(Source1PlayerGivenShieldEvent))]
[JsonDerivedType(typeof(Source1PlayerWeaponSwitchedEvent))]
[JsonDerivedType(typeof(Source1PlayerHeroChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerDraftingChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerGuidedSandboxStartedEvent))]
[JsonDerivedType(typeof(Source1PlayerLaneChallengeStartedEvent))]
[JsonDerivedType(typeof(Source1PlayerLaneChallengeEndedEvent))]
[JsonDerivedType(typeof(Source1PlayerOpenedHeroSelectEvent))]
[JsonDerivedType(typeof(Source1PlayerHeroResetEvent))]
[JsonDerivedType(typeof(Source1PlayerInfoIndividualUpdatedEvent))]
[JsonDerivedType(typeof(Source1PersonaUpdatedEvent))]
[JsonDerivedType(typeof(Source1ItemFileReloadedEvent))]
[JsonDerivedType(typeof(Source1PartyUpdatedEvent))]
[JsonDerivedType(typeof(Source1AbilityCastSucceededEvent))]
[JsonDerivedType(typeof(Source1AbilityCastFailedEvent))]
[JsonDerivedType(typeof(Source1ReloadFailedNoAmmoEvent))]
[JsonDerivedType(typeof(Source1BrokeEnemyShieldEvent))]
[JsonDerivedType(typeof(Source1AbilityAddedEvent))]
[JsonDerivedType(typeof(Source1AbilityRemovedEvent))]
[JsonDerivedType(typeof(Source1AbilityLevelChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerLevelChangedEvent))]
[JsonDerivedType(typeof(Source1CurrencyMissedEvent))]
[JsonDerivedType(typeof(Source1CurrencyDeniedEvent))]
[JsonDerivedType(typeof(Source1CurrencyClaimedDisplayEvent))]
[JsonDerivedType(typeof(Source1LocalPlayerShotHitEvent))]
[JsonDerivedType(typeof(Source1ZiplinePlayerAttachedEvent))]
[JsonDerivedType(typeof(Source1ZiplinePlayerDetachedEvent))]
[JsonDerivedType(typeof(Source1ClientPlayerHeroChangedEvent))]
[JsonDerivedType(typeof(Source1CrateSpawnEvent))]
[JsonDerivedType(typeof(Source1CrateSpawnNotificationEvent))]
[JsonDerivedType(typeof(Source1CitadelPauseEventEvent))]
[JsonDerivedType(typeof(Source1CitadelPregameTimerEvent))]
[JsonDerivedType(typeof(Source1BreakPieceSpawnedEvent))]
[JsonDerivedType(typeof(Source1SandboxPlayerMovedEvent))]
[JsonDerivedType(typeof(Source1LaneTestStateUpdatedEvent))]
[JsonDerivedType(typeof(Source1PlayerClosedItemShopEvent))]
[JsonDerivedType(typeof(Source1SpectateHomeTeamChangedEvent))]
[JsonDerivedType(typeof(Source1PlayerStatsChangedEvent))]
[JsonDerivedType(typeof(Source1TitanTransformingStartEvent))]
[JsonDerivedType(typeof(Source1TitanTransformingCompleteEvent))]
[JsonDerivedType(typeof(Source1KeybindChangedEvent))]
[JsonDerivedType(typeof(Source1QuickCastModeChangedEvent))]
public partial class Source1GameEventBase
{
}
