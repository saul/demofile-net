// <auto-generated />
// Generated from protocol v48
#nullable enable
#pragma warning disable CS1591

using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.CompilerServices;
using DemoFile.Sdk;

namespace DemoFile.Game.Deadlock;

public enum AnimLoopMode : int
{
    ANIM_LOOP_MODE_INVALID = -1,
    ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
    ANIM_LOOP_MODE_LOOPING = 0x1,
    ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
    ANIM_LOOP_MODE_COUNT = 0x3,
}

public enum AttributeProviderTypes : int
{
    PROVIDER_GENERIC = 0x0,
    PROVIDER_WEAPON = 0x1,
}

public enum BeamClipStyle : int
{
    kNOCLIP = 0x0,
    kGEOCLIP = 0x1,
    kMODELCLIP = 0x2,
    kBEAMCLIPSTYLE_NUMBITS = 0x2,
}

public enum BeamType : int
{
    BEAM_INVALID = 0x0,
    BEAM_POINTS = 0x1,
    BEAM_ENTPOINT = 0x2,
    BEAM_ENTS = 0x3,
    BEAM_HOSE = 0x4,
    BEAM_SPLINE = 0x5,
    BEAM_LASER = 0x6,
}

public enum Class_T : int
{
    CLASS_NONE = 0x0,
    CLASS_PLAYER = 0x1,
    CLASS_PLAYER_ALLY = 0x2,
    CLASS_MODIFIER_THINKER = 0x3,
    CLASS_TROOPER = 0x4,
    CLASS_TROOPER_BOSS = 0x5,
    CLASS_TROOPER_NEUTRAL = 0x6,
    CLASS_SUPER_NEUTRAL = 0x7,
    CLASS_SUPER_NEUTRAL_HEROTEST = 0x8,
    CLASS_SIEGE = 0x9,
    CLASS_GUN = 0xA,
    CLASS_CAP_POINT = 0xB,
    CLASS_ITEM_SHOP = 0xC,
    CLASS_ABILITY_SHOP = 0xD,
    CLASS_MINI_MAP_MARKER = 0xE,
    CLASS_ABILITY = 0xF,
    CLASS_ABILITY_PROJECTILE = 0x10,
    CLASS_CRATE = 0x11,
    CLASS_CRATE_SPAWN = 0x12,
    CLASS_PICKUP_SPAWN = 0x13,
    CLASS_VEHICLE = 0x14,
    CLASS_FLARE = 0x15,
    CLASS_SPAWNED_DRONE = 0x16,
    CLASS_ROLLERMINE = 0x17,
    CLASS_PERCHED_PREDATOR_PROJECTILE = 0x18,
    CLASS_PARACHUTE = 0x19,
    CLASS_SENTRY = 0x1A,
    CLASS_BASE_SENTRY = 0x1B,
    CLASS_DISPENSER = 0x1C,
    CLASS_SPY_DRONE = 0x1D,
    CLASS_GOLD_ORB = 0x1E,
    CLASS_LANE_NODE = 0x1F,
    CLASS_WARD = 0x20,
    CLASS_ZIP_LINE_NODE = 0x21,
    CLASS_DESTROYABLE_BUILDING = 0x22,
    CLASS_BOSS_TIER_2 = 0x23,
    CLASS_BOSS_BARRACKS = 0x24,
    CLASS_BOSS_TIER_3 = 0x25,
    CLASS_BOSS_TIER_3_DRONE = 0x26,
    CLASS_ANNOUNCER = 0x27,
    CLASS_WEAK_NEUTRAL_CAMP = 0x28,
    CLASS_MEDIUM_NEUTRAL_CAMP = 0x29,
    CLASS_STRONG_NEUTRAL_CAMP = 0x2A,
    CLASS_VAULT_NEUTRAL_CAMP = 0x2B,
    CLASS_SUPER_NEUTRAL_CAMP = 0x2C,
    CLASS_SUPER_NEUTRAL_CAMP_HEROTEST = 0x2D,
    CLASS_LADDER = 0x2E,
    CLASS_EXPLOSIVE_BARREL = 0x2F,
    CLASS_PAYLOAD = 0x30,
    CLASS_BULLET_TIME_WARP = 0x31,
    CLASS_BREAKABLE_PROP_PICKUP = 0x32,
    CLASS_ITEM_PICKUP = 0x33,
    CLASS_GOLDEN_IDOL_PICKUP = 0x34,
    CLASS_HERO_CLONE = 0x35,
    CLASS_TRIGGER_HURT = 0x36,
    CLASS_DRONE_DISPENSER = 0x37,
    CLASS_HERO_MINION = 0x38,
    CLASS_PING_MARKER = 0x39,
    CLASS_PING_LOCATION_TRIGGER = 0x3A,
    CLASS_TESLA_COIL = 0x3B,
    CLASS_FARADAY_CAGE = 0x3C,
    CLASS_DIRECTOR_CAMERA = 0x3D,
    CLASS_BREAKABLE_PROP = 0x3E,
    CLASS_TRIGGER_IDOL_RETURN = 0x3F,
    CLASS_TRIGGER_SHOP_TUNNEL = 0x40,
    CLASS_TRIGGER_TELEPORT = 0x41,
    CLASS_TRIGGER_MODIFIER = 0x42,
    CLASS_TRIGGER_OBSCURED_VOLUME = 0x43,
    CLASS_TRIGGER_ZIPLINE_CAPTURE = 0x44,
    CLASS_TRIGGER_CATAPULT = 0x45,
    CLASS_TRIGGER_CLIMB_ROPE = 0x46,
    CLASS_BALLISTA_BOMB = 0x47,
    CLASS_BALLISTA_MINE = 0x48,
    CLASS_TOMBSTONE = 0x49,
    CLASS_ICEPATH_SHARD = 0x4A,
    CLASS_TRICKSHOT_TARGET = 0x4B,
    CLASS_GUIDED_ARROW = 0x4C,
    CLASS_PING_LOCATION = 0x4D,
    CLASS_DUSTSTORM_PROJECTILE = 0x4E,
    CLASS_CYCLONE_PROJECTILE = 0x4F,
    CLASS_FIELD_SENTRY = 0x50,
    CLASS_RIPTIDE_PROJECTILE = 0x51,
    CLASS_ZAP_TRIGGER = 0x52,
    CLASS_VISCOUS_CUBE = 0x53,
    CLASS_FISSURE_WALL_SEGMENT = 0x54,
    CLASS_NANO_STATUE = 0x55,
    NUM_CLASSIFY_CLASSES = 0x56,
}

public enum CMsgLaneColor : int
{
    k_ELaneColor_Invalid = 0x0,
    k_ELaneColor_Yellow = 0x1,
    k_ELaneColor_Green = 0x3,
    k_ELaneColor_Blue = 0x4,
    k_ELaneColor_Purple = 0x6,
}

public enum DoorState : int
{
    DOOR_STATE_CLOSED = 0x0,
    DOOR_STATE_OPENING = 0x1,
    DOOR_STATE_OPEN = 0x2,
    DOOR_STATE_CLOSING = 0x3,
    DOOR_STATE_AJAR = 0x4,
}

public enum EAbilitySlots : short
{
    ESlot_Invalid = -1,
    ESlot_Signature_First = 0x0,
    ESlot_Signature_1 = 0x0,
    ESlot_Signature_2 = 0x1,
    ESlot_Signature_3 = 0x2,
    ESlot_Signature_4 = 0x3,
    ESlot_ActiveItem_First = 0x4,
    ESlot_ActiveItem_1 = 0x4,
    ESlot_ActiveItem_2 = 0x5,
    ESlot_ActiveItem_3 = 0x6,
    ESlot_ActiveItem_4 = 0x7,
    ESlot_Ability_Held = 0x8,
    ESlot_Ability_ZipLine = 0x9,
    ESlot_Ability_Mantle = 0xA,
    ESlot_Ability_ClimbRope = 0xB,
    ESlot_Ability_Jump = 0xC,
    ESlot_Ability_Slide = 0xD,
    ESlot_Ability_Teleport = 0xE,
    ESlot_Ability_ZipLineBoost = 0xF,
    ESlot_Ability_Innate_1 = 0x10,
    ESlot_Ability_Innate_2 = 0x11,
    ESlot_Ability_Innate_3 = 0x12,
    ESlot_Weapon_Secondary = 0x13,
    ESlot_Weapon_Primary = 0x14,
    ESlot_Weapon_Melee = 0x15,
    ESlot_None = 0x16,
    EMaxAbilitySlots = 0x16,
}

public enum EAttachState : int
{
    EAttachState_None = 0x0,
    EAttachState_AwaitingTether = 0x1,
    EAttachState_Latched = 0x2,
    EAttachState_Attached = 0x3,
    EAttachStateCount = 0x4,
}

public enum ECatStatueState : byte
{
    ECatStatue_None = 0x0,
    ECatStatue_Shoulder = 0x1,
    ECatStatue_ProjectileOut = 0x2,
    ECatStatue_InWorld = 0x3,
    ECatStatue_InCooldown = 0x4,
}

public enum ECitadelGameMode : int
{
    k_ECitadelGameMode_Invalid = 0x0,
    k_ECitadelGameMode_Normal = 0x1,
    k_ECitadelGameMode_1v1Test = 0x2,
    k_ECitadelGameMode_Sandbox = 0x3,
}

public enum ECitadelMatchMode : int
{
    k_ECitadelMatchMode_Invalid = 0x0,
    k_ECitadelMatchMode_Unranked = 0x1,
    k_ECitadelMatchMode_PrivateLobby = 0x2,
    k_ECitadelMatchMode_CoopBot = 0x3,
    k_ECitadelMatchMode_Ranked = 0x4,
    k_ECitadelMatchMode_ServerTest = 0x5,
    k_ECitadelMatchMode_Tutorial = 0x6,
    k_ECitadelMatchMode_HeroLabs = 0x7,
}

public enum EClimbRopeState : int
{
    ERopeClimb_None = 0x0,
    ERopeClimb_Latching = 0x1,
    ERopeClimb_Attached = 0x2,
    ERopeClimb_Count = 0x3,
}

public enum EFireMode : int
{
    EFireMode_None = 0x0,
    EFireMode_Primary = 0x1,
    EFireMode_Secondary = 0x2,
}

public enum EFlexSlotTypes : short
{
    EFlexSlot_Invalid = 0x0,
    EFlexSlot_AllTier1 = 0x1,
    EFlexSlot_Kill2Tier2 = 0x2,
    EFlexSlot_AllTier2 = 0x4,
    EFlexSlot_Generator = 0x8,
}

public enum EGameState : int
{
    EGameState_Invalid = 0x0,
    EGameState_Init = 0x1,
    EGameState_WaitingForPlayersToJoin = 0x2,
    EGameState_HeroSelection = 0x3,
    EGameState_PreGameWait = 0x4,
    EGameState_GameInProgress = 0x5,
    EGameState_PostGame = 0x6,
    EGameState_Abandoned = 0x7,
    EGameState_End = 0x8,
}

public enum EGuidedBotMatchObjective : int
{
    EGuidedBotMatchObjective_LaningMetrics = 0x0,
    EGuidedBotMatchObjective_PowerUp = 0x1,
    EGuidedBotMatchObjective_KillGuardian = 0x2,
    EGuidedBotMatchObjective_Complete = 0x3,
}

public enum ELashGrappleState : byte
{
    ELashGrappleState_None = 0x0,
    ELashGrappleState_LiftingUp = 0x1,
    ELashGrappleState_HangingInAir = 0x2,
}

public enum ELeapState : byte
{
    ELeapState_None = 0x0,
    ELeapState_Startup = 0x1,
    ELeapState_BoostingUp = 0x2,
    ELeapState_CrashingDown = 0x3,
    ELeapState_Land = 0x4,
}

public enum ELockonState : int
{
    ELockingOn = 0x0,
    ELosingLock = 0x1,
    ELockPaused = 0x2,
    ELockNone = 0x3,
}

public enum EMeleeHold_AttackState : int
{
    EAttackState_None = 0x0,
    EAttackState_Charging = 0x1,
    EAttackState_GroundDashing = 0x2,
    EAttackState_AirDashing = 0x3,
    EAttackState_Attacking = 0x4,
    EAttackState_SlideDashing = 0x5,
}

public enum EMeleeHold_AttackType : int
{
    EAttackType_None = 0x0,
    EAttackType_Light = 0x1,
    EAttackType_Heavy = 0x2,
    EAttackType_HeavyAir = 0x3,
    EAttackType_Slide = 0x4,
}

public enum EMinimapHeight : byte
{
    NORMAL = 0x0,
    UP = 0x1,
    DOWN = 0x2,
}

public enum EMiniMapMarkerType : int
{
    EMarkerShopTunnels = 0x0,
    EMarkerShopTunnelExit = 0x1,
    EMarkerCount = 0x2,
}

public enum EModifierValue : int
{
    MODIFIER_VALUE_MATERIAL_OVERRIDE = 0x0,
    MODIFIER_VALUE_PROC_BUILDUP_PERCENTAGE = 0x1,
    MODIFIER_VALUE_FRICTION_PERCENTAGE = 0x2,
    MODIFIER_VALUE_BASE_VELOCITY = 0x3,
    MODIFIER_VALUE_MOVE_TYPE_OVERRIDE = 0x4,
    MODIFIER_VALUE_TARGET_IDENTIFIER_OVERRIDE = 0x5,
    MODIFIER_VALUE_TARGET_IDENTIFIER_OVERRIDE_ORIENTATION = 0x6,
    MODIFIER_VALUE_INCOMING_DAMAGE_PERCENTAGE = 0x7,
    MODIFIER_VALUE_OUTGOING_DAMAGE_PERCENTAGE = 0x8,
    MODIFIER_VALUE_BASEATTACK_DAMAGE = 0x9,
    MODIFIER_VALUE_ATTACK_DAMAGE_ADDITIVE_ONLY = 0xA,
    MODIFIER_VALUE_BASEATTACK_DAMAGE_PERCENT = 0xB,
    MODIFIER_VALUE_DAMAGE_PERCENT = 0xC,
    MODIFIER_VALUE_BASE_BULLET_DAMAGE_PERCENT = 0xD,
    MODIFIER_VALUE_BASE_BULLET_DAMAGE_PERCENT_FROM_LEVEL = 0xE,
    MODIFIER_VALUE_BASE_BULLET_DAMAGE_FROM_LEVEL = 0xF,
    MODIFIER_VALUE_BULLET_DAMAGE_PERCENT = 0x10,
    MODIFIER_VALUE_BASE_MELEE_DAMAGE_PERCENT = 0x11,
    MODIFIER_VALUE_BASE_MELEE_DAMAGE_PERCENT_FROM_LEVEL = 0x12,
    MODIFIER_VALUE_BASE_MELEE_DAMAGE_FROM_LEVEL = 0x13,
    MODIFIER_VALUE_MELEE_DAMAGE_PERCENT = 0x14,
    MODIFIER_VALUE_TECH_DAMAGE_PERCENT = 0x15,
    MODIFIER_VALUE_HEALTH_MAX = 0x16,
    MODIFIER_VALUE_HEALTH_MAX_PERCENT = 0x17,
    MODIFIER_VALUE_BASE_HEALTH_PERCENT = 0x18,
    MODIFIER_VALUE_BASE_HEALTH_FROM_LEVEL = 0x19,
    MODIFIER_VALUE_BONUS_MAX_HEALTH_NO_SCALE = 0x1A,
    MODIFIER_VALUE_HEALTH_REGEN_PER_SECOND = 0x1B,
    MODIFIER_VALUE_HEALTH_REGEN_PER_SECOND_PERCENT = 0x1C,
    MODIFIER_VALUE_REGEN_MAX_HEALTH_PERCENT_PER_SECOND = 0x1D,
    MODIFIER_VALUE_EXTERNAL_HEALTH_REGEN_PER_SECOND = 0x1E,
    MODIFIER_VALUE_HEAL_AMP_CAST_PERCENT = 0x1F,
    MODIFIER_VALUE_HEAL_AMP_RECEIVE_PERCENT = 0x20,
    MODIFIER_VALUE_HEAL_AMP_REGEN_PERCENT = 0x21,
    MODIFIER_VALUE_HEAL_DEGEN_RESISTANCE = 0x22,
    MODIFIER_VALUE_AMMO_CLIP_SIZE = 0x23,
    MODIFIER_VALUE_AMMO_CLIP_SIZE_PERCENT = 0x24,
    MODIFIER_VALUE_AMMO_CLIP_SIZE_OVERRIDE = 0x25,
    MODIFIER_VALUE_RELOAD_SPEED = 0x26,
    MODIFIER_VALUE_RELOAD_SPEED_CONSTANT = 0x27,
    MODIFIER_VALUE_MOVE_SPEED_LIMIT = 0x28,
    MODIFIER_VALUE_MOVEMENT_SPEED_MAX = 0x29,
    MODIFIER_VALUE_MOVEMENT_SPEED_MAX_PERCENT = 0x2A,
    MODIFIER_VALUE_MOVEMENT_SPEED_WHILE_ZOOMED_PENALTY_REDUCTION_PERCENT = 0x2B,
    MODIFIER_VALUE_MOVEMENT_SPEED_WHILE_SHOOTING_PENALTY_REDUCTION_PERCENT = 0x2C,
    MODIFIER_VALUE_MOVEMENT_SPEED_SLOW_PERCENT = 0x2D,
    MODIFIER_VALUE_MOVEMENT_GROUND_DASH_REDUCTION_PERCENT = 0x2E,
    MODIFIER_VALUE_MOVEMENT_GROUND_DASH_INCREASE_PERCENT = 0x2F,
    MODIFIER_VALUE_AIR_MOVE_DISTANCE_INCREASE_PERCENT = 0x30,
    MODIFIER_VALUE_MOVEMENT_SLIDE_DISTANCE_SCALE = 0x31,
    MODIFIER_VALUE_MOVEMENT_SLOW_RESISTANCE = 0x32,
    MODIFIER_VALUE_BONUS_ATTACK_RANGE = 0x33,
    MODIFIER_VALUE_BONUS_ATTACK_RANGE_PERCENT = 0x34,
    MODIFIER_VALUE_ZOOM_INCREASE_PERCENT = 0x35,
    MODIFIER_VALUE_ZOOM_POSITION = 0x36,
    MODIFIER_VALUE_WEAPON_RECOIL_REDUCTION_PERCENT = 0x37,
    MODIFIER_VALUE_SPRINT_SPEED_BONUS = 0x38,
    MODIFIER_VALUE_SPRINT_SPEED_MAX_PERCENT = 0x39,
    MODIFIER_VALUE_SPRINT_DURATION = 0x3A,
    MODIFIER_VALUE_SPRINT_ACCELERATION = 0x3B,
    MODIFIER_VALUE_DISPLAY_SPEED_CURRENT = 0x3C,
    MODIFIER_VALUE_DISPLAY_SPEED_MAX = 0x3D,
    MODIFIER_VALUE_AVOID_SPELL = 0x3E,
    MODIFIER_VALUE_SHOT_SHOULD_PENETRATE = 0x3F,
    MODIFIER_VALUE_FIRE_RATE = 0x40,
    MODIFIER_VALUE_FIRE_RATE_SLOW = 0x41,
    MODIFIER_VALUE_CYCLE_TIME_PERCENTAGE = 0x42,
    MODIFIER_VALUE_SPREAD_SCALE = 0x43,
    MODIFIER_VALUE_CYCLE_TIME = 0x44,
    MODIFIER_VALUE_AMMO_COST_REDUCTION = 0x45,
    MODIFIER_VALUE_DAMAGE_TAKEN_REDUCTION_PERCENT = 0x46,
    MODIFIER_VALUE_DAMAGE_TAKEN_INCREASE_PERCENT = 0x47,
    MODIFIER_VALUE_BULLET_DAMAGE_TAKEN_INCREASE_PERCENT = 0x48,
    MODIFIER_VALUE_ABILITY_DAMAGE_TAKEN_INCREASE_PERCENT = 0x49,
    MODIFIER_VALUE_TECH_ARMOR = 0x4A,
    MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST = 0x4B,
    MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST_PERCENT = 0x4C,
    MODIFIER_VALUE_TECH_ARMOR_DAMAGE_RESIST_REDUCTION = 0x4D,
    MODIFIER_VALUE_ABILITY_DAMAGE_REDUCTION = 0x4E,
    MODIFIER_VALUE_ABILITY_DAMAGE_REDUCTION_PERCENT = 0x4F,
    MODIFIER_VALUE_BULLET_ARMOR = 0x50,
    MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST = 0x51,
    MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_PERCENT = 0x52,
    MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_REDUCTION = 0x53,
    MODIFIER_VALUE_BULLET_ARMOR_DAMAGE_RESIST_NON_HERO = 0x54,
    MODIFIER_VALUE_CRIT_DAMAGE_RECEIVED_SCALE = 0x55,
    MODIFIER_VALUE_BULLET_DAMAGE_REDUCTION = 0x56,
    MODIFIER_VALUE_BULLET_DAMAGE_REDUCTION_PERCENT = 0x57,
    MODIFIER_VALUE_BASE_WEAPON_DAMAGE_TAKEN_PERCENT = 0x58,
    MODIFIER_VALUE_BASE_BULLET_DAMAGE_TAKEN_PERCENT = 0x59,
    MODIFIER_VALUE_BASE_MELEE_DAMAGE_TAKEN_PERCENT = 0x5A,
    MODIFIER_VALUE_MELEE_DAMAGE_REDUCTION_PERCENT = 0x5B,
    MODIFIER_VALUE_MELEE_DAMAGE_INCREASE_PERCENT = 0x5C,
    MODIFIER_VALUE_STATUS_RESISTANCE = 0x5D,
    MODIFIER_VALUE_COOLDOWN_REDUCTION_PERCENTAGE = 0x5E,
    MODIFIER_VALUE_COOLDOWN_MAX_TIME = 0x5F,
    MODIFIER_VALUE_COOLDOWN_BETWEEN_CHARGE_REDUCTION_PERCENTAGE = 0x60,
    MODIFIER_VALUE_BONUS_ABILITY_CHARGES = 0x61,
    MODIFIER_VALUE_BONUS_ABILITY_DURATION_PERCENTAGE = 0x62,
    MODIFIER_VALUE_MELEEATTACK_DAMAGE = 0x63,
    MODIFIER_VALUE_MELEEATTACK_DAMAGE_PERCENTAGE = 0x64,
    MODIFIER_VALUE_MELEEATTACK_SPEED = 0x65,
    MODIFIER_VALUE_MELEE_TRAVEL_DISTANCE_PERCENTAGE = 0x66,
    MODIFIER_VALUE_FIREARM_ACCURACY_PERCENTAGE = 0x67,
    MODIFIER_VALUE_TURN_SIDEMOVE_PERCENTAGE = 0x68,
    MODIFIER_VALUE_CHARGE_SPEED = 0x69,
    MODIFIER_VALUE_TELEPORT_COOLDOWN_REDUCTION_PERCENT = 0x6A,
    MODIFIER_VALUE_FALL_SPEED_MAX = 0x6B,
    MODIFIER_VALUE_AIR_SPEED_MAX = 0x6C,
    MODIFIER_VALUE_GRAVITY_SCALE = 0x6D,
    MODIFIER_VALUE_BULLET_EVASION = 0x6E,
    MODIFIER_VALUE_TECH_SHIELD_HEALTH = 0x6F,
    MODIFIER_VALUE_TECH_SHIELD_HEALTH_MAX = 0x70,
    MODIFIER_VALUE_TECH_SHIELD_HEALTH_TEMP = 0x71,
    MODIFIER_VALUE_TECH_SHIELD_DAMAGE_PERCENT = 0x72,
    MODIFIER_VALUE_TECH_SHIELD_DAMAGE_REGEN_COOLDOWN = 0x73,
    MODIFIER_VALUE_TECH_SHIELD_BREAK_REGEN_COOLDOWN = 0x74,
    MODIFIER_VALUE_BULLET_SHIELD_HEALTH = 0x75,
    MODIFIER_VALUE_BULLET_SHIELD_HEALTH_MAX = 0x76,
    MODIFIER_VALUE_BULLET_SHIELD_HEALTH_TEMP = 0x77,
    MODIFIER_VALUE_BULLET_SHIELD_DAMAGE_PERCENT = 0x78,
    MODIFIER_VALUE_BULLET_SHIELD_DAMAGE_REGEN_COOLDOWN = 0x79,
    MODIFIER_VALUE_BULLET_SHIELD_BREAK_REGEN_COOLDOWN = 0x7A,
    MODIFIER_VALUE_BONUS_CRIT_DAMAGE_PERCENT = 0x7B,
    MODIFIER_VALUE_HEIGHT_ADVANTAGE_BONUS_BASE_DAMAGE_PERCENT = 0x7C,
    MODIFIER_VALUE_CLOSE_RANGE_BONUS_BASE_DAMAGE_PERCENT = 0x7D,
    MODIFIER_VALUE_BONUS_WEAPON_DAMAGE_CLOSE_RANGE_MAX_RANGE = 0x7E,
    MODIFIER_VALUE_LONG_RANGE_BONUS_BASE_DAMAGE_PERCENT = 0x7F,
    MODIFIER_VALUE_BONUS_WEAPON_DAMAGE_LONG_RANGE_MIN_RANGE = 0x80,
    MODIFIER_VALUE_TECH_RANGE_ADDITIVE = 0x81,
    MODIFIER_VALUE_TECH_RANGE_PERCENT = 0x82,
    MODIFIER_VALUE_TECH_RANGE_CLAMP = 0x83,
    MODIFIER_VALUE_TECH_RADIUS_ADDITIVE = 0x84,
    MODIFIER_VALUE_TECH_RADIUS_PERCENT = 0x85,
    MODIFIER_VALUE_TURN_ANGLE_PER_SECOND_MAX = 0x86,
    MODIFIER_VALUE_BONUS_JUMP_VERTICAL_SPEED_PERCENT = 0x87,
    MODIFIER_VALUE_AIR_JUMPS = 0x88,
    MODIFIER_VALUE_ZIP_LINE_SPEED_ADDITIVE = 0x89,
    MODIFIER_VALUE_ZIP_LINE_SPEED_PERCENTAGE = 0x8A,
    MODIFIER_VALUE_CLIMB_ROPE_SPEED_PERCENTAGE = 0x8B,
    MODIFIER_VALUE_GROUND_FRICTION_PERCENTAGE = 0x8C,
    MODIFIER_VALUE_GROUND_ACCELERATION_PERCENTAGE = 0x8D,
    MODIFIER_VALUE_INVISIBILITY_LEVEL = 0x8E,
    MODIFIER_VALUE_CLOAK_FACTOR = 0x8F,
    MODIFIER_VALUE_CLOAK_DESAT_FACTOR = 0x90,
    MODIFIER_VALUE_PARTICLE_TINT_OVERRIDE = 0x91,
    MODIFIER_VALUE_PARTICLE_DESAT_OVERRIDE = 0x92,
    MODIFIER_VALUE_DIMENSION_TYPE = 0x93,
    MODIFIER_VALUE_GAMEPLAY_TIME_SCALE_ADDITIVE = 0x94,
    MODIFIER_VALUE_GAMEPLAY_TIME_SCALE_PERCENT = 0x95,
    MODIFIER_VALUE_ANIMATION_TIME_SCALE_ADDITIVE = 0x96,
    MODIFIER_VALUE_ANIMATION_TIME_SCALE_PERCENT = 0x97,
    MODIFIER_VALUE_ANIMATION_FRAME_SKIP_RATE = 0x98,
    MODIFIER_VALUE_MOVEMENT_TIME_SCALE_ADDITIVE = 0x99,
    MODIFIER_VALUE_MOVEMENT_TIME_SCALE_PERCENT = 0x9A,
    MODIFIER_VALUE_PARTICLE_TIME_SCALE_ADDITIVE = 0x9B,
    MODIFIER_VALUE_PARTICLE_TIME_SCALE_PERCENT = 0x9C,
    MODIFIER_VALUE_STAMINA = 0x9D,
    MODIFIER_VALUE_STAMINA_REGEN_PER_SECOND_ADDITIVE = 0x9E,
    MODIFIER_VALUE_STAMINA_REGEN_PER_SECOND_PERCENTAGE = 0x9F,
    MODIFIER_VALUE_WEAPON_POWER = 0xA0,
    MODIFIER_VALUE_ARMOR_POWER = 0xA1,
    MODIFIER_VALUE_TECH_POWER = 0xA2,
    MODIFIER_VALUE_WEAPON_POWER_PERCENT = 0xA3,
    MODIFIER_VALUE_AIR_CONTROL_PERCENT = 0xA4,
    MODIFIER_VALUE_AIR_CONTROL_ACCEL_PERCENT = 0xA5,
    MODIFIER_VALUE_ABILITY_PROJECTILE_SPEED_PERCENT = 0xA6,
    MODIFIER_VALUE_BONUS_BULLET_SPEED_PERCENT = 0xA7,
    MODIFIER_VALUE_BASE_BULLET_SPEED_OVERRIDE = 0xA8,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND = 0xA9,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND_FRIENDLY = 0xAA,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND_ENEMY = 0xAB,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ = 0xAC,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ_LEFT_TO_RIGHT = 0xAD,
    MODIFIER_VALUE_BULLET_SHOOT_SOUND_WHIZ_RIGHT_TO_LEFT = 0xAE,
    MODIFIER_VALUE_TRACER_REPLACEMENT = 0xAF,
    MODIFIER_VALUE_TRACER_ADDITIONAL = 0xB0,
    MODIFIER_VALUE_CAMERA_TARGET_OVERRIDE = 0xB1,
    MODIFIER_VALUE_SPECTATING_SPEED_OVERRIDE = 0xB2,
    MODIFIER_NON_PLAYER_BONUS_BASE_DAMAGE_PERCENT = 0xB3,
    MODIFIER_VALUE_AIR_DRAG = 0xB4,
    MODIFIER_VALUE_TECH_DAMAGE_TAKEN_HEALS_ATTACKER = 0xB5,
    MODIFIER_VALUE_BULLET_DAMAGE_TAKEN_HEALS_ATTACKER = 0xB6,
    MODIFIER_VALUE_TECH_LIFESTEAL = 0xB7,
    MODIFIER_VALUE_BULLET_LIFESTEAL = 0xB8,
    MODIFIER_VALUE_OVERRIDE_BULLET_ATTACKER = 0xB9,
    MODIFIER_VALUE_OVERRIDE_MELEE_HIT_SOUND = 0xBA,
    MODIFIER_VALUE_OVERRIDE_MELEE_MISS_SOUND = 0xBB,
    MODIFIER_VALUE_IMBUED_BONUS_DAMAGE = 0xBC,
    MODIFIER_VALUE_IMBUED_BONUS_DURATION = 0xBD,
    MODIFIER_VALUE_INTRA_BURST_SHOT_CYCLE_TIME_OVERRIDE = 0xBE,
    MODIFIER_VALUE_BONUS_BURST_SHOT_PERCENT = 0xBF,
    MODIFIER_VALUE_BONUS_BURST_SHOT_CONSTANT = 0xC0,
    MODIFIER_VALUE_SPIN_UP_RATE_OVERRIDE = 0xC1,
    MODIFIER_VALUE_SPIN_UP_DECAY_OVERRIDE = 0xC2,
    MODIFIER_VALUE_SPIN_UP_MAX_CYCLE_TIME_OVERRIDE = 0xC3,
    MODIFIER_VALUE_SPIN_UP_MAX_BURST_FIRE_COOLDOWN_OVERRIDE = 0xC4,
    MODIFIER_VALUE_SPIN_UP_SOUND_OVERRIDE = 0xC5,
    MODIFIER_VALUE_SPIN_DOWN_SOUND_OVERRIDE = 0xC6,
    MODIFIER_VALUE_SPIN_LOOP_SOUND_OVERRIDE = 0xC7,
    MODIFIER_VALUE_BONUS_CHANNEL_TIME_PERCENTAGE = 0xC8,
    MODIFIER_VALUE_ABILITY_RESOURCE_MAX_ADDITIVE = 0xC9,
    MODIFIER_VALUE_ABILITY_RESOURCE_REGEN_PER_SECOND_ADDITIVE = 0xCA,
    MODIFIER_VALUE_ABILITY_RESOURCE_REGEN_PER_SECOND_PERCENTAGE = 0xCB,
    MODIFIER_VALUE_PENDING_INCOMING_DAMAGE = 0xCC,
    MODIFIER_VALUE_CAMERA_WOBBLE_INTENSITY = 0xCD,
    MODIFIER_VALUE_CAMERA_WOBBLE_SPEED = 0xCE,
    MODIFIER_VALUE_RESPAWN_TIME_ADDITIVE = 0xCF,
    MODIFIER_VALUE_COUNT = 0xD0,
    MODIFIER_VALUE_INVALID = 0xFF,
}

public enum ENextAttackDelayReason : int
{
    EDelayReason_Reload = 0x0,
    EDelayReason_BebopSpinUp = 0x1,
    EDelayReason_ViscousChargeShotRecovery = 0x2,
    EDelayReason_WraithSpinUp = 0x3,
    EDelayReason_Disarmed = 0x4,
    EDelayReasonCount = 0x5,
}

public enum EntityDisolveType : int
{
    ENTITY_DISSOLVE_INVALID = -1,
    ENTITY_DISSOLVE_NORMAL = 0x0,
    ENTITY_DISSOLVE_ELECTRICAL = 0x1,
    ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
    ENTITY_DISSOLVE_CORE = 0x3,
}

public enum EntityPlatformTypes : byte
{
    ENTITY_NOT_PLATFORM = 0x0,
    ENTITY_PLATFORM_PLAYER_FOLLOWS_YAW = 0x1,
    ENTITY_PLATFORM_PLAYER_IGNORES_YAW = 0x2,
}

public enum EPlayerPlayState : int
{
    EPlayerStateInvalid = -1,
    EPlayerActive = 0x0,
    EPlayerAwaitingHeroAssignment = 0x1,
    EPlayerChoosingHero = 0x2,
    EPlayerPlayStateCount = 0x3,
}

public enum ETelepunchState : byte
{
    ETelepunchState_None = 0x0,
    ETelepunchState_EnemyPortalTelegraph = 0x1,
    ETelepunchState_SelfPortalTelegraph = 0x2,
    ETelepunchState_Windup = 0x3,
    ETelepunchState_Attack = 0x4,
}

public enum ETier3Phase : int
{
    ETier3Phase_Phase1 = 0x0,
    ETier3Phase_Phase2 = 0x1,
}

public enum ETier3State : int
{
    ETier3State_Alive = 0x0,
    ETier3State_Dying = 0x1,
    ETier3State_Falling = 0x2,
    ETier3Staet_Vulnerable = 0x3,
}

public enum EViscousBowlingBallState : byte
{
    EViscousBowlingBallState_None = 0x0,
    EViscousBowlingBallState_TransformToBall = 0x1,
    EViscousBowlingBallState_Rolling = 0x2,
    EViscousBowlingBallState_TransformFromBall = 0x3,
}

public enum EViscousChargedGunState : int
{
    EViscousChargedGunState_Idle = 0x0,
    EViscousChargedGunState_Charging = 0x1,
    EViscousChargedGunState_Shoot = 0x2,
}

public enum FixAngleSet : byte
{
    None = 0x0,
    Absolute = 0x1,
    Relative = 0x2,
}

public enum HitGroup : int
{
    HITGROUP_INVALID = -1,
    HITGROUP_GENERIC = 0x0,
    HITGROUP_HEAD = 0x1,
    HITGROUP_CHEST = 0x2,
    HITGROUP_STOMACH = 0x3,
    HITGROUP_LEFTARM = 0x4,
    HITGROUP_RIGHTARM = 0x5,
    HITGROUP_LEFTLEG = 0x6,
    HITGROUP_RIGHTLEG = 0x7,
    HITGROUP_NECK = 0x8,
    HITGROUP_UNUSED = 0x9,
    HITGROUP_GEAR = 0xA,
    HITGROUP_SPECIAL = 0xB,
    HITGROUP_T2_BOSS_FRONT_LEFT_LEG_WEAKPOINT = 0xC,
    HITGROUP_T2_BOSS_FRONT_RIGHT_LEG_WEAKPOINT = 0xD,
    HITGROUP_T2_BOSS_REAR_LEFT_LEG_WEAKPOINT = 0xE,
    HITGROUP_T2_BOSS_REAR_RIGHT_LEG_WEAKPOINT = 0xF,
    HITGROUP_T2_BOSS_HEAD_WEAKPOINT = 0x10,
    HITGROUP_T2_BOSS_BACK_WEAKPOINT = 0x11,
    HITGROUP_DRONE_BOSS_DRONE_WEAKPOINT = 0x12,
    HITGROUP_COUNT = 0x13,
}

public enum MoveCollide : byte
{
    MOVECOLLIDE_DEFAULT = 0x0,
    MOVECOLLIDE_FLY_BOUNCE = 0x1,
    MOVECOLLIDE_FLY_CUSTOM = 0x2,
    MOVECOLLIDE_FLY_SLIDE = 0x3,
    MOVECOLLIDE_COUNT = 0x4,
    MOVECOLLIDE_MAX_BITS = 0x3,
}

public enum MoveType : byte
{
    MOVETYPE_NONE = 0x0,
    MOVETYPE_OBSOLETE = 0x1,
    MOVETYPE_WALK = 0x2,
    MOVETYPE_FLY = 0x3,
    MOVETYPE_FLYGRAVITY = 0x4,
    MOVETYPE_VPHYSICS = 0x5,
    MOVETYPE_PUSH = 0x6,
    MOVETYPE_NOCLIP = 0x7,
    MOVETYPE_OBSERVER = 0x8,
    MOVETYPE_STEP = 0x9,
    MOVETYPE_SYNC = 0xA,
    MOVETYPE_CUSTOM = 0xB,
    MOVETYPE_LAST = 0xC,
    MOVETYPE_INVALID = 0xC,
    MOVETYPE_MAX_BITS = 0x5,
}

public enum NPC_STATE : int
{
    NPC_STATE_INVALID = -1,
    NPC_STATE_INIT = 0x0,
    NPC_STATE_IDLE = 0x1,
    NPC_STATE_ALERT = 0x2,
    NPC_STATE_COMBAT = 0x3,
    NPC_STATE_SCRIPT = 0x4,
    NPC_STATE_DEAD = 0x5,
    NPC_STATE_INERT = 0x6,
    NPC_STATE_SYNCHRONIZED_SECONDARY = 0x7,
    NUM_NPC_STATES = 0x8,
}

public enum ObserverMode : int
{
    OBS_MODE_NONE = 0x0,
    OBS_MODE_FIXED = 0x1,
    OBS_MODE_IN_EYE = 0x2,
    OBS_MODE_CHASE = 0x3,
    OBS_MODE_ROAMING = 0x4,
    OBS_MODE_DIRECTED = 0x5,
    NUM_OBSERVER_MODES = 0x6,
}

public enum PlayerConnectedState : int
{
    PlayerNeverConnected = -1,
    PlayerConnected = 0x0,
    PlayerConnecting = 0x1,
    PlayerReconnecting = 0x2,
    PlayerDisconnecting = 0x3,
    PlayerDisconnected = 0x4,
    PlayerReserved = 0x5,
}

public enum PointWorldTextJustifyHorizontal : int
{
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2,
}

public enum PointWorldTextJustifyVertical : int
{
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2,
}

public enum PointWorldTextReorientMode : int
{
    POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
    POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1,
}

public enum RenderFx : byte
{
    kRenderFxNone = 0x0,
    kRenderFxPulseSlow = 0x1,
    kRenderFxPulseFast = 0x2,
    kRenderFxPulseSlowWide = 0x3,
    kRenderFxPulseFastWide = 0x4,
    kRenderFxFadeSlow = 0x5,
    kRenderFxFadeFast = 0x6,
    kRenderFxSolidSlow = 0x7,
    kRenderFxSolidFast = 0x8,
    kRenderFxStrobeSlow = 0x9,
    kRenderFxStrobeFast = 0xA,
    kRenderFxStrobeFaster = 0xB,
    kRenderFxFlickerSlow = 0xC,
    kRenderFxFlickerFast = 0xD,
    kRenderFxNoDissipation = 0xE,
    kRenderFxFadeOut = 0xF,
    kRenderFxFadeIn = 0x10,
    kRenderFxPulseFastWider = 0x11,
    kRenderFxGlowShell = 0x12,
    kRenderFxMax = 0x13,
}

public enum RenderMode : byte
{
    kRenderNormal = 0x0,
    kRenderTransColor = 0x1,
    kRenderTransTexture = 0x2,
    kRenderGlow = 0x3,
    kRenderTransAlpha = 0x4,
    kRenderTransAdd = 0x5,
    kRenderEnvironmental = 0x6,
    kRenderTransAddFrameBlend = 0x7,
    kRenderTransAlphaAdd = 0x8,
    kRenderWorldGlow = 0x9,
    kRenderNone = 0xA,
    kRenderDevVisualizer = 0xB,
    kRenderModeCount = 0xC,
}

public enum ShardSolid : byte
{
    SHARD_SOLID = 0x0,
    SHARD_DEBRIS = 0x1,
}

public enum SolidType : byte
{
    SOLID_NONE = 0x0,
    SOLID_BSP = 0x1,
    SOLID_BBOX = 0x2,
    SOLID_OBB = 0x3,
    SOLID_SPHERE = 0x4,
    SOLID_POINT = 0x5,
    SOLID_VPHYSICS = 0x6,
    SOLID_CAPSULE = 0x7,
    SOLID_LAST = 0x8,
}

public enum SurroundingBoundsType : byte
{
    USE_OBB_COLLISION_BOUNDS = 0x0,
    USE_BEST_COLLISION_BOUNDS = 0x1,
    USE_HITBOXES = 0x2,
    USE_SPECIFIED_BOUNDS = 0x3,
    USE_GAME_CODE = 0x4,
    USE_ROTATION_EXPANDED_BOUNDS = 0x5,
    USE_ROTATION_EXPANDED_ORIENTED_BOUNDS = 0x6,
    USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x7,
    USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x8,
    SURROUNDING_TYPE_BIT_COUNT = 0x3,
}

public enum TakeDamageFlags : long
{
    DFLAG_NONE = 0x0,
    DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
    DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
    DFLAG_SUPPRESS_EFFECTS = 0x4,
    DFLAG_PREVENT_DEATH = 0x8,
    DFLAG_FORCE_DEATH = 0x10,
    DFLAG_ALWAYS_GIB = 0x20,
    DFLAG_NEVER_GIB = 0x40,
    DFLAG_REMOVE_NO_RAGDOLL = 0x80,
    DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
    DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
    DFLAG_RADIUS_DMG = 0x400,
    DFLAG_FORCEREDUCEARMOR_DMG = 0x800,
    DFLAG_SUPPRESS_INTERRUPT_FLINCH = 0x1000,
    DMG_LASTDFLAG = 0x1000,
    DFLAG_ALLOW_SUICIDE = 0x2000,
    DFLAG_BOUNTY_ALL_DIRECT = 0x4000,
    DFLAG_SUPPRESS_DIRECT_GOLD_BOUNTY = 0x8000,
    DFLAG_SUPPRESS_COINS_GOLD_BOUNTY = 0x10000,
    DFLAG_SUPPRESS_KILL_CREDIT = 0x20000,
    DFLAG_SUPPRESS_DEATH_CREDIT = 0x40000,
    DFLAG_SUPPRESS_AP_BOUNTY = 0x80000,
    DFLAG_SUPPRESS_DAMAGE_RECORD = 0x100000,
    DFLAG_SUPPRESS_DEATH_EVENT = 0x200000,
    DFLAG_MITIGATION_DUE_TO_NO_NEARBY_TROOPERS = 0x400000,
    DFLAG_TRIGGER_FLINCH = 0x800000,
    DFLAG_DO_NOT_BATCH_DAMAGE_NUMBER = 0x1000000,
    DFLAG_SUPPRESS_HIT_INDICATOR_SOUND = 0x2000000,
    DFLAG_DO_NOT_PROC = 0x4000000,
    DFLAG_RICOCHET = 0x8000000,
    DFLAG_PURE_DMG = 0x10000000,
    DFLAG_HEAVY_MELEE = 0x20000000,
    DFLAG_LIGHT_MELEE = 0x40000000,
    DFLAG_TRACK_DAMAGE = 0x80000000,
    DFLAG_KILL_CREATES_RAGDOLL = 0x100000000,
    DFLAG_IS_HEALTH_TRANSFER = 0x200000000,
    DFLAG_DO_NOT_RICOCHET = 0x400000000,
    DFLAG_NOT_IN_MIDBOSS_PIT = 0x800000000,
    DFLAG_NOT_IN_TIER3_PIT = 0x1000000000,
    DFLAG_DO_NOT_TRIGGER_DAMAGE_FLASH = 0x2000000000,
    DFLAG_TOO_FAR = 0x4000000000,
    DFLAG_DO_NOT_DISRUPT_HEALING_RITE = 0x8000000000,
    DFLAG_DO_NOT_HEADSHOT = 0x10000000000,
    DFLAG_TOO_LOW = 0x20000000000,
}

public enum ValueRemapperHapticsType : int
{
    HaticsType_Default = 0x0,
    HaticsType_None = 0x1,
}

public enum ValueRemapperInputType : int
{
    InputType_PlayerShootPosition = 0x0,
    InputType_PlayerShootPositionAroundAxis = 0x1,
}

public enum ValueRemapperMomentumType : int
{
    MomentumType_None = 0x0,
    MomentumType_Friction = 0x1,
    MomentumType_SpringTowardSnapValue = 0x2,
    MomentumType_SpringAwayFromSnapValue = 0x3,
}

public enum ValueRemapperOutputType : int
{
    OutputType_AnimationCycle = 0x0,
    OutputType_RotationX = 0x1,
    OutputType_RotationY = 0x2,
    OutputType_RotationZ = 0x3,
}

public enum ValueRemapperRatchetType : int
{
    RatchetType_Absolute = 0x0,
    RatchetType_EachEngage = 0x1,
}

public partial class AbilityResource
{
    public GameTime LatchTime { get; private set; } = new();

    public float LatchValue { get; private set; }

    internal static SendNodeDecoder<AbilityResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flLatchTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (AbilityResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (AbilityResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchValue = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (AbilityResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MIsBoxedIntegerType
public readonly record struct AttachmentHandle(int Value)
{
    public static AttachmentHandle Decode(ref BitBuffer buffer) => new AttachmentHandle(buffer.ReadVarInt32());
}

// MIsBoxedIntegerType
public readonly record struct AttribDefinitionIndex(int Value)
{
    public static AttribDefinitionIndex Decode(ref BitBuffer buffer) => new AttribDefinitionIndex(buffer.ReadVarInt32());
}

public partial class AudioParams
{
    // MNetworkEncoder "coord"
    public Vector[] LocalSound { get; private set; } = Array.Empty<Vector>();

    public Int32 SoundscapeIndex { get; private set; }

    public byte LocalBits { get; private set; }

    public Int32 SoundscapeEntityListIndex { get; private set; }

    public UInt32 SoundEventHash { get; private set; }

    internal static SendNodeDecoder<AudioParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "localSound")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.LocalSound.Length == 0) @this.LocalSound = new Vector[fixedArraySize];
                @this.LocalSound[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundscapeIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "localBits")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LocalBits = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeEntityListIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundscapeEntityListIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundEventHash")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundEventHash = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAbility_Fathom_ReefdwellerHarpoon : CCitadelBaseAbility
{
    internal CAbility_Fathom_ReefdwellerHarpoon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsVisibleOnMinimap { get; private set; }

    public bool Latched { get; private set; }

    public Vector HarpoonTarget { get; private set; }

    public float LatchedYaw { get; private set; }

    public GameTime CloseEnoughStartTime { get; private set; } = new();

    public GameTime StuckStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CAbility_Fathom_ReefdwellerHarpoon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsVisibleOnMinimap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsVisibleOnMinimap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLatched")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Latched = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vHarpoonTarget")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HarpoonTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchedYaw")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchedYaw = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCloseEnoughStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CloseEnoughStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStuckStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CAbility_Fathom_ReefdwellerHarpoon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StuckStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Fathom_ReefdwellerHarpoon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Fathom_ReefdwellerHarpoon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Fathom_ReefdwellerHarpoon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Fathom_ReefdwellerHarpoon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Mirage_SandPhantom : CCitadelBaseAbility
{
    internal CAbility_Mirage_SandPhantom(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Mirage_SandPhantom> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_SandPhantom.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_SandPhantom.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_SandPhantom.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_SandPhantom.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Mirage_Tornado : CCitadelBaseAbility
{
    internal CAbility_Mirage_Tornado(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCitadelProjectile, DeadlockDemoParser> ActiveProjectileHandle { get; private set; }
    public CCitadelProjectile? ActiveProjectile => ActiveProjectileHandle.Get(Demo);

    internal new static SendNodeDecoder<CAbility_Mirage_Tornado> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActiveProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelProjectile, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CAbility_Mirage_Tornado @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveProjectileHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_Tornado.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_Tornado.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_Tornado.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Mirage_Tornado.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Rutger_CheatDeath : CCitadelBaseAbility
{
    internal CAbility_Rutger_CheatDeath(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Rutger_CheatDeath> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_CheatDeath.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_CheatDeath.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_CheatDeath.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_CheatDeath.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Rutger_ForceField : CCitadelBaseAbility
{
    internal CAbility_Rutger_ForceField(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Rutger_ForceField> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_ForceField.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_ForceField.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_ForceField.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_ForceField.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Rutger_RocketLauncher : CCitadelBaseAbility
{
    internal CAbility_Rutger_RocketLauncher(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Rutger_RocketLauncher> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_RocketLauncher.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_RocketLauncher.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_RocketLauncher.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Rutger_RocketLauncher.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_Affliction : CCitadelBaseAbility
{
    internal CAbility_Synth_Affliction(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Synth_Affliction> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Affliction.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Affliction.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Affliction.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Affliction.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_Barrage : CCitadelBaseAbility
{
    internal CAbility_Synth_Barrage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextShootTime { get; private set; } = new();

    internal new static SendNodeDecoder<CAbility_Synth_Barrage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flNextShootTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CAbility_Synth_Barrage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextShootTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Barrage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Barrage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Barrage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Barrage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_Blitz : CCitadelBaseAbility
{
    internal CAbility_Synth_Blitz(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 FastFireBulletsLeft { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CCitadelAutoScaledTime BlitzEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CAbility_Synth_Blitz> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nFastFireBulletsLeft")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAbility_Synth_Blitz @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FastFireBulletsLeft = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flBlitzEndTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAbility_Synth_Blitz @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.BlitzEndTime, path, ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Blitz.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Blitz.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Blitz.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Blitz.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_Grasp : CCitadelBaseAbility
{
    internal CAbility_Synth_Grasp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Synth_Grasp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Grasp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Grasp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Grasp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Grasp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_PlasmaFlux : CCitadelBaseAbility
{
    internal CAbility_Synth_PlasmaFlux(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> ActiveProjectileHandle { get; private set; }
    public CBaseEntity? ActiveProjectile => ActiveProjectileHandle.Get(Demo);

    internal new static SendNodeDecoder<CAbility_Synth_PlasmaFlux> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActiveProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CAbility_Synth_PlasmaFlux @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveProjectileHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_PlasmaFlux.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_PlasmaFlux.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_PlasmaFlux.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_PlasmaFlux.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAbility_Synth_Pulse : CCitadelBaseAbility
{
    internal CAbility_Synth_Pulse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAbility_Synth_Pulse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Pulse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Pulse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Pulse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAbility_Synth_Pulse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_lifeState"
// MNetworkIncludeByName "m_spawnflags"
public partial class CAI_BaseNPC : CBaseCombatCharacter
{
    internal CAI_BaseNPC(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NPC_STATE NPCState { get; private set; }

    public bool FadeCorpse { get; private set; }

    public bool ImportantRagdoll { get; private set; }

    internal new static SendNodeDecoder<CAI_BaseNPC> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_NPCState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<NPC_STATE>(field.FieldEncodingInfo);
            return (CAI_BaseNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NPCState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFadeCorpse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAI_BaseNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeCorpse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bImportantRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAI_BaseNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ImportantRagdoll = decoder(ref buffer);
            };
        }
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAI_BaseNPC.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAI_BaseNPC.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAI_BaseNPC.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAI_BaseNPC.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iTeam"
// MNetworkIncludeByName "m_vecViewOffset"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
public partial class CAI_CitadelNPC : CAI_BaseNPC
{
    internal CAI_CitadelNPC(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelAbilityComponent"
    // MNetworkAlias "CCitadelAbilityComponent"
    // MNetworkTypeAlias "CCitadelAbilityComponent"
    public CCitadelAbilityComponent CCitadelAbilityComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelRegenComponent"
    // MNetworkAlias "CCitadelRegenComponent"
    // MNetworkTypeAlias "CCitadelRegenComponent"
    public CCitadelRegenComponent CCitadelRegenComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public NetworkedVector<WeakPoint> WeakPoints { get; private set; } = new NetworkedVector<WeakPoint>();

    public bool Minion { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> LookTargetHandle { get; private set; }
    public CBaseEntity? LookTarget => LookTargetHandle.Get(Demo);

    public bool BeamActive { get; private set; }

    // MNetworkEncoder "coord"
    public Vector EyeBeamTarget { get; private set; }

    internal new static SendNodeDecoder<CAI_CitadelNPC> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelAbilityComponent")
        {
            var innerDecoder = CCitadelAbilityComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelAbilityComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelRegenComponent")
        {
            var innerDecoder = CCitadelRegenComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelRegenComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecWeakPoints")
        {
            var innerDecoder = decoderSet.GetDecoder<WeakPoint>(field.FieldSerializerKey!.Value);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.WeakPoints.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.WeakPoints.EnsureSize(index + 1);
                    var element = @this.WeakPoints[index] ??= new WeakPoint();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bMinion")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Minion = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLookTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LookTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBeamActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vEyeBeamTarget")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAI_CitadelNPC @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EyeBeamTarget = decoder(ref buffer);
            };
        }
        return CAI_BaseNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAI_CitadelNPC.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAI_CitadelNPC.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAI_CitadelNPC.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAI_CitadelNPC.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_flAnimTime"
public partial class CAnimGraph2TestProp : CDynamicProp
{
    internal CAnimGraph2TestProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAnimGraph2TestProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAnimGraph2TestProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAnimGraph2TestProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAnimGraph2TestProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAnimGraph2TestProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAnimGraphNetworkedVariables
{
    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetBoolVarChanged"
    // MNetworkAlias "m_PredBoolVariables"
    public NetworkedVector<UInt32> PredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetByteVarChanged"
    // MNetworkAlias "m_PredByteVariables"
    public NetworkedVector<byte> PredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt16VarChanged"
    // MNetworkAlias "m_PredUInt16Variables"
    public NetworkedVector<UInt16> PredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetIntVarChanged"
    // MNetworkAlias "m_PredIntVariables"
    public NetworkedVector<Int32> PredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt32VarChanged"
    // MNetworkAlias "m_PredUInt32Variables"
    public NetworkedVector<UInt32> PredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt64VarChanged"
    // MNetworkAlias "m_PredUInt64Variables"
    public NetworkedVector<UInt64> PredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetFloatVarChanged"
    // MNetworkAlias "m_PredFloatVariables"
    public NetworkedVector<float> PredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetVectorVarChanged"
    // MNetworkAlias "m_PredVectorVariables"
    public NetworkedVector<Vector> PredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetQuaternionVarChanged"
    // MNetworkAlias "m_PredQuaternionVariables"
    public NetworkedVector<Quaternion> PredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetGlobalSymbolVarChanged"
    // MNetworkAlias "m_PredGlobalSymbolVariables"
    public NetworkedVector<CGlobalSymbol> PredNetGlobalSymbolVariables { get; private set; } = new NetworkedVector<CGlobalSymbol>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOBoolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetBoolVariables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOByteVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetByteVariables"
    public NetworkedVector<byte> OwnerOnlyPredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt16VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt16Variables"
    public NetworkedVector<UInt16> OwnerOnlyPredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOIntVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetIntVariables"
    public NetworkedVector<Int32> OwnerOnlyPredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt32VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt32Variables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt64VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt64Variables"
    public NetworkedVector<UInt64> OwnerOnlyPredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOFloatVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetFloatVariables"
    public NetworkedVector<float> OwnerOnlyPredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOVectorVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetVectorVariables"
    public NetworkedVector<Vector> OwnerOnlyPredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOQuaternionVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetQuaternionVariables"
    public NetworkedVector<Quaternion> OwnerOnlyPredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOGlobalSymbolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetGlobalSymbolVariables"
    public NetworkedVector<CGlobalSymbol> OwnerOnlyPredNetGlobalSymbolVariables { get; private set; } = new NetworkedVector<CGlobalSymbol>();

    // MNetworkUserGroup "animationgraph"
    public Int32 BoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 OwnerOnlyBoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 RandomSeedOffset { get; private set; }

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnTeleportTimeChanged"
    public float LastTeleportTime { get; private set; }

    internal static SendNodeDecoder<CAnimGraphNetworkedVariables> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_PredBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredGlobalSymbolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_CGlobalSymbol(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetGlobalSymbolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetGlobalSymbolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetGlobalSymbolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetGlobalSymbolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_CGlobalSymbol(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetGlobalSymbolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetGlobalSymbolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetGlobalSymbolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_nBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerOnlyBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerOnlyBoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandomSeedOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RandomSeedOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastTeleportTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastTeleportTime = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByName "m_iTeamNum"
public partial class CAssignedLaneParticle : CBaseModelEntity
{
    internal CAssignedLaneParticle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Lane { get; private set; }

    internal new static SendNodeDecoder<CAssignedLaneParticle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAssignedLaneParticle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lane = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CAssignedLaneParticle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAssignedLaneParticle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAssignedLaneParticle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAssignedLaneParticle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_ProviderType"
// MNetworkIncludeByName "m_hOuter"
// MNetworkIncludeByName "m_iReapplyProvisionParity"
// MNetworkIncludeByName "m_Item"
public partial class CAttributeContainer : CAttributeManager
{
    public CEconItemView Item { get; private set; } = new();

    internal new static SendNodeDecoder<CAttributeContainer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Item")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAttributeContainer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Item, path, ref buffer);
            };
        }
        return CAttributeManager.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CAttributeList
{
    // MNetworkTypeAlias "CUtlVector< CEconItemAttribute >"
    public NetworkedVector<CEconItemAttribute> Attributes { get; private set; } = new NetworkedVector<CEconItemAttribute>();

    internal static SendNodeDecoder<CAttributeList> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Attributes")
        {
            var innerDecoder = decoderSet.GetDecoder<CEconItemAttribute>(field.FieldSerializerKey!.Value);
            return (CAttributeList @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Attributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.Attributes.EnsureSize(index + 1);
                    var element = @this.Attributes[index] ??= new CEconItemAttribute();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAttributeList @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAttributeManager
{
    public Int32 ReapplyProvisionParity { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> OuterHandle { get; private set; }

    public AttributeProviderTypes ProviderType { get; private set; }

    internal static SendNodeDecoder<CAttributeManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iReapplyProvisionParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReapplyProvisionParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOuter")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ProviderType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<AttributeProviderTypes>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProviderType = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CBarnLight : CBaseModelEntity
{
    internal CBarnLight(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool Enabled { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ColorMode { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ColorTemperature { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Brightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 DirectLight { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 BakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 LuminaireShape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float LuminaireSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float LuminaireAnisotropy { get; private set; }

    // MNetworkChangeCallback "StyleChanged"
    public NetworkedString LightStyleString { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public GameTime LightStyleStartTime { get; private set; } = new();

    public NetworkedVector<NetworkedString> QueuedLightStyleStrings { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<NetworkedString> LightStyleEvents { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>> LightStyleTargets { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>>();

    // MNetworkChangeCallback "RenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Shape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SoftX { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SoftY { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Skirt { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SkirtNear { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector SizeParams { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public float Range { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector Shear { get; private set; }

    public Int32 BakeSpecularToCubemaps { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector BakeSpecularToCubemapsSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 CastShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ShadowMapSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ShadowPriority { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool ContactShadow { get; private set; }

    public Int32 BounceLight { get; private set; }

    public float BounceScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float MinRoughness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector AlternateColor { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float AlternateColorBrightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 Fog { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FogStrength { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 FogShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FogScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool FogMixedShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ShadowFadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ShadowFadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool PrecomputedFieldsValid { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMins { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMaxs { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 PrecomputedSubFrusta { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin0 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles0 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent0 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin1 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles1 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent1 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin2 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles2 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent2 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin3 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles3 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent3 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin4 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles4 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent4 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin5 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles5 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent5 { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public NetworkedVector<UInt16> VisClusters { get; private set; } = new NetworkedVector<UInt16>();

    internal new static SendNodeDecoder<CBarnLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nColorMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTemperature")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTemperature = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLuminaireShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyleString")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleString = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_QueuedLightStyleStrings")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.QueuedLightStyleStrings.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.QueuedLightStyleStrings.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.QueuedLightStyleStrings[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleEvents")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.LightStyleEvents.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.LightStyleEvents.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.LightStyleEvents[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleTargets")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.LightStyleTargets.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.LightStyleTargets.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.LightStyleTargets[index] = element;
                }
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShape")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Shape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoftX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoftY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirt")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Skirt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirtNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkirtNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSizeParams")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SizeParams = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Range = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vShear")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Shear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakeSpecularToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakeSpecularToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBakeSpecularToCubemapsSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakeSpecularToCubemapsSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowMapSize")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowMapSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bContactShadow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ContactShadow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBounceLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BounceLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBounceScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BounceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinRoughness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAlternateColor")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlternateColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAlternateColorBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlternateColorBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFog")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Fog = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFogMixedShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMixedShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPrecomputedSubFrusta")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedSubFrusta = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin0")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles0")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent0")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin1")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles1")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent1")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin2")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles2")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent2")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin3")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles3")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent3")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin4")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin4 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles4")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles4 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent4")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent4 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin5")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin5 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles5")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles5 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent5")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent5 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_VisClusters")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.VisClusters.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.VisClusters.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.VisClusters[index] = element;
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBarnLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBarnLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBarnLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBarnLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_bClientSideRagdoll"
public partial class CBaseAnimGraph : CBaseModelEntity
{
    internal CBaseAnimGraph(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool InitiallyPopulateInterpHistory { get; private set; }

    public bool AnimGraphUpdateEnabled { get; private set; }

    public Vector Force { get; private set; }

    public Int32 ForceBone { get; private set; }

    public PhysicsRagdollPose RagdollPose { get; private set; } = new();

    // MNetworkChangeCallback "OnClientRagdollChanged"
    public bool RagdollClientSide { get; private set; }

    // MNetworkSendProxyRecipientsFilter
    public NetworkedVector<byte> AnimGraph2SerializeData { get; private set; } = new NetworkedVector<byte>();

    // MNetworkSendProxyRecipientsFilter
    public Int32 AnimGraph2SerializeDataSizeBytes { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInitiallyPopulateInterpHistory")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitiallyPopulateInterpHistory = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphUpdateEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraphUpdateEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecForce")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Force = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceBone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceBone = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_RagdollPose")
        {
            var innerDecoder = PhysicsRagdollPose.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.RagdollPose, path, ref buffer);
            };
        }
        if (field.VarName == "m_bRagdollClientSide")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollClientSide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_animGraph2SerializeData")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.AnimGraph2SerializeData.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.AnimGraph2SerializeData.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.AnimGraph2SerializeData[index] = element;
                }
            };
        }
        if (field.VarName == "m_nAnimGraph2SerializeDataSizeBytes")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraph2SerializeDataSizeBytes = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseAnimGraphController : CSkeletonAnimationController
{
    public CAnimGraphNetworkedVariables AnimGraphNetworkedVars { get; private set; } = new();

    // MNetworkSerializer "minusone"
    // MNetworkChangeCallback "OnNetworkedSequenceChanged"
    // MNetworkPriority 32
    public HSequence Sequence { get; private set; } = new();

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public GameTime SeqStartTime { get; private set; } = new();

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public float SeqFixedCycle { get; private set; }

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public AnimLoopMode AnimLoopMode { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue -4
    // MNetworkMaxValue 12
    // MNetworkEncodeFlags 5
    // MNetworkPriority 32
    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    public float PlaybackRate { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraphController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animGraphNetworkedVars")
        {
            var innerDecoder = CAnimGraphNetworkedVariables.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AnimGraphNetworkedVars, path, ref buffer);
            };
        }
        if (field.VarName == "m_hSequence")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Sequence = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flSeqStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SeqStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSeqFixedCycle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SeqFixedCycle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAnimLoopMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<AnimLoopMode>(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimLoopMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPlaybackRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlaybackRate = decoder(ref buffer);
            };
        }
        return CSkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseButton : CBaseToggle
{
    internal CBaseButton(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseModelEntity, DeadlockDemoParser> GlowEntityHandle { get; private set; }
    public CBaseModelEntity? GlowEntity => GlowEntityHandle.Get(Demo);

    public bool Usable { get; private set; }

    public NetworkedString DisplayText { get; private set; }

    internal new static SendNodeDecoder<CBaseButton> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_glowEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Usable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szDisplayText")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisplayText = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseButton.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseButton.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseButton.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseButton.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseClientUIEntity : CBaseModelEntity
{
    internal CBaseClientUIEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Enabled { get; private set; }

    public NetworkedString DialogXMLName { get; private set; }

    public NetworkedString PanelClassName { get; private set; }

    public NetworkedString PanelID { get; private set; }

    internal new static SendNodeDecoder<CBaseClientUIEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DialogXMLName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DialogXMLName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelClassName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelClassName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelID")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelID = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
public partial class CBaseCombatCharacter : CBaseFlex
{
    internal CBaseCombatCharacter(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<CHandle<CEconWearable, DeadlockDemoParser>> MyWearables { get; private set; } = new NetworkedVector<CHandle<CEconWearable, DeadlockDemoParser>>();

    internal new static SendNodeDecoder<CBaseCombatCharacter> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWearables")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CEconWearable, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseCombatCharacter @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.MyWearables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.MyWearables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.MyWearables[index] = element;
                }
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseDoor : CBaseToggle
{
    internal CBaseDoor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsUsable { get; private set; }

    internal new static SendNodeDecoder<CBaseDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsUsable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsUsable = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseDoor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseDoor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseDoor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseDoor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_bClientSideRagdoll"
// MNetworkExcludeByName "m_iMaxHealth"
// MNetworkExcludeByUserGroup "Water"
// MNetworkExcludeByUserGroup "Player"
// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
// MNetworkExcludeByName "m_spawnflags"
// MNetworkExcludeByName "m_bTakesDamage"
// MNetworkExcludeByName "m_nTakeDamageFlags"
// MNetworkExcludeByName "m_flSpeed"
public partial class CBaseEntity : CEntityInstance<DeadlockDemoParser>
{
    internal CBaseEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CBodyComponent"
    // MNetworkAlias "CBodyComponent"
    // MNetworkTypeAlias "CBodyComponent"
    // MNetworkPriority 48
    public CBodyComponent? CBodyComponent { get; private set; }

    // MNetworkSerializer "ClampHealth"
    // MNetworkUserGroup "Player"
    // MNetworkPriority 32
    public Int32 Health { get; private set; }

    public Int32 MaxHealth { get; private set; }

    // MNetworkUserGroup "Player"
    // MNetworkPriority 32
    public byte LifeState { get; private set; }

    public bool TakesDamage { get; private set; }

    public TakeDamageFlags TakeDamageFlags { get; private set; }

    public EntityPlatformTypes PlatformType { get; private set; }

    public MoveCollide MoveCollide { get; private set; }

    public MoveType MoveType { get; private set; }

    // MNetworkSendProxyRecipientsFilter
    public CUtlStringToken SubclassID { get; private set; }

    // MNetworkPriority 0
    // MNetworkSerializer "animTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float AnimTime { get; private set; }

    // MNetworkPriority 1
    // MNetworkSerializer "simulationTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float SimulationTime { get; private set; }

    public GameTime CreateTime { get; private set; } = new();

    public bool ClientSideRagdoll { get; private set; }

    public byte InterpolationFrame { get; private set; }

    public byte TeamNum { get; private set; }

    public float Speed { get; private set; }

    public UInt32 Spawnflags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTick NextThinkTick { get; private set; } = new();

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public UInt32 Flags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    public CNetworkVelocityVector Velocity { get; private set; } = new();

    public CModifierProperty? ModifierProp { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> EffectEntityHandle { get; private set; }
    public CBaseEntity? EffectEntity => EffectEntityHandle.Get(Demo);

    // MNetworkPriority 32
    public CHandle<CBaseEntity, DeadlockDemoParser> OwnerEntityHandle { get; private set; }
    public CBaseEntity? OwnerEntity => OwnerEntityHandle.Get(Demo);

    // MNetworkChangeCallback "OnEffectsChanged"
    public UInt32 Effects { get; private set; }

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public CHandle<CBaseEntity, DeadlockDemoParser> GroundEntityHandle { get; private set; }
    public CBaseEntity? GroundEntity => GroundEntityHandle.Get(Demo);

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public Int32 GroundBodyIndex { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 4
    // MNetworkEncodeFlags 1
    // MNetworkUserGroup "LocalPlayerExclusive"
    public float Friction { get; private set; }

    // MNetworkEncoder "coord"
    public float Elasticity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float GravityScale { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float TimeScale { get; private set; }

    // MNetworkUserGroup "Water"
    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 8
    public float WaterLevel { get; private set; }

    public bool AnimatedEveryTick { get; private set; }

    public GameTime NavIgnoreUntilTime { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CBodyComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CBodyComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CBodyComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CBodyComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHealth")
        {
            var decoder = CreateDecoder_ClampHealth(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Health = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_iMaxHealth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lifeState")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LifeState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTakesDamage")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TakesDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTakeDamageFlags")
        {
            var decoder = FieldDecode.CreateDecoder_enum<TakeDamageFlags>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TakeDamageFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlatformType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EntityPlatformTypes>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlatformType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveCollide")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveCollide>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveCollide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveType>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSubclassID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SubclassID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnimTime")
        {
            var decoder = CreateDecoder_animTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimTime = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flSimulationTime")
        {
            var decoder = CreateDecoder_simulationTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SimulationTime = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flCreateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSideRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSideRagdoll = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ubInterpolationFrame")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InterpolationFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iTeamNum")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamNum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Speed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_spawnflags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Spawnflags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextThinkTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextThinkTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flags = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecVelocity")
        {
            var innerDecoder = CNetworkVelocityVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Velocity, path, ref buffer);
            };
        }
        if (field.VarName == "m_pModifierProp")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CModifierProperty.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ModifierProp = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ModifierProp ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_hEffectEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOwnerEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEffects")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Effects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hGroundEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GroundEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGroundBodyIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GroundBodyIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFriction")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Friction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flElasticity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Elasticity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGravityScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GravityScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWaterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WaterLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimatedEveryTick")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimatedEveryTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNavIgnoreUntilTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NavIgnoreUntilTime = decoder(ref buffer);
            };
        }
        return CEntityInstance<DeadlockDemoParser>.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseFire : CBaseEntity
{
    internal CBaseFire(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Scale { get; private set; }

    public float StartScale { get; private set; }

    public float ScaleTime { get; private set; }

    public UInt32 FireFlags { get; private set; }

    internal new static SendNodeDecoder<CBaseFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScaleTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireFlags = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseFlex : CBaseAnimGraph
{
    internal CBaseFlex(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount 12
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 1
    public NetworkedVector<float> FlexWeight { get; private set; } = new NetworkedVector<float>();

    // MNetworkEncoder "coord"
    public Vector LookTargetPosition { get; private set; }

    public bool Blinktoggle { get; private set; }

    internal new static SendNodeDecoder<CBaseFlex> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flexWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FlexWeight.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.FlexWeight.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.FlexWeight[index] = element;
                }
            };
        }
        if (field.VarName == "m_vLookTargetPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LookTargetPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_blinktoggle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blinktoggle = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseFlex.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseFlex.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseFlex.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseFlex.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseModelEntity : CBaseEntity
{
    internal CBaseModelEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CRenderComponent"
    // MNetworkAlias "CRenderComponent"
    // MNetworkTypeAlias "CRenderComponent"
    public CRenderComponent? CRenderComponent { get; private set; }

    // MNetworkUserGroup "CHitboxComponent"
    // MNetworkAlias "CHitboxComponent"
    // MNetworkTypeAlias "CHitboxComponent"
    public CHitboxComponent CHitboxComponent { get; private set; } = new();

    public RenderMode RenderMode { get; private set; }

    public RenderFx RenderFX { get; private set; }

    // MNetworkChangeCallback "OnColorChanged"
    public Color Render { get; private set; }

    // MNetworkChangeCallback "OnRenderAttributesChanged"
    public NetworkedVector<EntityRenderAttribute> RenderAttributes { get; private set; } = new NetworkedVector<EntityRenderAttribute>();

    public bool RenderToCubemaps { get; private set; }

    public bool NoInterpolate { get; private set; }

    public CCollisionProperty Collision { get; private set; } = new();

    public CGlowProperty Glow { get; private set; } = new();

    public float GlowBackfaceMult { get; private set; }

    public float FadeMinDist { get; private set; }

    public float FadeMaxDist { get; private set; }

    public float FadeScale { get; private set; }

    public float ShadowStrength { get; private set; }

    public byte ObjectCulling { get; private set; }

    public Int32 AddDecal { get; private set; }

    public Vector DecalPosition { get; private set; }

    public Vector DecalForwardAxis { get; private set; }

    public float DecalHealBloodRate { get; private set; }

    public float DecalHealHeightRate { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>> ConfigEntitiesToPropagateMaterialDecalsTo { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>>();

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public CNetworkViewOffsetVector ViewOffset { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CRenderComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CRenderComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CRenderComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CRenderComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CHitboxComponent")
        {
            var innerDecoder = CHitboxComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CHitboxComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_nRenderMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderMode>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderFX")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderFx>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderFX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrRender")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Render = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecRenderAttributes")
        {
            var innerDecoder = decoderSet.GetDecoder<EntityRenderAttribute>(field.FieldSerializerKey!.Value);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RenderAttributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.RenderAttributes.EnsureSize(index + 1);
                    var element = @this.RenderAttributes[index] ??= new EntityRenderAttribute();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoInterpolate")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoInterpolate = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Collision")
        {
            var innerDecoder = CCollisionProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Collision, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Glow")
        {
            var innerDecoder = CGlowProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Glow, path, ref buffer);
            };
        }
        if (field.VarName == "m_flGlowBackfaceMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowBackfaceMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nObjectCulling")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObjectCulling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAddDecal")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AddDecal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalForwardAxis")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalForwardAxis = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealBloodRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalHealBloodRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealHeightRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalHealHeightRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ConfigEntitiesToPropagateMaterialDecalsTo")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo[index] = element;
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecViewOffset")
        {
            var innerDecoder = CNetworkViewOffsetVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ViewOffset, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_pEntity"
// MNetworkIncludeByName "m_flSimulationTime"
// MNetworkIncludeByName "m_flCreateTime"
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkIncludeByName "m_fFlags"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
public partial class CBasePlayerController : CBaseEntity
{
    internal CBasePlayerController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkPriority 1
    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 TickBase { get; private set; }

    // MNetworkChangeCallback "OnPawnChanged"
    public CHandle<CBasePlayerPawn, DeadlockDemoParser> PawnHandle { get; private set; }
    public CBasePlayerPawn? Pawn => PawnHandle.Get(Demo);

    public bool KnownTeamMismatch { get; private set; }

    // MNetworkChangeCallback "OnConnectionStateChanged"
    public PlayerConnectedState Connected { get; private set; }

    // MNetworkChangeCallback "OnPlayerControllerNameChanged"
    public string PlayerName { get; private set; } = "";

    // MNetworkEncoder "fixed64"
    // MNetworkChangeCallback "OnSteamIDChanged"
    public UInt64 SteamID { get; private set; }

    public UInt32 DesiredFOV { get; private set; }

    internal new static SendNodeDecoder<CBasePlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nTickBase")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TickBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bKnownTeamMismatch")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KnownTeamMismatch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iConnected")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerConnectedState>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Connected = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszPlayerName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_steamID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SteamID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredFOV")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiredFOV = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkExcludeByUserGroup "FogController"
// MNetworkIncludeByUserGroup "Player"
// MNetworkIncludeByUserGroup "Water"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkOverride "m_vecX CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecY CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecZ CNetworkOriginCellCoordQuantizedVector"
// MNetworkExcludeByName "m_pWeaponServices"
// MNetworkExcludeByName "m_pItemServices"
// MNetworkExcludeByName "m_pAutoaimServices"
// MNetworkExcludeByName "m_pObserverServices"
// MNetworkExcludeByName "m_pWaterServices"
// MNetworkExcludeByName "m_pUseServices"
// MNetworkExcludeByName "m_pFlashlightServices"
// MNetworkExcludeByName "m_pMovementServices"
// MNetworkUserGroupProxy "CBasePlayerPawn"
public partial class CBasePlayerPawn : CBaseCombatCharacter
{
    internal CBasePlayerPawn(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CPlayer_WeaponServices? WeaponServices { get; private set; }

    public CPlayer_ItemServices? ItemServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CPlayer_AutoaimServices? AutoaimServices { get; private set; }

    public CPlayer_ObserverServices? ObserverServices { get; private set; }

    public CPlayer_WaterServices? WaterServices { get; private set; }

    public CPlayer_UseServices? UseServices { get; private set; }

    public CPlayer_FlashlightServices? FlashlightServices { get; private set; }

    public CPlayer_CameraServices? CameraServices { get; private set; }

    public CPlayer_MovementServices? MovementServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ViewAngleServerChange> ServerViewAngleChanges { get; private set; } = new NetworkedVector<ViewAngleServerChange>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 HideHUD { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Sky3DParams Skybox3d { get; private set; } = new();

    public GameTime DeathTime { get; private set; } = new();

    public CHandle<CBasePlayerController, DeadlockDemoParser> ControllerHandle { get; private set; }
    public CBasePlayerController? Controller => ControllerHandle.Get(Demo);

    public CHandle<CBasePlayerController, DeadlockDemoParser> DefaultControllerHandle { get; private set; }
    public CBasePlayerController? DefaultController => DefaultControllerHandle.Get(Demo);

    internal new static SendNodeDecoder<CBasePlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pWeaponServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WeaponServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.WeaponServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.WeaponServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pItemServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ItemServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ItemServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ItemServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pAutoaimServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_AutoaimServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.AutoaimServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.AutoaimServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pObserverServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ObserverServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ObserverServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ObserverServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pWaterServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WaterServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.WaterServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.WaterServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pUseServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_UseServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.UseServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.UseServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pFlashlightServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_FlashlightServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.FlashlightServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.FlashlightServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pCameraServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_CameraServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CameraServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CameraServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pMovementServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_MovementServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.MovementServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.MovementServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_ServerViewAngleChanges")
        {
            var innerDecoder = decoderSet.GetDecoder<ViewAngleServerChange>(field.FieldSerializerKey!.Value);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ServerViewAngleChanges.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.ServerViewAngleChanges.EnsureSize(index + 1);
                    var element = @this.ServerViewAngleChanges[index] ??= new ViewAngleServerChange();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHideHUD")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HideHUD = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skybox3d")
        {
            var innerDecoder = Sky3DParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Skybox3d, path, ref buffer);
            };
        }
        if (field.VarName == "m_flDeathTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeathTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ControllerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hDefaultController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultControllerHandle = decoder(ref buffer);
            };
        }
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkUserGroupProxy "CBasePlayerWeapon"
public partial class CBasePlayerWeapon : CBaseAnimGraph
{
    internal CBasePlayerWeapon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick NextPrimaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float NextPrimaryAttackTickRatio { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick NextSecondaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float NextSecondaryAttackTickRatio { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkPriority 32
    public Int32 Clip1 { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32 Clip2 { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32[] ReserveAmmo { get; private set; } = Array.Empty<Int32>();

    internal new static SendNodeDecoder<CBasePlayerWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nNextPrimaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextPrimaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextPrimaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextPrimaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextSecondaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextSecondaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextSecondaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextSecondaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClip1")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip1 = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_iClip2")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip2 = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_pReserveAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ReserveAmmo.Length == 0) @this.ReserveAmmo = new Int32[fixedArraySize];
                @this.ReserveAmmo[path[1]] = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseProp : CBaseAnimGraph
{
    internal CBaseProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
public partial class CBasePropDoor : CDynamicProp
{
    internal CBasePropDoor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public DoorState DoorState { get; private set; }

    public bool Locked { get; private set; }

    public bool NoNPCs { get; private set; }

    public Vector ClosedPosition { get; private set; }

    public QAngle ClosedAngles { get; private set; }

    public CHandle<CBasePropDoor, DeadlockDemoParser> MasterHandle { get; private set; }
    public CBasePropDoor? Master => MasterHandle.Get(Demo);

    internal new static SendNodeDecoder<CBasePropDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_eDoorState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<DoorState>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DoorState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLocked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Locked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoNPCs")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoNPCs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClosedPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClosedAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaster")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePropDoor, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MasterHandle = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePropDoor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseToggle : CBaseModelEntity
{
    internal CBaseToggle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseToggle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseToggle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseToggle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseToggle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseToggle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_spawnflags"
public partial class CBaseTrigger : CBaseToggle
{
    internal CBaseTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public bool ClientSidePredicted { get; private set; }

    internal new static SendNodeDecoder<CBaseTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSidePredicted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSidePredicted = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_nRenderFX"
// MNetworkIncludeByName "m_nRenderMode"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkOverride "m_clrRender "
public partial class CBeam : CBaseModelEntity
{
    internal CBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount 10
    // MNetworkMinValue -25
    // MNetworkMaxValue 25
    // MNetworkEncodeFlags 2
    public float FrameRate { get; private set; }

    public float HDRColorScale { get; private set; }

    public byte NumBeamEnts { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> BaseMaterial { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> HaloIndex { get; private set; }

    public BeamType BeamType { get; private set; }

    public UInt32 BeamFlags { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser>[] AttachEntity { get; private set; } = Array.Empty<CHandle<CBaseEntity, DeadlockDemoParser>>();

    public AttachmentHandle[] AttachIndex { get; private set; } = Array.Empty<AttachmentHandle>();

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 102.3
    // MNetworkEncodeFlags 2
    public float Width { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 102.3
    // MNetworkEncodeFlags 2
    public float EndWidth { get; private set; }

    public float FadeLength { get; private set; }

    public float HaloScale { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 1
    public float Amplitude { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    public float StartFrame { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float BeamSpeed { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    // MNetworkPriority 32
    public float Frame { get; private set; }

    public BeamClipStyle ClipStyle { get; private set; }

    public bool TurnedOff { get; private set; }

    // MNetworkEncoder "coord"
    public Vector EndPos { get; private set; }

    internal new static SendNodeDecoder<CBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFrameRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FrameRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumBeamEnts")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumBeamEnts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBaseMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BaseMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHaloIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HaloIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamType>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachEntity")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.AttachEntity.Length == 0) @this.AttachEntity = new CHandle<CBaseEntity, DeadlockDemoParser>[fixedArraySize];
                @this.AttachEntity[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachIndex")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.AttachIndex.Length == 0) @this.AttachIndex = new AttachmentHandle[fixedArraySize];
                @this.AttachIndex[path[1]] = AttachmentHandle.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_fWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEndWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFadeLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fHaloScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HaloScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAmplitude")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Amplitude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nClipStyle")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamClipStyle>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClipStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTurnedOff")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TurnedOff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndPos = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBodyComponent : CEntityComponent
{
    internal static SendNodeDecoder<CBodyComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CBodyComponent> factory)
    {
        if (serializerKey.Name == "CBodyComponent")
        {
            factory = () => new CBodyComponent();
            return decoderSet.GetDecoder<CBodyComponent>(serializerKey);
        }
        else if (serializerKey.Name == "CBodyComponentPoint")
        {
            factory = () => new CBodyComponentPoint();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentPoint>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentPoint);
                var downcastInstance = Unsafe.As<CBodyComponentPoint>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentSkeletonInstance")
        {
            factory = () => new CBodyComponentSkeletonInstance();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentSkeletonInstance>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentSkeletonInstance);
                var downcastInstance = Unsafe.As<CBodyComponentSkeletonInstance>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseAnimGraph")
        {
            factory = () => new CBodyComponentBaseAnimGraph();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseAnimGraph>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseAnimGraph);
                var downcastInstance = Unsafe.As<CBodyComponentBaseAnimGraph>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseModelEntity")
        {
            factory = () => new CBodyComponentBaseModelEntity();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseModelEntity>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseModelEntity);
                var downcastInstance = Unsafe.As<CBodyComponentBaseModelEntity>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CBodyComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CBodyComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseAnimGraph : CBodyComponentSkeletonInstance
{
    public CBaseAnimGraphController AnimationController { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animationController")
        {
            var innerDecoder = CBaseAnimGraphController.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AnimationController, path, ref buffer);
            };
        }
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseModelEntity : CBodyComponentSkeletonInstance
{
    internal new static SendNodeDecoder<CBodyComponentBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentPoint : CBodyComponent
{
    public CGameSceneNode SceneNode { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentPoint> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_sceneNode")
        {
            var innerDecoder = CGameSceneNode.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SceneNode, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentSkeletonInstance : CBodyComponent
{
    public CSkeletonInstance SkeletonInstance { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skeletonInstance")
        {
            var innerDecoder = CSkeletonInstance.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SkeletonInstance, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBreakable : CBaseModelEntity
{
    internal CBreakable(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CPropDataComponent"
    // MNetworkAlias "CPropDataComponent"
    // MNetworkTypeAlias "CPropDataComponent"
    public CPropDataComponent CPropDataComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CBreakable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CPropDataComponent")
        {
            var innerDecoder = CPropDataComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBreakable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CPropDataComponent, path, ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreakable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreakable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreakable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreakable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBreakableProp : CBaseProp
{
    internal CBreakableProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CPropDataComponent"
    // MNetworkAlias "CPropDataComponent"
    // MNetworkTypeAlias "CPropDataComponent"
    public CPropDataComponent CPropDataComponent { get; private set; } = new();

    public bool NoGhostCollision { get; private set; }

    internal new static SendNodeDecoder<CBreakableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CPropDataComponent")
        {
            var innerDecoder = CPropDataComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBreakableProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CPropDataComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_noGhostCollision")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBreakableProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoGhostCollision = decoder(ref buffer);
            };
        }
        return CBaseProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreakableProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreakableProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreakableProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreakableProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Afterburn : CCitadelBaseAbility
{
    internal CCitadel_Ability_Afterburn(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Afterburn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Afterburn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Afterburn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Afterburn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Afterburn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Astro_Rifle : CCitadelBaseAbility
{
    internal CCitadel_Ability_Astro_Rifle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Astro_Rifle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Rifle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Rifle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Rifle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Rifle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Astro_Shotgun_Toggle : CCitadelBaseAbility
{
    internal CCitadel_Ability_Astro_Shotgun_Toggle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Astro_Shotgun_Toggle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Shotgun_Toggle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Shotgun_Toggle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Shotgun_Toggle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Astro_Shotgun_Toggle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_BaseHeldItem : CCitadelBaseAbility
{
    internal CCitadel_Ability_BaseHeldItem(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_BaseHeldItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BaseHeldItem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BaseHeldItem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BaseHeldItem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BaseHeldItem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bebop_LaserBeam : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bebop_LaserBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool AirCast { get; private set; }

    public Vector BeamAimPos { get; private set; }

    public QAngle BeamAngles { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Bebop_LaserBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAirCast")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bebop_LaserBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirCast = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBeamAimPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bebop_LaserBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAimPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angBeamAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bebop_LaserBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAngles = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bebop_LaserBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bebop_LaserBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bebop_LaserBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bebop_LaserBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_BloodBomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_BloodBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_BloodBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BloodBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BloodBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BloodBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BloodBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bomber_Ability02 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bomber_Ability02(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Bomber_Ability02> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability02.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability02.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability02.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability02.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bomber_Ability03 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bomber_Ability03(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Bomber_Ability03> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability03.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability03.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability03.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_Ability03.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bomber_ULT : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bomber_ULT(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Bomber_ULT> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_ULT.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_ULT.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_ULT.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bomber_ULT.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bounce_Pad : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bounce_Pad(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public QAngle Facing { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Bounce_Pad> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_angFacing")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bounce_Pad @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Facing = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bounce_Pad.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bounce_Pad.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bounce_Pad.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bounce_Pad.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bull_Charge : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bull_Charge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public QAngle AnglesCharging { get; private set; }

    // MNetworkChangeCallback "OnChargingStateChanged"
    public GameTime ChargeStartTime { get; private set; } = new();

    public GameTime FastChargeEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool HitAPlayer { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Bull_Charge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_anglesCharging")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Charge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnglesCharging = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flChargeStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Charge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChargeStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFastChargeEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Charge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FastChargeEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHitAPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Charge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitAPlayer = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Charge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Charge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Charge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Charge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bull_Heal : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bull_Heal(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Bull_Heal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Heal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Heal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Heal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Heal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Bull_Leap : CCitadelBaseAbility
{
    internal CCitadel_Ability_Bull_Leap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float BoostYaw { get; private set; }

    public Vector CrashPosition { get; private set; }

    public Vector CrashDirection { get; private set; }

    // MNetworkChangeCallback "OnLeapStateChanged"
    public ELeapState LeapState { get; private set; }

    public GameTime StateEnterTime { get; private set; } = new();

    public CCitadelAutoScaledTime NextStateTime { get; private set; } = new();

    public CCitadelAutoScaledTime BoostEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Bull_Leap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flBoostYaw")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoostYaw = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCrashPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrashPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCrashDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrashDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eLeapState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ELeapState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LeapState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStateEnterTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StateEnterTime = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flNextStateTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.NextStateTime, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flBoostEndTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Bull_Leap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.BoostEndTime, path, ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Leap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Leap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Leap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Bull_Leap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_BulletFlurry : CCitadelBaseAbility
{
    internal CCitadel_Ability_BulletFlurry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_BulletFlurry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BulletFlurry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BulletFlurry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BulletFlurry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_BulletFlurry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Burrow : CCitadelBaseAbility
{
    internal CCitadel_Ability_Burrow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool InGround { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SpinEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Burrow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInGround")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Burrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InGround = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpinEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Burrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpinEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Burrow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Burrow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Burrow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Burrow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Cadence_Anthem : CCitadelBaseAbility
{
    internal CCitadel_Ability_Cadence_Anthem(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Cadence_Anthem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Anthem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Anthem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Anthem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Anthem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Cadence_Crescendo : CCitadelBaseAbility
{
    internal CCitadel_Ability_Cadence_Crescendo(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Cadence_Crescendo> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Crescendo.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Crescendo.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Crescendo.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Crescendo.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Cadence_GrandFinale : CCitadelBaseAbility
{
    internal CCitadel_Ability_Cadence_GrandFinale(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Cadence_GrandFinale> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_GrandFinale.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_GrandFinale.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_GrandFinale.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_GrandFinale.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Cadence_Lullaby : CCitadelBaseAbility
{
    internal CCitadel_Ability_Cadence_Lullaby(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Cadence_Lullaby> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Lullaby.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Lullaby.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Lullaby.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_Lullaby.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Cadence_SilenceContraptions : CCitadelBaseDashCastAbility
{
    internal CCitadel_Ability_Cadence_SilenceContraptions(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Cadence_SilenceContraptions> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseDashCastAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_SilenceContraptions.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_SilenceContraptions.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_SilenceContraptions.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Cadence_SilenceContraptions.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_CardToss : CCitadelBaseAbility
{
    internal CCitadel_Ability_CardToss(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool CardIsFlying { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_CardToss> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bCardIsFlying")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_CardToss @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CardIsFlying = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CardToss.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CardToss.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CardToss.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CardToss.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Charged_Bomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_Charged_Bomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Charged_Bomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Charged_Bomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Charged_Bomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Charged_Bomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Charged_Bomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ChargedShot : CCitadelBaseAbility
{
    internal CCitadel_Ability_ChargedShot(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ChargedShot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedShot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedShot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedShot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedShot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ChargedTackle : CCitadelBaseAbility
{
    internal CCitadel_Ability_ChargedTackle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Preparing { get; private set; }

    public bool Tackling { get; private set; }

    public GameTime TackleStartTime { get; private set; } = new();

    public GameTime PrepareStartTime { get; private set; } = new();

    public Vector TackleDir { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_ChargedTackle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bPreparing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ChargedTackle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Preparing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTackling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ChargedTackle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Tackling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTackleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ChargedTackle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TackleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPrepareStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ChargedTackle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrepareStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecTackleDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_ChargedTackle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TackleDir = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedTackle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedTackle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedTackle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChargedTackle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Chrono_KineticCarbine : CCitadelBaseAbility
{
    internal CCitadel_Ability_Chrono_KineticCarbine(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool WantsSlow { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime LatchedTimeScaleFracChangeTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float LatchedTimeScaleFrac { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SpeedBoostEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ShotTimeScaleEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Chrono_KineticCarbine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bWantsSlow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_KineticCarbine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WantsSlow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchedTimeScaleFracChangeTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_KineticCarbine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchedTimeScaleFracChangeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchedTimeScaleFrac")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_KineticCarbine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchedTimeScaleFrac = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpeedBoostEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_KineticCarbine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpeedBoostEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShotTimeScaleEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_KineticCarbine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShotTimeScaleEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_KineticCarbine.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_KineticCarbine.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_KineticCarbine.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_KineticCarbine.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Chrono_PulseGrenade : CCitadelBaseAbility
{
    internal CCitadel_Ability_Chrono_PulseGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Chrono_PulseGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_PulseGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_PulseGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_PulseGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_PulseGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Chrono_TimeWall : CCitadelBaseAbility
{
    internal CCitadel_Ability_Chrono_TimeWall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool AirCast { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Chrono_TimeWall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAirCast")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Chrono_TimeWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirCast = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_TimeWall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_TimeWall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_TimeWall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Chrono_TimeWall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ChronoSwap : CCitadelBaseAbility
{
    internal CCitadel_Ability_ChronoSwap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ChronoSwap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChronoSwap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChronoSwap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChronoSwap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ChronoSwap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Climb_Rope : CCitadelBaseAbility
{
    internal CCitadel_Ability_Climb_Rope(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CNetworkOriginQuantizedVector Top { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CNetworkOriginQuantizedVector Bottom { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool RequestStopClimbing { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool RequestJumpToRoof { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime LastMoveTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime MoveDownStartTime { get; private set; } = new();

    public EClimbRopeState ClimbState { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Climb_Rope> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vTop")
        {
            var innerDecoder = CNetworkOriginQuantizedVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Top, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vBottom")
        {
            var innerDecoder = CNetworkOriginQuantizedVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Bottom, path, ref buffer);
            };
        }
        if (field.VarName == "m_bRequestStopClimbing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RequestStopClimbing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRequestJumpToRoof")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RequestJumpToRoof = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastMoveTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastMoveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMoveDownStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveDownStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eClimbState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EClimbRopeState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Climb_Rope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClimbState = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Climb_Rope.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Climb_Rope.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Climb_Rope.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Climb_Rope.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Crackshot : CCitadelBaseAbility
{
    internal CCitadel_Ability_Crackshot(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Crackshot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Crackshot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Crackshot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Crackshot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Crackshot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_CrowdControl : CCitadelBaseAbility
{
    internal CCitadel_Ability_CrowdControl(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_CrowdControl> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CrowdControl.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CrowdControl.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CrowdControl.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_CrowdControl.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Dash : CCitadelBaseAbility
{
    internal CCitadel_Ability_Dash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float DashAngle { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 LastGroundDashTick { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime GroundDashCastTime { get; private set; } = new();

    public CCitadelAutoScaledTime GroundDashEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AirDashCastTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AirDashDragStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public sbyte ConsecutiveAirDashes { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public sbyte ConsecutiveDownDashes { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool DownAirDash { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Dash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDashAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLastGroundDashTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastGroundDashTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGroundDashCastTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GroundDashCastTime = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flGroundDashEndTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.GroundDashEndTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_flAirDashCastTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirDashCastTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAirDashDragStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirDashDragStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nConsecutiveAirDashes")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConsecutiveAirDashes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nConsecutiveDownDashes")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConsecutiveDownDashes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDownAirDash")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Dash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DownAirDash = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_DeathTax : CCitadelBaseAbility
{
    internal CCitadel_Ability_DeathTax(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_DeathTax> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_DeathTax.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_DeathTax.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_DeathTax.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_DeathTax.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Disruptive_Charge : CCitadelBaseAbility
{
    internal CCitadel_Ability_Disruptive_Charge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Disruptive_Charge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Disruptive_Charge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Disruptive_Charge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Disruptive_Charge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Disruptive_Charge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Dust_Storm : CCitadelBaseAbility
{
    internal CCitadel_Ability_Dust_Storm(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Dust_Storm> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dust_Storm.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dust_Storm.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dust_Storm.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Dust_Storm.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Empty : CCitadelBaseAbility
{
    internal CCitadel_Ability_Empty(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Empty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Empty.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Empty.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Empty.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Empty.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ExplosiveBarrel : CCitadelBaseAbility
{
    internal CCitadel_Ability_ExplosiveBarrel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ExplosiveBarrel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ExplosiveBarrel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ExplosiveBarrel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ExplosiveBarrel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ExplosiveBarrel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Fathom_Breach : CCitadelBaseAbility
{
    internal CCitadel_Ability_Fathom_Breach(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool InFlight { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Fathom_Breach> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInFlight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Fathom_Breach @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InFlight = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_Breach.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_Breach.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_Breach.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_Breach.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Fathom_ScaldingSpray : CCitadelBaseAbility
{
    internal CCitadel_Ability_Fathom_ScaldingSpray(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Fathom_ScaldingSpray> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_ScaldingSpray.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_ScaldingSpray.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_ScaldingSpray.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fathom_ScaldingSpray.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Fealty : CCitadelBaseAbility
{
    internal CCitadel_Ability_Fealty(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Fealty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fealty.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fealty.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fealty.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Fealty.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_FireBomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_FireBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CCitadelAutoScaledTime DetonateTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime StartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_FireBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flDetonateTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_FireBomb @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.DetonateTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FireBomb @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FireBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FireBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FireBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FireBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_FissureWall : CCitadelBaseAbility
{
    internal CCitadel_Ability_FissureWall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector StartPos { get; private set; }

    public Vector Position { get; private set; }

    public Vector InitialPosition { get; private set; }

    public GameTime CastTime { get; private set; } = new();

    public Vector Direction { get; private set; }

    public Vector Left { get; private set; }

    public float Length { get; private set; }

    public bool Traveling { get; private set; }

    public bool Preview { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_FissureWall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecStartPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Position = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecInitialPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_CastTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Direction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLeft")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Left = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Length")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Length = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTraveling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Traveling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPreview")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_FissureWall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Preview = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FissureWall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FissureWall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FissureWall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FissureWall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_FlameDash : CCitadelBaseAbility
{
    internal CCitadel_Ability_FlameDash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCitadelAutoScaledTime DashEndTime { get; private set; } = new();

    public bool IsSpeedBursting { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_FlameDash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flDashEndTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_FlameDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.DashEndTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsSpeedBursting")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlameDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsSpeedBursting = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlameDash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlameDash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlameDash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlameDash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_FlyingStrike : CCitadelBaseYamatoAbility
{
    internal CCitadel_Ability_FlyingStrike(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool ShadowFormCast { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkEncoder "coord"
    public Vector YamatoCastPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkEncoder "coord"
    public Vector TargetCastPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime FlyingToTargetStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime EndAttackTime { get; private set; } = new();

    public GameTime GrappleStartTime { get; private set; } = new();

    public GameTime GrappleArriveTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AttackLatchTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector AttackLatchPos { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetHandle { get; private set; }
    public CBaseEntity? Target => TargetHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime GrappleShotAttackTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkEncoder "coord"
    // MNetworkChangeCallback "OnPathChanged"
    public Vector[] Path { get; private set; } = Array.Empty<Vector>();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 PathIdx { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 PathSize { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float PathLength { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector FlyingInitialOffsetToPath { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float DistFlown { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_FlyingStrike> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShadowFormCast")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFormCast = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vYamatoCastPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.YamatoCastPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTargetCastPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetCastPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlyingToTargetStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlyingToTargetStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEndAttackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndAttackTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleArriveTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleArriveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackLatchTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackLatchTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAttackLatchPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackLatchPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleShotAttackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleShotAttackTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rgPath")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Path.Length == 0) @this.Path = new Vector[fixedArraySize];
                @this.Path[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPathIdx")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PathIdx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPathSize")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PathSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPathLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PathLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vFlyingInitialOffsetToPath")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlyingInitialOffsetToPath = decoder(ref buffer);
            };
        }
        if (field.VarName == "flDistFlown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_FlyingStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DistFlown = decoder(ref buffer);
            };
        }
        return CCitadelBaseYamatoAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlyingStrike.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlyingStrike.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlyingStrike.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_FlyingStrike.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GangActivity : CCitadelBaseAbility
{
    internal CCitadel_Ability_GangActivity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GangActivity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GangActivity_Cancel : CCitadelBaseAbility
{
    internal CCitadel_Ability_GangActivity_Cancel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GangActivity_Cancel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity_Cancel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity_Cancel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity_Cancel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GangActivity_Cancel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GenericPerson_1 : CCitadelBaseAbility
{
    internal CCitadel_Ability_GenericPerson_1(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GenericPerson_1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_1.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_1.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_1.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_1.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GenericPerson_2 : CCitadelBaseAbility
{
    internal CCitadel_Ability_GenericPerson_2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GenericPerson_2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GenericPerson_3 : CCitadelBaseAbility
{
    internal CCitadel_Ability_GenericPerson_3(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GenericPerson_3> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_3.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_3.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_3.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_3.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GenericPerson_4 : CCitadelBaseAbility
{
    internal CCitadel_Ability_GenericPerson_4(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GenericPerson_4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_4.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_4.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_4.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GenericPerson_4.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Ghost_BloodShards : CCitadelBaseAbility
{
    internal CCitadel_Ability_Ghost_BloodShards(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Ghost_BloodShards> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Ghost_BloodShards.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Ghost_BloodShards.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Ghost_BloodShards.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Ghost_BloodShards.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GoldenIdol : CCitadel_Ability_BaseHeldItem
{
    internal CCitadel_Ability_GoldenIdol(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_GoldenIdol> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_BaseHeldItem.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GoldenIdol.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GoldenIdol.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GoldenIdol.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GoldenIdol.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GooBowlingBall : CCitadelBaseAbility
{
    internal CCitadel_Ability_GooBowlingBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkChangeCallback "OnIsRollingChanged"
    public bool IsRolling { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CCitadelViscousBall, DeadlockDemoParser> BallHandle { get; private set; }
    public CCitadelViscousBall? Ball => BallHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public EViscousBowlingBallState RollingState { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextStateTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextWallCheck { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime RollStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime WallExitTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector WallExitVelocity { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_GooBowlingBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsRolling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsRolling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBall")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelViscousBall, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BallHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eRollingState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EViscousBowlingBallState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RollingState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextStateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextStateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextWallCheck")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextWallCheck = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRollStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RollStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWallExitTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WallExitTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecWallExitVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooBowlingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WallExitVelocity = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooBowlingBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooBowlingBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooBowlingBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooBowlingBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GooGrenade : CCitadelBaseAbility
{
    internal CCitadel_Ability_GooGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>> PuddleModifiers { get; private set; } = new NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>>();

    internal new static SendNodeDecoder<CCitadel_Ability_GooGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecPuddleModifiers")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_GooGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PuddleModifiers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PuddleModifiers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PuddleModifiers[index] = element;
                }
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GooGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Gravity_Lasso : CCitadelBaseAbility
{
    internal CCitadel_Ability_Gravity_Lasso(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Gravity_Lasso> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Gravity_Lasso.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Gravity_Lasso.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Gravity_Lasso.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Gravity_Lasso.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_GuidedArrow : CCitadelBaseAbility
{
    internal CCitadel_Ability_GuidedArrow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> ProjectileHandle { get; private set; }
    public CBaseEntity? Projectile => ProjectileHandle.Get(Demo);

    public float ArrowSpeed { get; private set; }

    public GameTime SnapAnglesBackTime { get; private set; } = new();

    public Int32 BonusTechPower { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_GuidedArrow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_GuidedArrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flArrowSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_GuidedArrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ArrowSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSnapAnglesBackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_GuidedArrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapAnglesBackTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBonusTechPower")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_GuidedArrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BonusTechPower = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GuidedArrow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GuidedArrow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GuidedArrow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_GuidedArrow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HatTrick : CCitadelBaseAbility
{
    internal CCitadel_Ability_HatTrick(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCitadelProjectile, DeadlockDemoParser> ProjectileHandle { get; private set; }
    public CCitadelProjectile? Projectile => ProjectileHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Ability_HatTrick> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelProjectile, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_HatTrick @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HatTrick.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HatTrick.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HatTrick.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HatTrick.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Haze_StackingDamage : CCitadelBaseAbility
{
    internal CCitadel_Ability_Haze_StackingDamage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Haze_StackingDamage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Haze_StackingDamage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Haze_StackingDamage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Haze_StackingDamage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Haze_StackingDamage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HealingSlash : CCitadelBaseYamatoAbility
{
    internal CCitadel_Ability_HealingSlash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_HealingSlash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseYamatoAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealingSlash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealingSlash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealingSlash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealingSlash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HealthSwap : CCitadelBaseAbility
{
    internal CCitadel_Ability_HealthSwap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime PostCastHoldEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_HealthSwap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flPostCastHoldEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HealthSwap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostCastHoldEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealthSwap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealthSwap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealthSwap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HealthSwap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HighAlert : CCitadelBaseAbility
{
    internal CCitadel_Ability_HighAlert(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_HighAlert> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HighAlert.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HighAlert.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HighAlert.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HighAlert.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HoldMelee : CCitadel_Ability_Melee_Base
{
    internal CCitadel_Ability_HoldMelee(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ParryWindowEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextParryTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime StateStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DashStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public EMeleeHold_AttackState CurrentAttackState { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public EMeleeHold_AttackType CurrentAttackType { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector AirDashDir { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool AttackStartedWhileSliding { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_HoldMelee> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flParryWindowEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParryWindowEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextParryTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextParryTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStateStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StateStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDashStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eCurrentAttackState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EMeleeHold_AttackState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentAttackState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eCurrentAttackType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EMeleeHold_AttackType>(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentAttackType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAirDashDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirDashDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAttackStartedWhileSliding")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_HoldMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackStartedWhileSliding = decoder(ref buffer);
            };
        }
        return CCitadel_Ability_Melee_Base.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HoldMelee.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HoldMelee.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HoldMelee.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HoldMelee.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Hook : CCitadelBaseAbility
{
    internal CCitadel_Ability_Hook(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "HookVictimChanged"
    public CHandle<CBaseEntity, DeadlockDemoParser> HookVictimHandle { get; private set; }
    public CBaseEntity? HookVictim => HookVictimHandle.Get(Demo);

    public CHandle<CBaseEntity, DeadlockDemoParser> ProjectileHandle { get; private set; }
    public CBaseEntity? Projectile => ProjectileHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector HookTargetStartPos { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Hook> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hHookVictim")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Hook @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HookVictimHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Hook @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecHookTargetStartPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Hook @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HookTargetStartPos = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hook.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hook.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hook.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hook.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Hornet_Chain : CCitadelBaseAbility
{
    internal CCitadel_Ability_Hornet_Chain(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Hornet_Chain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Chain.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Chain.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Chain.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Chain.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Hornet_Snipe : CCitadelBaseAbility
{
    internal CCitadel_Ability_Hornet_Snipe(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ScopeStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Hornet_Snipe> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScopeStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Hornet_Snipe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScopeStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Snipe.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Snipe.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Snipe.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Hornet_Snipe.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HornetLeap : CCitadelBaseAbility
{
    internal CCitadel_Ability_HornetLeap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Leaping { get; private set; }

    public GameTime LeapStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_HornetLeap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bLeaping")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_HornetLeap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Leaping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLeapStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_HornetLeap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LeapStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetLeap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetLeap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetLeap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetLeap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HornetMark : CCitadelBaseAbility
{
    internal CCitadel_Ability_HornetMark(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_HornetMark> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetMark.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetMark.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetMark.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetMark.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_HornetSting : CCitadelBaseAbility
{
    internal CCitadel_Ability_HornetSting(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_HornetSting> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetSting.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetSting.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetSting.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_HornetSting.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_IceBeam : CCitadelBaseAbility
{
    internal CCitadel_Ability_IceBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector BeamAimPos { get; private set; }

    public QAngle BeamAngles { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_IceBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vBeamAimPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_IceBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAimPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angBeamAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_IceBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAngles = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_IceDome : CCitadelBaseAbility
{
    internal CCitadel_Ability_IceDome(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DomeStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DomeEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_IceDome> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDomeStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_IceDome @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DomeStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDomeEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_IceDome @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DomeEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceDome.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceDome.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceDome.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceDome.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_IceGrenade : CCitadelBaseAbility
{
    internal CCitadel_Ability_IceGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_IceGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IceGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_IcePath : CCitadelBaseAbility
{
    internal CCitadel_Ability_IcePath(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool IcePathing { get; private set; }

    public QAngle LastAngles { get; private set; }

    public Vector LastVelocity { get; private set; }

    public bool FirstMovementTick { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_IcePath> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIcePathing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_IcePath @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IcePathing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_qLastAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_IcePath @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vLastVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_IcePath @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFirstMovementTick")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_IcePath @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FirstMovementTick = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IcePath.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IcePath.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IcePath.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IcePath.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ImmobilizeTrap : CCitadelBaseAbility
{
    internal CCitadel_Ability_ImmobilizeTrap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ImmobilizeTrap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ImmobilizeTrap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ImmobilizeTrap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ImmobilizeTrap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ImmobilizeTrap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_IncendiaryProjectile : CCitadelBaseAbility
{
    internal CCitadel_Ability_IncendiaryProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_IncendiaryProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IncendiaryProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IncendiaryProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IncendiaryProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_IncendiaryProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_InfinitySlash : CCitadelBaseYamatoAbility
{
    internal CCitadel_Ability_InfinitySlash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ExplodeEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime BuffEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_InfinitySlash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flExplodeEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_InfinitySlash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplodeEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBuffEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_InfinitySlash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BuffEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseYamatoAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_InfinitySlash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_InfinitySlash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_InfinitySlash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_InfinitySlash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Intimidate : CCitadelBaseAbility
{
    internal CCitadel_Ability_Intimidate(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Intimidate> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Intimidate.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Intimidate.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Intimidate.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Intimidate.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Jump : CCitadelBaseAbility
{
    internal CCitadel_Ability_Jump(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCitadelAutoScaledTime GroundDashJumpStartTime { get; private set; } = new();

    public CCitadelAutoScaledTime GroundDashJumpEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Jumped { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool CanDashJump { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 DesiredAirJumpCount { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 ExecutedAirJumpCount { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool InSlideJump { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public sbyte ConsecutiveAirJumps { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public sbyte ConsecutiveWallJumps { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Jump> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flGroundDashJumpStartTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.GroundDashJumpStartTime, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flGroundDashJumpEndTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.GroundDashJumpEndTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_bJumped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Jumped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanDashJump")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanDashJump = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDesiredAirJumpCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiredAirJumpCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExecutedAirJumpCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExecutedAirJumpCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInSlideJump")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InSlideJump = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nConsecutiveAirJumps")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConsecutiveAirJumps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nConsecutiveWallJumps")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadel_Ability_Jump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConsecutiveWallJumps = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Jump.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Jump.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Jump.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Jump.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Kobun : CCitadelBaseAbility
{
    internal CCitadel_Ability_Kobun(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Kobun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Kobun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Kobun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Kobun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Kobun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Lash : CCitadelBaseAbility
{
    internal CCitadel_Ability_Lash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Lash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Lash_Flog : CCitadelBaseAbility
{
    internal CCitadel_Ability_Lash_Flog(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Lash_Flog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Flog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Flog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Flog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Flog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Lash_Ultimate : CCitadelBaseLockonAbility
{
    internal CCitadel_Ability_Lash_Ultimate(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public ELashGrappleState EGrappleState { get; private set; }

    public GameTime StateEnterTime { get; private set; } = new();

    public GameTime NextStateTime { get; private set; } = new();

    public GameTime BoostEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Lash_Ultimate> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_EGrappleState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ELashGrappleState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Lash_Ultimate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EGrappleState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStateEnterTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Lash_Ultimate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StateEnterTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextStateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Lash_Ultimate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextStateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBoostEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Lash_Ultimate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoostEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseLockonAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Ultimate.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Ultimate.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Ultimate.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Lash_Ultimate.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_LashDownStrike : CCitadelBaseAbility
{
    internal CCitadel_Ability_LashDownStrike(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector StrikeVel { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float StartHeight { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_LashDownStrike> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vStrikeVel")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_LashDownStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StrikeVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_LashDownStrike @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartHeight = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LashDownStrike.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LashDownStrike.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LashDownStrike.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LashDownStrike.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_LifeDrain : CCitadelBaseAbility
{
    internal CCitadel_Ability_LifeDrain(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DrainLifeStopTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_LifeDrain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_tDrainLifeStopTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_LifeDrain @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DrainLifeStopTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LifeDrain.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LifeDrain.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LifeDrain.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LifeDrain.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_LightningBall : CCitadelBaseAbility
{
    internal CCitadel_Ability_LightningBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_LightningBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LightningBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LightningBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LightningBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LightningBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_LockDown : CCitadelBaseAbility
{
    internal CCitadel_Ability_LockDown(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_LockDown> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LockDown.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LockDown.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LockDown.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_LockDown.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_MageWalk : CCitadelBaseAbility
{
    internal CCitadel_Ability_MageWalk(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_MageWalk> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MageWalk.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MageWalk.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MageWalk.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MageWalk.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Magician_AnimalCurse : CCitadelBaseAbility
{
    internal CCitadel_Ability_Magician_AnimalCurse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Magician_AnimalCurse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_AnimalCurse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_AnimalCurse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_AnimalCurse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_AnimalCurse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Magician_MagicBolt : CCitadelBaseAbility
{
    internal CCitadel_Ability_Magician_MagicBolt(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Magician_MagicBolt> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_MagicBolt.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_MagicBolt.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_MagicBolt.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_MagicBolt.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Magician_ShadowClone : CCitadelBaseAbility
{
    internal CCitadel_Ability_Magician_ShadowClone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Magician_ShadowClone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_ShadowClone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_ShadowClone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_ShadowClone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Magician_ShadowClone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Mantle : CCitadelBaseAbility
{
    internal CCitadel_Ability_Mantle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float VertOffset { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float HorizGap { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector StartPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector TargetPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public QAngle Facing { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 MantleTypeIndex { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime StartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Mantle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flVertOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VertOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHorizGap")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HorizGap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vStartPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTargetPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angFacing")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Facing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMantleTypeIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MantleTypeIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mantle @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mantle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mantle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mantle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mantle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_MedicHeal : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_MedicHeal(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_MedicHeal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MedicHeal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MedicHeal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MedicHeal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MedicHeal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Melee_Base : CCitadelBaseAbility
{
    internal CCitadel_Ability_Melee_Base(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool UsingThisMelee { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool UsingMeleeTagActive { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool HitWithThisAttack { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime LastActivateTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextAttackAllowedTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AttackTriggeredTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Melee_Base> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bUsingThisMelee")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UsingThisMelee = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUsingMeleeTagActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UsingMeleeTagActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHitWithThisAttack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitWithThisAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastActivateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastActivateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextAttackAllowedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextAttackAllowedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackTriggeredTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Melee_Base @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackTriggeredTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Melee_Base.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Melee_Base.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Melee_Base.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Melee_Base.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_MeleeParry : CCitadelBaseAbility
{
    internal CCitadel_Ability_MeleeParry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime ParryStartTime { get; private set; } = new();

    public bool AttackParried { get; private set; }

    public GameTime ParrySuccessTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_MeleeParry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flParryStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_MeleeParry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParryStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAttackParried")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_MeleeParry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackParried = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flParrySuccessTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_MeleeParry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParrySuccessTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MeleeParry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MeleeParry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MeleeParry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MeleeParry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Mirage_FireBeetles : CCitadelBaseAbility
{
    internal CCitadel_Ability_Mirage_FireBeetles(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime CastStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Mirage_FireBeetles> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flCastStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mirage_FireBeetles @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_FireBeetles.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_FireBeetles.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_FireBeetles.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_FireBeetles.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Mirage_Teleport : CCitadelBaseAbility
{
    internal CCitadel_Ability_Mirage_Teleport(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> DummyForCameraHandle { get; private set; }
    public CBaseEntity? DummyForCamera => DummyForCameraHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Ability_Mirage_Teleport> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hDummyForCamera")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Mirage_Teleport @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DummyForCameraHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_Teleport.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_Teleport.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_Teleport.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Mirage_Teleport.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_MobileResupply : CCitadelBaseAbility
{
    internal CCitadel_Ability_MobileResupply(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_MobileResupply> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MobileResupply.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MobileResupply.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MobileResupply.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_MobileResupply.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Nano_Pounce : CCitadelBaseAbility
{
    internal CCitadel_Ability_Nano_Pounce(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Active { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> CurrentTargetHandle { get; private set; }
    public CBaseEntity? CurrentTarget => CurrentTargetHandle.Get(Demo);

    public CHandle<CBaseEntity, DeadlockDemoParser> LastCastTargetHandle { get; private set; }
    public CBaseEntity? LastCastTarget => LastCastTargetHandle.Get(Demo);

    public Vector StartPosition { get; private set; }

    public Vector DeparturePosition { get; private set; }

    public CCitadelAutoScaledTime DepartureTime { get; private set; } = new();

    public CCitadelAutoScaledTime ArrivalTime { get; private set; } = new();

    public bool IsFirstCastCompleted { get; private set; }

    public GameTime DoubleCastWindow { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Nano_Pounce> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCurrentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLastCastTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastCastTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vStartPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDeparturePosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeparturePosition = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flDepartureTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.DepartureTime, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flArrivalTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ArrivalTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsFirstCastCompleted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsFirstCastCompleted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_tDoubleCastWindow")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DoubleCastWindow = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Nano_Pounce_Instant : CCitadelBaseAbility
{
    internal CCitadel_Ability_Nano_Pounce_Instant(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Active { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> CurrentTargetHandle { get; private set; }
    public CBaseEntity? CurrentTarget => CurrentTargetHandle.Get(Demo);

    public CHandle<CBaseEntity, DeadlockDemoParser> LastCastTargetHandle { get; private set; }
    public CBaseEntity? LastCastTarget => LastCastTargetHandle.Get(Demo);

    public Vector StartPosition { get; private set; }

    public Vector DeparturePosition { get; private set; }

    public CCitadelAutoScaledTime DepartureTime { get; private set; } = new();

    public CCitadelAutoScaledTime ArrivalTime { get; private set; } = new();

    public bool IsFirstCastCompleted { get; private set; }

    public GameTime DoubleCastWindow { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Nano_Pounce_Instant> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCurrentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLastCastTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastCastTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vStartPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDeparturePosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeparturePosition = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flDepartureTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.DepartureTime, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flArrivalTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ArrivalTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsFirstCastCompleted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsFirstCastCompleted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_tDoubleCastWindow")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Nano_Pounce_Instant @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DoubleCastWindow = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce_Instant.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce_Instant.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce_Instant.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Pounce_Instant.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Nano_Shadow : CCitadelBaseAbility
{
    internal CCitadel_Ability_Nano_Shadow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Nano_Shadow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Shadow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Shadow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Shadow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nano_Shadow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Nikuman : CCitadelBaseAbility
{
    internal CCitadel_Ability_Nikuman(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Nikuman> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nikuman.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nikuman.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nikuman.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Nikuman.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PassiveBeefy : CCitadelBaseAbility
{
    internal CCitadel_Ability_PassiveBeefy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PassiveBeefy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PassiveBeefy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PassiveBeefy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PassiveBeefy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PassiveBeefy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Perched_Predator : CCitadelBaseAbility
{
    internal CCitadel_Ability_Perched_Predator(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> ActiveProjectileHandle { get; private set; }
    public CBaseEntity? ActiveProjectile => ActiveProjectileHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Ability_Perched_Predator> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActiveProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Perched_Predator @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveProjectileHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Perched_Predator.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Perched_Predator.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Perched_Predator.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Perched_Predator.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PoisonBullets : CCitadelBaseAbility
{
    internal CCitadel_Ability_PoisonBullets(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PoisonBullets> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PoisonBullets.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PoisonBullets.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PoisonBullets.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PoisonBullets.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PowerJump : CCitadelBaseAbility
{
    internal CCitadel_Ability_PowerJump(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool AirRaiding { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_PowerJump> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAirRaiding")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PowerJump @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirRaiding = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerJump.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerJump.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerJump.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerJump.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PowerSlash : CCitadelBaseYamatoAbility
{
    internal CCitadel_Ability_PowerSlash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 PowerLevel { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_PowerSlash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nPowerLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_PowerSlash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PowerLevel = decoder(ref buffer);
            };
        }
        return CCitadelBaseYamatoAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSlash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSlash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSlash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSlash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PowerSurge : CCitadelBaseAbility
{
    internal CCitadel_Ability_PowerSurge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PowerSurge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSurge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSurge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSurge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PowerSurge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PrimaryWeapon : CCitadelBaseAbility
{
    internal CCitadel_Ability_PrimaryWeapon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextPrimaryAttack { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkSerializer "minusone"
    // MNetworkPriority 32
    public Int32 Clip { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkSerializer "minusone"
    // MNetworkPriority 32
    public Int32 BonusClip { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float SpreadPenalty { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ZoomTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ZoomOutTime { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public sbyte SpreadIndex { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int16 ShotRecoilIndex { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTime NextShotRecoilRecoveryTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool IsZoomed { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public byte BurstShotsRemaining { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public UInt32 ShotNumber { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool InReload { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool SingleShotReloadFirstBullet { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTime ReloadQueuedStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime ReloadAvailableTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool CanActiveReload { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime LastAttackTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextAttackDelayStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime NextAttackDelayEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float AttackDelayPauseTotalTime { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AttackDelayPauseEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public ENextAttackDelayReason NextAttackDelayReason { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool InputPressedWhileSelected { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public EFireMode ActiveFireMode { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_PrimaryWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flNextPrimaryAttack")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextPrimaryAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClip")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_iBonusClip")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BonusClip = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flSpreadPenalty")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpreadPenalty = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZoomTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZoomTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZoomOutTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZoomOutTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSpreadIndex")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpreadIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShotRecoilIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShotRecoilIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextShotRecoilRecoveryTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextShotRecoilRecoveryTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsZoomed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsZoomed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBurstShotsRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BurstShotsRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShotNumber")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShotNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInReload")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InReload = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSingleShotReloadFirstBullet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SingleShotReloadFirstBullet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_reloadQueuedStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReloadQueuedStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flReloadAvailableTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReloadAvailableTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanActiveReload")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanActiveReload = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastAttackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastAttackTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextAttackDelayStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextAttackDelayStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextAttackDelayEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextAttackDelayEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackDelayPauseTotalTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackDelayPauseTotalTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackDelayPauseEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackDelayPauseEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eNextAttackDelayReason")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ENextAttackDelayReason>(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextAttackDelayReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInputPressedWhileSelected")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InputPressedWhileSelected = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eActiveFireMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EFireMode>(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveFireMode = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PrimaryWeapon_BeamWeapon : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_PrimaryWeapon_BeamWeapon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PrimaryWeapon_BeamWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_BeamWeapon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_BeamWeapon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_BeamWeapon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_BeamWeapon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PrimaryWeapon_Bebop : CCitadel_Ability_PrimaryWeapon_BeamWeapon
{
    internal CCitadel_Ability_PrimaryWeapon_Bebop(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime StartWindUpTime { get; private set; } = new();

    public GameTime StartFiringTime { get; private set; } = new();

    public bool Firing { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_PrimaryWeapon_Bebop> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flStartWindUpTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon_Bebop @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartWindUpTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartFiringTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon_Bebop @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartFiringTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFiring")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_PrimaryWeapon_Bebop @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Firing = decoder(ref buffer);
            };
        }
        return CCitadel_Ability_PrimaryWeapon_BeamWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Bebop.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Bebop.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Bebop.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Bebop.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PrimaryWeapon_Cadence : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_PrimaryWeapon_Cadence(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PrimaryWeapon_Cadence> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Cadence.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Cadence.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Cadence.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Cadence.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PrimaryWeapon_Empty : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_PrimaryWeapon_Empty(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PrimaryWeapon_Empty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Empty.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Empty.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Empty.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PrimaryWeapon_Empty.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ProjectMind : CCitadelBaseAbility
{
    internal CCitadel_Ability_ProjectMind(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ProjectMind> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProjectMind.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProjectMind.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProjectMind.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProjectMind.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Protection_Racket : CCitadelBaseAbility
{
    internal CCitadel_Ability_Protection_Racket(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Protection_Racket> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Protection_Racket.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Protection_Racket.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Protection_Racket.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Protection_Racket.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ProximityRitual : CCitadelBaseAbility
{
    internal CCitadel_Ability_ProximityRitual(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public ECatStatueState State { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> StatueHandle { get; private set; }
    public CBaseEntity? Statue => StatueHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Ability_ProximityRitual> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_eState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ECatStatueState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ProximityRitual @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.State = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hStatue")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ProximityRitual @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StatueHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProximityRitual.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProximityRitual.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProximityRitual.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ProximityRitual.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PsychicDagger : CCitadelBaseAbility
{
    internal CCitadel_Ability_PsychicDagger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PsychicDagger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicDagger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicDagger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicDagger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicDagger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PsychicLift : CCitadelBaseAbility
{
    internal CCitadel_Ability_PsychicLift(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_PsychicLift> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicLift.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicLift.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicLift.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicLift.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_PsychicPulse : CCitadelBaseAbility
{
    internal CCitadel_Ability_PsychicPulse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>> PulseTargets { get; private set; } = new NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>>();

    internal new static SendNodeDecoder<CCitadel_Ability_PsychicPulse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecPulseTargets")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_PsychicPulse @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PulseTargets.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PulseTargets.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PulseTargets[index] = element;
                }
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicPulse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicPulse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicPulse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_PsychicPulse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Puddle : CCitadelBaseAbility
{
    internal CCitadel_Ability_Puddle(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Puddle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Puddle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Puddle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Puddle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Puddle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_RapidFire : CCitadelBaseAbility
{
    internal CCitadel_Ability_RapidFire(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_RapidFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RapidFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RapidFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RapidFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RapidFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_RestorativeGoo : CCitadelBaseAbility
{
    internal CCitadel_Ability_RestorativeGoo(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SelfCastEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_RestorativeGoo> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flSelfCastEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_RestorativeGoo @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelfCastEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RestorativeGoo.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RestorativeGoo.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RestorativeGoo.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RestorativeGoo.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_RiotProtocol : CCitadelBaseAbility
{
    internal CCitadel_Ability_RiotProtocol(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Active { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_RiotProtocol> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_RiotProtocol @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RiotProtocol.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RiotProtocol.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RiotProtocol.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RiotProtocol.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_RocketBarrage : CCitadelBaseAbility
{
    internal CCitadel_Ability_RocketBarrage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_RocketBarrage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketBarrage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketBarrage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketBarrage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketBarrage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_RocketLauncher : CCitadelBaseAbility
{
    internal CCitadel_Ability_RocketLauncher(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_RocketLauncher> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketLauncher.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketLauncher.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketLauncher.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_RocketLauncher.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Rolling_FireBall : CCitadelBaseAbility
{
    internal CCitadel_Ability_Rolling_FireBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Rolling_FireBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rolling_FireBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rolling_FireBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rolling_FireBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rolling_FireBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Running_Decoy : CCitadelBaseAbility
{
    internal CCitadel_Ability_Running_Decoy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Running_Decoy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Running_Decoy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Running_Decoy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Running_Decoy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Running_Decoy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Rutger_Pulse : CCitadelBaseAbility
{
    internal CCitadel_Ability_Rutger_Pulse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Rutger_Pulse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rutger_Pulse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rutger_Pulse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rutger_Pulse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Rutger_Pulse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SelfVacuum : CCitadelBaseAbility
{
    internal CCitadel_Ability_SelfVacuum(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SelfVacuum> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SelfVacuum.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SelfVacuum.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SelfVacuum.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SelfVacuum.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SettingSun : CCitadelBaseAbility
{
    internal CCitadel_Ability_SettingSun(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SettingSun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SettingSun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SettingSun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SettingSun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SettingSun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shakedown_Target : CCitadelBaseAbility
{
    internal CCitadel_Ability_Shakedown_Target(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Shakedown_Target> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shakedown_Target.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shakedown_Target.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shakedown_Target.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shakedown_Target.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shield : CCitadel_Item
{
    internal CCitadel_Ability_Shield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Shield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShieldedSentry : CCitadelBaseAbility
{
    internal CCitadel_Ability_ShieldedSentry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShieldedSentry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldedSentry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldedSentry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldedSentry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldedSentry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShieldGuy_Ability01 : CCitadelBaseAbility
{
    internal CCitadel_Ability_ShieldGuy_Ability01(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShieldGuy_Ability01> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability01.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability01.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability01.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability01.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShieldGuy_Ability02 : CCitadelBaseAbility
{
    internal CCitadel_Ability_ShieldGuy_Ability02(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShieldGuy_Ability02> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability02.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability02.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability02.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability02.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShieldGuy_Ability03 : CCitadelBaseAbility
{
    internal CCitadel_Ability_ShieldGuy_Ability03(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShieldGuy_Ability03> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability03.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability03.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability03.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability03.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShieldGuy_Ability04 : CCitadelBaseAbility
{
    internal CCitadel_Ability_ShieldGuy_Ability04(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShieldGuy_Ability04> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability04.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability04.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability04.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShieldGuy_Ability04.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shiv_Defer_Damage : CCitadelBaseShivAbility
{
    internal CCitadel_Ability_Shiv_Defer_Damage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float TotalPendingDamage { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Shiv_Defer_Damage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flTotalPendingDamage")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_Defer_Damage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalPendingDamage = decoder(ref buffer);
            };
        }
        return CCitadelBaseShivAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_Defer_Damage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_Defer_Damage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_Defer_Damage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_Defer_Damage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shiv_KillingBlow : CCitadelBaseShivAbility
{
    internal CCitadel_Ability_Shiv_KillingBlow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Active { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> CurrentTargetHandle { get; private set; }
    public CBaseEntity? CurrentTarget => CurrentTargetHandle.Get(Demo);

    public Vector StartPosition { get; private set; }

    public Vector DeparturePosition { get; private set; }

    public CCitadelAutoScaledTime DepartureTime { get; private set; } = new();

    public CCitadelAutoScaledTime ArrivalTime { get; private set; } = new();

    public GameTime DrainSuppressEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Shiv_KillingBlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCurrentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vStartPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDeparturePosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeparturePosition = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flDepartureTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.DepartureTime, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flArrivalTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ArrivalTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_flDrainSuppressEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Shiv_KillingBlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DrainSuppressEndTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseShivAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_KillingBlow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_KillingBlow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_KillingBlow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shiv_KillingBlow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShivDagger : CCitadelBaseShivAbility
{
    internal CCitadel_Ability_ShivDagger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShivDagger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseShivAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDagger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDagger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDagger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDagger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShivDash : CCitadelBaseShivAbility
{
    internal CCitadel_Ability_ShivDash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector StartPosition { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector DashDirection { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool IsDashing { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool StartedInAir { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_ShivDash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vStartPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_ShivDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDashDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_ShivDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsDashing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ShivDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsDashing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartedInAir")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ShivDash @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartedInAir = decoder(ref buffer);
            };
        }
        return CCitadelBaseShivAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivDash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ShivWeapon : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_ShivWeapon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ShivWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivWeapon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivWeapon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivWeapon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ShivWeapon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shotgun_Astro : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_Shotgun_Astro(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Shotgun_Astro> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Shotgun_Astro_Backwards : CCitadel_Ability_PrimaryWeapon
{
    internal CCitadel_Ability_Shotgun_Astro_Backwards(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Shotgun_Astro_Backwards> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro_Backwards.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro_Backwards.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro_Backwards.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Shotgun_Astro_Backwards.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SleepBomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_SleepBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SleepBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SleepDagger : CCitadelBaseAbility
{
    internal CCitadel_Ability_SleepDagger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SleepDagger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepDagger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepDagger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepDagger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SleepDagger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Slide : CCitadelBaseAbility
{
    internal CCitadel_Ability_Slide(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCitadelAutoScaledTime GroundDashSlideTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SlowGetupStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool ShouldTriggerSlowGetup { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool WantsSlide { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool AirborneWhenDuckPressed { get; private set; }

    public bool IsSliding { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float SpeedAdjust { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DuckPressedTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SlideChangeTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SlidingOnFlatStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Int32 JumpsThisSlideSession { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime OnGroundStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DashSlideStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Slide> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_flGroundDashSlideTime")
        {
            var innerDecoder = CCitadelAutoScaledTime.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.GroundDashSlideTime, path, ref buffer);
            };
        }
        if (field.VarName == "m_flSlowGetupStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SlowGetupStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bShouldTriggerSlowGetup")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShouldTriggerSlowGetup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWantsSlide")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WantsSlide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAirborneWhenDuckPressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirborneWhenDuckPressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsSliding")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsSliding = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpeedAdjust")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpeedAdjust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDuckPressedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckPressedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlideChangeTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SlideChangeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlidingOnFlatStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SlidingOnFlatStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJumpsThisSlideSession")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpsThisSlideSession = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOnGroundStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OnGroundStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDashSlideStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Slide @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashSlideStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Slide.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Slide.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Slide.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Slide.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SmokeBomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_SmokeBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SmokeBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SmokeBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SmokeBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SmokeBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SmokeBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SnakeDash : CCitadelBaseAbility
{
    internal CCitadel_Ability_SnakeDash(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SnakeDash> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SnakeDash.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SnakeDash.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SnakeDash.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SnakeDash.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Spinning_Blade : CCitadelBaseAbility
{
    internal CCitadel_Ability_Spinning_Blade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Spinning_Blade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Spinning_Blade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Spinning_Blade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Spinning_Blade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Spinning_Blade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Sprint : CCitadelBaseAbility
{
    internal CCitadel_Ability_Sprint(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnSprintingChanged"
    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Sprinting { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime InCombatStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime InCombatEndTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SprintStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Sprint> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bSprinting")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Sprint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Sprinting = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInCombatStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Sprint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InCombatStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInCombatEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Sprint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InCombatEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSprintStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Sprint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SprintStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Sprint.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Sprint.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Sprint.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Sprint.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_StaticCharge : CCitadelBaseAbility
{
    internal CCitadel_Ability_StaticCharge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_StaticCharge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StaticCharge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StaticCharge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StaticCharge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StaticCharge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_StickyBomb : CCitadelBaseAbility
{
    internal CCitadel_Ability_StickyBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 PlayersHit { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_StickyBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nPlayersHit")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_StickyBomb @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayersHit = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StickyBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StickyBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StickyBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StickyBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Stomp : CCitadelBaseAbility
{
    internal CCitadel_Ability_Stomp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Stomp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Stomp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Stomp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Stomp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Stomp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_StormCloud : CCitadelBaseAbility
{
    internal CCitadel_Ability_StormCloud(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_StormCloud> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StormCloud.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StormCloud.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StormCloud.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_StormCloud.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SummonGangster : CCitadelBaseAbility
{
    internal CCitadel_Ability_SummonGangster(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SummonGangster> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SummonGangster.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SummonGangster.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SummonGangster.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SummonGangster.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SuperNeutralCharge : CCitadelBaseAbility
{
    internal CCitadel_Ability_SuperNeutralCharge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Preparing { get; private set; }

    public bool Tackling { get; private set; }

    public GameTime TackleStartTime { get; private set; } = new();

    public float TackleDuration { get; private set; }

    public Vector TackleDir { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_SuperNeutralCharge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bPreparing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_SuperNeutralCharge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Preparing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTackling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_SuperNeutralCharge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Tackling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTackleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_SuperNeutralCharge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TackleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTackleDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_SuperNeutralCharge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TackleDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecTackleDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_SuperNeutralCharge @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TackleDir = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralCharge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralCharge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralCharge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralCharge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SuperNeutralIncendiary : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_SuperNeutralIncendiary(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SuperNeutralIncendiary> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralIncendiary.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralIncendiary.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralIncendiary.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralIncendiary.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_SuperNeutralShield : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_SuperNeutralShield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_SuperNeutralShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralShield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralShield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralShield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_SuperNeutralShield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TangoTether : CCitadelBaseAbility
{
    internal CCitadel_Ability_TangoTether(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector CastStartPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector DashStartPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector DashEndPos { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public QAngle DashStartAng { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DashStartTime { get; private set; } = new();

    public GameTime GrappleStartTime { get; private set; } = new();

    public GameTime GrappleArriveTime { get; private set; } = new();

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetHandle { get; private set; }
    public CBaseEntity? Target => TargetHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime GrappleShotAttackTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    // MNetworkEncoder "coord"
    public Vector[] TargetPos { get; private set; } = Array.Empty<Vector>();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime[] TargetPosTime { get; private set; } = Array.Empty<GameTime>();

    internal new static SendNodeDecoder<CCitadel_Ability_TangoTether> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecCastStartPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastStartPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecDashStartPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashStartPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecDashEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashEndPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angDashStartAng")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashStartAng = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDashStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleArriveTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleArriveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrappleShotAttackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrappleShotAttackTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rgTargetPos")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TargetPos.Length == 0) @this.TargetPos = new Vector[fixedArraySize];
                @this.TargetPos[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rgTargetPosTime")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_TangoTether @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TargetPosTime.Length == 0) @this.TargetPosTime = new GameTime[fixedArraySize];
                @this.TargetPosTime[path[1]] = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TangoTether_Trigger : CCitadelBaseTriggerAbility
{
    internal CCitadel_Ability_TangoTether_Trigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TangoTether_Trigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseTriggerAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether_Trigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether_Trigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether_Trigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TangoTether_Trigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Targetdummy_1 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Targetdummy_1(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Targetdummy_1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_1.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_1.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_1.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_1.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Targetdummy_2 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Targetdummy_2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Targetdummy_2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Targetdummy_3 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Targetdummy_3(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Targetdummy_3> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_3.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_3.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_3.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_3.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Targetdummy_4 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Targetdummy_4(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Targetdummy_4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_4.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_4.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_4.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_4.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Targetdummy_Inherent : CCitadelBaseAbility
{
    internal CCitadel_Ability_Targetdummy_Inherent(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Targetdummy_Inherent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_Inherent.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_Inherent.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_Inherent.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Targetdummy_Inherent.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TargetPractice : CCitadelBaseAbility
{
    internal CCitadel_Ability_TargetPractice(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TargetPractice> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TargetPractice.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TargetPractice.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TargetPractice.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TargetPractice.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Teleport : CCitadelBaseAbility
{
    internal CCitadel_Ability_Teleport(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Teleport> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Teleport.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Teleport.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Teleport.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Teleport.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TeleportToGangster : CCitadelBaseAbility
{
    internal CCitadel_Ability_TeleportToGangster(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TeleportToGangster> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TeleportToGangster.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TeleportToGangster.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TeleportToGangster.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TeleportToGangster.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tenacity : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tenacity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tenacity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tenacity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tenacity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tenacity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tenacity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tengu_AirLift : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tengu_AirLift(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Flying { get; private set; }

    public bool FlyingStarted { get; private set; }

    public bool IsGrabbing { get; private set; }

    public bool IsHoldingBomb { get; private set; }

    public float CurrentSpeed { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tengu_AirLift> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bFlying")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_AirLift @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flying = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlyingStarted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_AirLift @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlyingStarted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsGrabbing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_AirLift @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsGrabbing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHoldingBomb")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_AirLift @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsHoldingBomb = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCurrentSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_AirLift @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentSpeed = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_AirLift.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_AirLift.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_AirLift.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_AirLift.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tengu_StoneForm : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tengu_StoneForm(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime StartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime LandedTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Landed { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Falling { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool InStoneForm { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float StartHeight { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tengu_StoneForm> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLandedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LandedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLanded")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Landed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFalling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Falling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInStoneForm")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InStoneForm = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tengu_StoneForm @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartHeight = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_StoneForm.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_StoneForm.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_StoneForm.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_StoneForm.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tengu_Urn : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tengu_Urn(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tengu_Urn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_Urn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_Urn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_Urn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tengu_Urn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ThrowSand : CCitadelBaseAbility
{
    internal CCitadel_Ability_ThrowSand(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ThrowSand> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ThrowSand.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ThrowSand.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ThrowSand.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ThrowSand.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Thumper_1 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Thumper_1(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Thumper_1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_1.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_1.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_1.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_1.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Thumper_2 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Thumper_2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Thumper_2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Thumper_3 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Thumper_3(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Thumper_3> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_3.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_3.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_3.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_3.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Thumper_4 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Thumper_4(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Thumper_4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_4.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_4.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_4.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Thumper_4.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tier2Boss_LaserBeam : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_Tier2Boss_LaserBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tier2Boss_LaserBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_LaserBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_LaserBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_LaserBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_LaserBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tier2Boss_RocketBarrage : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_Tier2Boss_RocketBarrage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tier2Boss_RocketBarrage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_RocketBarrage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_RocketBarrage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_RocketBarrage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_RocketBarrage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tier2Boss_Stomp : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_Tier2Boss_Stomp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tier2Boss_Stomp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_Stomp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_Stomp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_Stomp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier2Boss_Stomp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tier3Boss_DamagePulse : CTier3BossAbility
{
    internal CCitadel_Ability_Tier3Boss_DamagePulse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tier3Boss_DamagePulse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CTier3BossAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_DamagePulse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_DamagePulse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_DamagePulse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_DamagePulse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tier3Boss_LaserBeam : CTier3BossAbility
{
    internal CCitadel_Ability_Tier3Boss_LaserBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tier3Boss_LaserBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CTier3BossAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_LaserBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_LaserBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_LaserBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tier3Boss_LaserBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_Breach : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_Breach(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_Breach> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Breach.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Breach.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Breach.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Breach.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_CrimsonCannon : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_CrimsonCannon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool AirCast { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_CrimsonCannon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAirCast")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_CrimsonCannon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AirCast = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_CrimsonCannon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_CrimsonCannon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_CrimsonCannon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_CrimsonCannon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_DyingStar : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_DyingStar(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool InFlight { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_DyingStar> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInFlight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_DyingStar @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InFlight = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_DyingStar.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_DyingStar.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_DyingStar.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_DyingStar.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_HeatSinks : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_HeatSinks(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_HeatSinks> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_HeatSinks_Inherent : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_HeatSinks_Inherent(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float DissipationRate { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DissipationTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime HeatTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime OverheatSoundTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Overheating { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_HeatSinks_Inherent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDissipationRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HeatSinks_Inherent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissipationRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDissipationTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HeatSinks_Inherent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissipationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeatTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HeatSinks_Inherent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeatTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOverheatSoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HeatSinks_Inherent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverheatSoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOverheating")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HeatSinks_Inherent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Overheating = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks_Inherent.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks_Inherent.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks_Inherent.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HeatSinks_Inherent.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_HotShot : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_HotShot(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public QAngle BeamAngles { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_HotShot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_angBeamAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Tokamak_HotShot @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAngles = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HotShot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HotShot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HotShot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_HotShot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Tokamak_Radiance : CCitadelBaseAbility
{
    internal CCitadel_Ability_Tokamak_Radiance(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Tokamak_Radiance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Radiance.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Radiance.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Radiance.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Tokamak_Radiance.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Trappers_Bolo : CCitadelBaseAbility
{
    internal CCitadel_Ability_Trappers_Bolo(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Trappers_Bolo> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Trappers_Bolo.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Trappers_Bolo.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Trappers_Bolo.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Trappers_Bolo.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TriggerTower : CCitadelBaseAbility
{
    internal CCitadel_Ability_TriggerTower(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TriggerTower> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TriggerTower.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TriggerTower.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TriggerTower.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TriggerTower.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TrooperBossGrenade : CCitadel_Ability_TrooperGrenade
{
    internal CCitadel_Ability_TrooperBossGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TrooperBossGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_TrooperGrenade.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperBossGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperBossGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperBossGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperBossGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TrooperGrenade : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_TrooperGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TrooperGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TrooperNeutralGrenade : CCitadel_Ability_TrooperGrenade
{
    internal CCitadel_Ability_TrooperNeutralGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TrooperNeutralGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_TrooperGrenade.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperNeutralGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperNeutralGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperNeutralGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperNeutralGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TrooperZipLine : CCitadel_Ability_ZipLine
{
    internal CCitadel_Ability_TrooperZipLine(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TrooperZipLine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_ZipLine.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperZipLine.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperZipLine.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperZipLine.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TrooperZipLine.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_TurretClone : CCitadelBaseAbility
{
    internal CCitadel_Ability_TurretClone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_TurretClone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TurretClone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TurretClone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TurretClone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_TurretClone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_UltCombo : CCitadelBaseAbility
{
    internal CCitadel_Ability_UltCombo(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 BonusHealth { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetHandle { get; private set; }
    public CBaseEntity? Target => TargetHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Ability_UltCombo> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iBonusHealth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_UltCombo @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BonusHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_UltCombo @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetHandle = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_UltCombo.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_UltCombo.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_UltCombo.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_UltCombo.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Uppercut : CCitadel_Ability_Melee_Base
{
    internal CCitadel_Ability_Uppercut(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Uppercut> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Ability_Melee_Base.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Uppercut.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Uppercut.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Uppercut.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Uppercut.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Vandal_Ability03 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Vandal_Ability03(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Vandal_Ability03> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Ability03.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Ability03.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Ability03.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Ability03.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Vandal_Pillar : CCitadelBaseAbility
{
    internal CCitadel_Ability_Vandal_Pillar(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Vandal_Pillar> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Pillar.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Pillar.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Pillar.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Vandal_Pillar.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_VandalOverflow : CCitadelBaseAbility
{
    internal CCitadel_Ability_VandalOverflow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_VandalOverflow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalOverflow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalOverflow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalOverflow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalOverflow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_VandalSurge : CCitadelBaseAbility
{
    internal CCitadel_Ability_VandalSurge(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_VandalSurge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalSurge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalSurge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalSurge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VandalSurge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Viper_Ability04 : CCitadelBaseAbility
{
    internal CCitadel_Ability_Viper_Ability04(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Viper_Ability04> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_Ability04.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_Ability04.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_Ability04.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_Ability04.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Viper_DebuffDagger : CCitadelBaseAbility
{
    internal CCitadel_Ability_Viper_DebuffDagger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Viper_DebuffDagger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_DebuffDagger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_DebuffDagger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_DebuffDagger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viper_DebuffDagger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ViperHookblade : CCitadelBaseAbility
{
    internal CCitadel_Ability_ViperHookblade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ViperHookblade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperHookblade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperHookblade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperHookblade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperHookblade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ViperVenom : CCitadelBaseAbility
{
    internal CCitadel_Ability_ViperVenom(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ViperVenom> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperVenom.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperVenom.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperVenom.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViperVenom.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Viscous_Telepunch : CCitadelBaseAbility
{
    internal CCitadel_Ability_Viscous_Telepunch(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector TeleportPosition { get; private set; }

    public Vector TeleportPositionNormal { get; private set; }

    public ETelepunchState TelepunchState { get; private set; }

    public GameTime NextStateTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_Viscous_Telepunch> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecTeleportPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Viscous_Telepunch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeleportPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecTeleportPositionNormal")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_Viscous_Telepunch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeleportPositionNormal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eTelepunchState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ETelepunchState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_Viscous_Telepunch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TelepunchState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextStateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_Viscous_Telepunch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextStateTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viscous_Telepunch.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viscous_Telepunch.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viscous_Telepunch.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Viscous_Telepunch.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ViscousWeapon_Alt : CCitadelBaseAbility
{
    internal CCitadel_Ability_ViscousWeapon_Alt(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public EViscousChargedGunState ChargeState { get; private set; }

    public float ClipConsumed { get; private set; }

    public bool IsCharging { get; private set; }

    public bool IsToggled { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_ViscousWeapon_Alt> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ChargeState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EViscousChargedGunState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ViscousWeapon_Alt @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChargeState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nClipConsumed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_ViscousWeapon_Alt @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClipConsumed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsCharging")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ViscousWeapon_Alt @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsCharging = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsToggled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ViscousWeapon_Alt @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsToggled = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViscousWeapon_Alt.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViscousWeapon_Alt.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViscousWeapon_Alt.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ViscousWeapon_Alt.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_VoidSphere : CCitadelBaseAbility
{
    internal CCitadel_Ability_VoidSphere(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_VoidSphere> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VoidSphere.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VoidSphere.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VoidSphere.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_VoidSphere.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Weapon_BossTier2 : CCitadelBaseAbilityServerOnly
{
    internal CCitadel_Ability_Weapon_BossTier2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Weapon_BossTier2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Weapon_BossTier3 : CTier3BossAbility
{
    internal CCitadel_Ability_Weapon_BossTier3(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Weapon_BossTier3> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CTier3BossAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier3.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier3.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier3.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Weapon_BossTier3.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_WingBlast : CCitadelBaseAbility
{
    internal CCitadel_Ability_WingBlast(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_WingBlast> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WingBlast.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WingBlast.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WingBlast.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WingBlast.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Wraith_RapidFire : CCitadelBaseAbility
{
    internal CCitadel_Ability_Wraith_RapidFire(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Wraith_RapidFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wraith_RapidFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wraith_RapidFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wraith_RapidFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wraith_RapidFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Wrecker_Salvage : CCitadelBaseAbility
{
    internal CCitadel_Ability_Wrecker_Salvage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Wrecker_Salvage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Salvage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Salvage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Salvage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Salvage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Wrecker_Ultimate : CCitadelBaseAbility
{
    internal CCitadel_Ability_Wrecker_Ultimate(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public QAngle BeamAngles { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_Wrecker_Ultimate> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_angBeamAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ability_Wrecker_Ultimate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamAngles = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Ultimate.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Ultimate.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Ultimate.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Wrecker_Ultimate.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_WreckerScrapBlast : CCitadelBaseAbility
{
    internal CCitadel_Ability_WreckerScrapBlast(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_WreckerScrapBlast> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerScrapBlast.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerScrapBlast.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerScrapBlast.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerScrapBlast.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_WreckerTeleport : CCitadelBaseAbility
{
    internal CCitadel_Ability_WreckerTeleport(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> ProjectileHandle { get; private set; }
    public CBaseEntity? Projectile => ProjectileHandle.Get(Demo);

    public float ArrowSpeed { get; private set; }

    public GameTime SnapAnglesBackTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ability_WreckerTeleport> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hProjectile")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_WreckerTeleport @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flArrowSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_WreckerTeleport @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ArrowSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSnapAnglesBackTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_WreckerTeleport @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapAnglesBackTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerTeleport.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerTeleport.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerTeleport.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckerTeleport.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_WreckingBall : CCitadelBaseAbility
{
    internal CCitadel_Ability_WreckingBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool HoldingBall { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_WreckingBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bHoldingBall")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_WreckingBall @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HoldingBall = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_WreckingBallThrow : CCitadelBaseTriggerAbility
{
    internal CCitadel_Ability_WreckingBallThrow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_WreckingBallThrow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseTriggerAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBallThrow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBallThrow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBallThrow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_WreckingBallThrow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_Yakuza_Shakedown : CCitadelBaseAbility
{
    internal CCitadel_Ability_Yakuza_Shakedown(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_Yakuza_Shakedown> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Yakuza_Shakedown.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Yakuza_Shakedown.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Yakuza_Shakedown.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_Yakuza_Shakedown.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ZipLine : CCitadelBaseAbility
{
    internal CCitadel_Ability_ZipLine(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime TimeStartZipping { get; private set; } = new();

    public GameTime TimeForKnockdownProtection { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime TimeStopZipping { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public float CasterSpeed { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CNetworkVelocityVector InitialVel { get; private set; } = new();

    public Vector AttachPoint { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> PrevNodeHandle { get; private set; }
    public CBaseEntity? PrevNode => PrevNodeHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> NextNodeHandle { get; private set; }
    public CBaseEntity? NextNode => NextNodeHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime TimeEnterState { get; private set; } = new();

    public GameTime LatchTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DamagedTime { get; private set; } = new();

    // MNetworkChangeCallback "ZiplingAttachStateChanged"
    public EAttachState AttachState { get; private set; }

    public Int32 AttachedZipLineLane { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool DroppedFromZipline { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector AttachZipLineOffset { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Ability_ZipLine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flTimeStartZipping")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeStartZipping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeForKnockdownProtection")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeForKnockdownProtection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeStopZipping")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeStopZipping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCasterSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CasterSpeed = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecInitialVel")
        {
            var innerDecoder = CNetworkVelocityVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.InitialVel, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecAttachPoint")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachPoint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pPrevNode")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrevNodeHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pNextNode")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextNodeHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeEnterState")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeEnterState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDamagedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DamagedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eAttachState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EAttachState>(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAttachedZipLineLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachedZipLineLane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDroppedFromZipline")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DroppedFromZipline = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAttachZipLineOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_Ability_ZipLine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachZipLineOffset = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ability_ZipLine_Boost : CCitadelBaseAbility
{
    internal CCitadel_Ability_ZipLine_Boost(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Ability_ZipLine_Boost> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine_Boost.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine_Boost.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine_Boost.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ability_ZipLine_Boost.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_AbilityLifeSteal : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_AbilityLifeSteal(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_AbilityLifeSteal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AbilityLifeSteal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AbilityLifeSteal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AbilityLifeSteal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AbilityLifeSteal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_AblativeCoat : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_AblativeCoat(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 CurrentResistValue { get; private set; }

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_AblativeCoat> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iCurrentResistValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_ArmorUpgrade_AblativeCoat @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentResistValue = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AblativeCoat.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AblativeCoat.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AblativeCoat.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_AblativeCoat.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_ActiveBulletShield : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_ActiveBulletShield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_ActiveBulletShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ActiveBulletShield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ActiveBulletShield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ActiveBulletShield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ActiveBulletShield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_BulletArmorReductionAura : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_BulletArmorReductionAura(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_BulletArmorReductionAura> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_BulletArmorReductionAura.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_BulletArmorReductionAura.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_BulletArmorReductionAura.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_BulletArmorReductionAura.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_CloakingDevice : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_CloakingDevice(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_CloakingDevice> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDevice.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDevice.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDevice.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDevice.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_CloakingDeviceActive : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_CloakingDeviceActive(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_CloakingDeviceActive> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDeviceActive.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDeviceActive.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDeviceActive.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_CloakingDeviceActive.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_Colossus : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_Colossus(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_Colossus> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Colossus.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Colossus.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Colossus.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Colossus.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_DamageRecycler : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_DamageRecycler(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_DamageRecycler> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DamageRecycler.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DamageRecycler.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DamageRecycler.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DamageRecycler.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_DebuffReducer : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_DebuffReducer(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_DebuffReducer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DebuffReducer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DebuffReducer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DebuffReducer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DebuffReducer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_DoubleJump : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_DoubleJump(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_DoubleJump> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DoubleJump.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DoubleJump.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DoubleJump.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_DoubleJump.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_Frenzy : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_Frenzy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_Frenzy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Frenzy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Frenzy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Frenzy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Frenzy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_HealOnLevel : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_HealOnLevel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_HealOnLevel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HealOnLevel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HealOnLevel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HealOnLevel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HealOnLevel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_HighImpactArmor : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_HighImpactArmor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_HighImpactArmor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HighImpactArmor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HighImpactArmor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HighImpactArmor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_HighImpactArmor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_MetalSkin : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_MetalSkin(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_MetalSkin> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_MetalSkin.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_MetalSkin.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_MetalSkin.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_MetalSkin.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_PersonalRejuvenator : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_PersonalRejuvenator(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_PersonalRejuvenator> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_PersonalRejuvenator.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_PersonalRejuvenator.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_PersonalRejuvenator.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_PersonalRejuvenator.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_RegeneratingBulletShield : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_RegeneratingBulletShield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_RegeneratingBulletShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegeneratingBulletShield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegeneratingBulletShield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegeneratingBulletShield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegeneratingBulletShield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_RegenerativeArmor : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_RegenerativeArmor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_RegenerativeArmor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegenerativeArmor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegenerativeArmor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegenerativeArmor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_RegenerativeArmor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_ReturnFire : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_ReturnFire(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_ReturnFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ReturnFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ReturnFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ReturnFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_ReturnFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_SlowImmunity : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_SlowImmunity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_SlowImmunity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SlowImmunity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SlowImmunity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SlowImmunity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SlowImmunity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_SpellShield : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_SpellShield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_SpellShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SpellShield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SpellShield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SpellShield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_SpellShield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_Stimpak : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_Stimpak(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_Stimpak> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Stimpak.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Stimpak.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Stimpak.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_Stimpak.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_ArmorUpgrade_VexBarrier : CCitadel_Item
{
    internal CCitadel_ArmorUpgrade_VexBarrier(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_ArmorUpgrade_VexBarrier> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_VexBarrier.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_VexBarrier.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_VexBarrier.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_ArmorUpgrade_VexBarrier.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Bounce_Pad : CCitadelAnimatingModelEntity
{
    internal CCitadel_Bounce_Pad(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float UpFactor { get; private set; }

    public float BounceVelocity { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Bounce_Pad> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flUpFactor")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Bounce_Pad @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UpFactor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBounceVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Bounce_Pad @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BounceVelocity = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Bounce_Pad.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Bounce_Pad.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Bounce_Pad.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Bounce_Pad.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_lifeState"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
public partial class CCitadel_BreakableProp : CBaseAnimGraph
{
    internal CCitadel_BreakableProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 HitIndex { get; private set; }

    internal new static SendNodeDecoder<CCitadel_BreakableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nHitIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_BreakableProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitIndex = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakableProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_BreakableProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakableProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakableProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_BreakablePropGoldPickup : CCitadel_BreakablePropPickup
{
    internal CCitadel_BreakablePropGoldPickup(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 GoldReward { get; private set; }

    internal new static SendNodeDecoder<CCitadel_BreakablePropGoldPickup> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iGoldReward")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_BreakablePropGoldPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GoldReward = decoder(ref buffer);
            };
        }
        return CCitadel_BreakablePropPickup.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropGoldPickup.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropGoldPickup.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropGoldPickup.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropGoldPickup.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_BreakablePropHealthPickup : CCitadel_BreakablePropPickup
{
    internal CCitadel_BreakablePropHealthPickup(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_BreakablePropHealthPickup> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_BreakablePropPickup.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropHealthPickup.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropHealthPickup.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropHealthPickup.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropHealthPickup.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_BreakablePropModifierPickup : CCitadel_BreakablePropPickup
{
    internal CCitadel_BreakablePropModifierPickup(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_BreakablePropModifierPickup> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_BreakablePropPickup.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropModifierPickup.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropModifierPickup.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropModifierPickup.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropModifierPickup.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_BreakablePropPickup : CBaseAnimGraph
{
    internal CCitadel_BreakablePropPickup(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public bool Active { get; private set; }

    public NetworkedString PickupName { get; private set; }

    public Int32 NameOffset { get; private set; }

    internal new static SendNodeDecoder<CCitadel_BreakablePropPickup> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_BreakablePropPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_BreakablePropPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sPickupName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadel_BreakablePropPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PickupName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNameOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_BreakablePropPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NameOffset = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropPickup.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropPickup.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropPickup.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_BreakablePropPickup.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_CatAnimating : CCitadelAnimatingModelEntity
{
    internal CCitadel_CatAnimating(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_CatAnimating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_CatAnimating.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_CatAnimating.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_CatAnimating.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_CatAnimating.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_DeployablePreview : CBaseAnimGraph
{
    internal CCitadel_DeployablePreview(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_DeployablePreview> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_DeployablePreview.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_DeployablePreview.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_DeployablePreview.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_DeployablePreview.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_bTakesDamage"
// MNetworkIncludeByName "m_nTakeDamageFlags"
public partial class CCitadel_Destroyable_Building : CCitadelAnimatingModelEntity
{
    internal CCitadel_Destroyable_Building(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelAbilityComponent"
    // MNetworkAlias "CCitadelAbilityComponent"
    // MNetworkTypeAlias "CCitadelAbilityComponent"
    public CCitadelAbilityComponent CCitadelAbilityComponent { get; private set; } = new();

    public NetworkedVector<WeakPoint> WeakPoints { get; private set; } = new NetworkedVector<WeakPoint>();

    // MNetworkChangeCallback "DestroyedChanged"
    public bool Destroyed { get; private set; }

    public bool Active { get; private set; }

    public bool Final { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Destroyable_Building> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelAbilityComponent")
        {
            var innerDecoder = CCitadelAbilityComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelAbilityComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecWeakPoints")
        {
            var innerDecoder = decoderSet.GetDecoder<WeakPoint>(field.FieldSerializerKey!.Value);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.WeakPoints.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.WeakPoints.EnsureSize(index + 1);
                    var element = @this.WeakPoints[index] ??= new WeakPoint();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bDestroyed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Destroyed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFinal")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Destroyable_Building @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Final = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Destroyable_Building.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Destroyable_Building.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Destroyable_Building.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Destroyable_Building.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_DynamicProp : CDynamicProp
{
    internal CCitadel_DynamicProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString StrDefaultSkin { get; private set; }

    public NetworkedString StrFriendlySkin { get; private set; }

    public NetworkedString StrEnemySkin { get; private set; }

    public bool IsWorld { get; private set; }

    internal new static SendNodeDecoder<CCitadel_DynamicProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_strDefaultSkin")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadel_DynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StrDefaultSkin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_strFriendlySkin")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadel_DynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StrFriendlySkin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_strEnemySkin")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadel_DynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StrEnemySkin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_DynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsWorld = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_DynamicProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_DynamicProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_DynamicProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_DynamicProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_FissureWall : CBaseAnimGraph
{
    internal CCitadel_FissureWall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_FissureWall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_FissureWall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_FissureWall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_FissureWall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_FissureWall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_GrandFinaleStage : CBaseAnimGraph
{
    internal CCitadel_GrandFinaleStage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_GrandFinaleStage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_GrandFinaleStage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_GrandFinaleStage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_GrandFinaleStage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_GrandFinaleStage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_HeroTestOrbSpawner : CBaseAnimGraph
{
    internal CCitadel_HeroTestOrbSpawner(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_HeroTestOrbSpawner> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_HeroTestOrbSpawner.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_HeroTestOrbSpawner.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_HeroTestOrbSpawner.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_HeroTestOrbSpawner.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Ice_Dome_Blocker : CBaseAnimGraph
{
    internal CCitadel_Ice_Dome_Blocker(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime TurnSolidTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ice_Dome_Blocker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flTurnSolidTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ice_Dome_Blocker @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TurnSolidTime = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Dome_Blocker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Dome_Blocker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Dome_Blocker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Dome_Blocker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_hModel"
public partial class CCitadel_Ice_Path_Shard_Physics : CBaseModelEntity
{
    internal CCitadel_Ice_Path_Shard_Physics(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public ice_path_shard_model_desc ShardDesc { get; private set; } = new();

    public QAngle Forward { get; private set; }

    // MNetworkChangeCallback "OnStartTimeChanged"
    public GameTime StartTime { get; private set; } = new();

    // MNetworkChangeCallback "OnEndTimeChanged"
    public GameTime EndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Ice_Path_Shard_Physics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ShardDesc")
        {
            var innerDecoder = ice_path_shard_model_desc.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Ice_Path_Shard_Physics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ShardDesc, path, ref buffer);
            };
        }
        if (field.VarName == "m_qForward")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadel_Ice_Path_Shard_Physics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Forward = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ice_Path_Shard_Physics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Ice_Path_Shard_Physics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndTime = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Path_Shard_Physics.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Path_Shard_Physics.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Path_Shard_Physics.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Ice_Path_Shard_Physics.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item : CCitadelBaseAbility
{
    internal CCitadel_Item(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public NetworkedVector<CUtlStringToken> ComponentsConsumed { get; private set; } = new NetworkedVector<CUtlStringToken>();

    internal new static SendNodeDecoder<CCitadel_Item> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecComponentsConsumed")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadel_Item @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ComponentsConsumed.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ComponentsConsumed.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ComponentsConsumed[index] = element;
                }
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_ActiveReload : CCitadel_Item
{
    internal CCitadel_Item_ActiveReload(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_ActiveReload> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ActiveReload.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ActiveReload.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ActiveReload.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ActiveReload.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_AOE_Tech_Shield : CCitadel_Item
{
    internal CCitadel_Item_AOE_Tech_Shield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_AOE_Tech_Shield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOE_Tech_Shield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOE_Tech_Shield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOE_Tech_Shield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOE_Tech_Shield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_AOERoot : CCitadel_Item
{
    internal CCitadel_Item_AOERoot(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_AOERoot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOERoot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOERoot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOERoot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_AOERoot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Aura_Base : CCitadel_Item
{
    internal CCitadel_Item_Aura_Base(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Aura_Base> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Aura_Base.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Aura_Base.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Aura_Base.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Aura_Base.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_BaseProjectileAOEModifier : CCitadel_Item
{
    internal CCitadel_Item_BaseProjectileAOEModifier(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_BaseProjectileAOEModifier> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_BaseProjectileAOEModifier.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_BaseProjectileAOEModifier.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_BaseProjectileAOEModifier.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_BaseProjectileAOEModifier.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Bubble : CCitadel_Item
{
    internal CCitadel_Item_Bubble(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime EndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Item_Bubble> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_Item_Bubble @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndTime = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Bubble.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Bubble.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Bubble.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Bubble.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Camouflage : CCitadel_Item
{
    internal CCitadel_Item_Camouflage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Camouflage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Camouflage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Camouflage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Camouflage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Camouflage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Charge_Mastery : CCitadel_Item
{
    internal CCitadel_Item_Charge_Mastery(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Charge_Mastery> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Charge_Mastery.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Charge_Mastery.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Charge_Mastery.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Charge_Mastery.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_CheatDeath : CCitadel_Item
{
    internal CCitadel_Item_CheatDeath(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_CheatDeath> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_CheatDeath.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_CheatDeath.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_CheatDeath.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_CheatDeath.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_ColdFront : CCitadel_Item
{
    internal CCitadel_Item_ColdFront(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_ColdFront> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ColdFront.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ColdFront.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ColdFront.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ColdFront.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_ComboBreaker : CCitadel_Item
{
    internal CCitadel_Item_ComboBreaker(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_ComboBreaker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ComboBreaker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ComboBreaker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ComboBreaker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ComboBreaker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Containment : CCitadel_Item_TrackingProjectileApplyModifier
{
    internal CCitadel_Item_Containment(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Containment> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item_TrackingProjectileApplyModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Containment.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Containment.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Containment.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Containment.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Disarm : CCitadel_Item_TrackingProjectileApplyModifier
{
    internal CCitadel_Item_Disarm(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Disarm> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item_TrackingProjectileApplyModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Disarm.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Disarm.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Disarm.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Disarm.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_DivinersKevlar : CCitadel_Item
{
    internal CCitadel_Item_DivinersKevlar(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_DivinersKevlar> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DivinersKevlar.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DivinersKevlar.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DivinersKevlar.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DivinersKevlar.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_DPS_Aura : CCitadel_Item
{
    internal CCitadel_Item_DPS_Aura(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_DPS_Aura> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DPS_Aura.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DPS_Aura.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DPS_Aura.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_DPS_Aura.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Empty : CCitadel_Item
{
    internal CCitadel_Item_Empty(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Empty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Empty.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Empty.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Empty.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Empty.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_HealthRegenAura : CCitadel_Item
{
    internal CCitadel_Item_HealthRegenAura(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_HealthRegenAura> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_HealthRegenAura.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_HealthRegenAura.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_HealthRegenAura.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_HealthRegenAura.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Intensifying_Clip : CCitadel_Item
{
    internal CCitadel_Item_Intensifying_Clip(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Intensifying_Clip> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Intensifying_Clip.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Intensifying_Clip.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Intensifying_Clip.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Intensifying_Clip.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_ModDisruptor : CCitadel_Item
{
    internal CCitadel_Item_ModDisruptor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_ModDisruptor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ModDisruptor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ModDisruptor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ModDisruptor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_ModDisruptor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_PhantomStrike : CCitadel_Item
{
    internal CCitadel_Item_PhantomStrike(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_PhantomStrike> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PhantomStrike.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PhantomStrike.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PhantomStrike.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PhantomStrike.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_PowerShard : CCitadel_Item
{
    internal CCitadel_Item_PowerShard(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_PowerShard> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PowerShard.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PowerShard.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PowerShard.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_PowerShard.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_QuickSilver : CCitadel_Item
{
    internal CCitadel_Item_QuickSilver(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_QuickSilver> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_QuickSilver.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_QuickSilver.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_QuickSilver.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_QuickSilver.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Refresher : CCitadel_Item
{
    internal CCitadel_Item_Refresher(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Refresher> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Refresher.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Refresher.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Refresher.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Refresher.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_RejuvTrackingProjectile : CCitadel_Item_TrackingProjectileApplyModifier
{
    internal CCitadel_Item_RejuvTrackingProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_RejuvTrackingProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item_TrackingProjectileApplyModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RejuvTrackingProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RejuvTrackingProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RejuvTrackingProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RejuvTrackingProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_RescueBeam : CCitadel_Item
{
    internal CCitadel_Item_RescueBeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_RescueBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RescueBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RescueBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RescueBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_RescueBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Savior : CCitadel_Item
{
    internal CCitadel_Item_Savior(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Savior> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Savior.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Savior.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Savior.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Savior.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_SelfBuffModifier : CCitadel_Item
{
    internal CCitadel_Item_SelfBuffModifier(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_SelfBuffModifier> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SelfBuffModifier.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SelfBuffModifier.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SelfBuffModifier.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SelfBuffModifier.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_SingleTargetStun : CCitadel_Item
{
    internal CCitadel_Item_SingleTargetStun(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_SingleTargetStun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SingleTargetStun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SingleTargetStun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SingleTargetStun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_SingleTargetStun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_Stasis_Bomb : CCitadel_Item_Bubble
{
    internal CCitadel_Item_Stasis_Bomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_Stasis_Bomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item_Bubble.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Stasis_Bomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Stasis_Bomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Stasis_Bomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_Stasis_Bomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_TechCleave : CCitadel_Item
{
    internal CCitadel_Item_TechCleave(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_TechCleave> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechCleave.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechCleave.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechCleave.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechCleave.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_TechDamagePulse : CCitadel_Item
{
    internal CCitadel_Item_TechDamagePulse(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_TechDamagePulse> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechDamagePulse.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechDamagePulse.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechDamagePulse.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TechDamagePulse.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_TrackingProjectileApplyModifier : CCitadel_Item
{
    internal CCitadel_Item_TrackingProjectileApplyModifier(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_TrackingProjectileApplyModifier> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TrackingProjectileApplyModifier.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TrackingProjectileApplyModifier.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TrackingProjectileApplyModifier.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_TrackingProjectileApplyModifier.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Item_WarpStone : CCitadel_Item
{
    internal CCitadel_Item_WarpStone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Item_WarpStone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_WarpStone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Item_WarpStone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_WarpStone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Item_WarpStone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_MobileResupply : CCitadelAnimatingModelEntity
{
    internal CCitadel_MobileResupply(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCitadelBaseAbility, DeadlockDemoParser> AbilityHandle { get; private set; }
    public CCitadelBaseAbility? Ability => AbilityHandle.Get(Demo);

    public bool Floating { get; private set; }

    internal new static SendNodeDecoder<CCitadel_MobileResupply> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hAbility")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelBaseAbility, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_MobileResupply @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AbilityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFloating")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_MobileResupply @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Floating = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_MobileResupply.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_MobileResupply.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_MobileResupply.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_MobileResupply.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Nano_Predatory_Statue : CCitadelAnimatingModelEntity
{
    internal CCitadel_Nano_Predatory_Statue(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCitadelBaseAbility, DeadlockDemoParser> AbilityHandle { get; private set; }
    public CCitadelBaseAbility? Ability => AbilityHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadel_Nano_Predatory_Statue> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hAbility")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelBaseAbility, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadel_Nano_Predatory_Statue @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AbilityHandle = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Nano_Predatory_Statue.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Nano_Predatory_Statue.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Nano_Predatory_Statue.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Nano_Predatory_Statue.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_PestilenceDroneDispenser : CAI_CitadelNPC
{
    internal CCitadel_PestilenceDroneDispenser(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_PestilenceDroneDispenser> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_PestilenceDroneDispenser.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_PestilenceDroneDispenser.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_PestilenceDroneDispenser.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_PestilenceDroneDispenser.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_PickupItemSpawner : CBaseAnimGraph
{
    internal CCitadel_PickupItemSpawner(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_PickupItemSpawner> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_PickupItemSpawner.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_PickupItemSpawner.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_PickupItemSpawner.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_PickupItemSpawner.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Archer_ChargedShot : CCitadelProjectile
{
    internal CCitadel_Projectile_Archer_ChargedShot(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Archer_ChargedShot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Archer_ChargedShot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Archer_ChargedShot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Archer_ChargedShot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Archer_ChargedShot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Bebop_Hook : CCitadelProjectile
{
    internal CCitadel_Projectile_Bebop_Hook(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Bebop_Hook> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Bebop_Hook.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Bebop_Hook.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Bebop_Hook.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Bebop_Hook.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_BloodBomb : CCitadelProjectile
{
    internal CCitadel_Projectile_BloodBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_BloodBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_BloodBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_BloodBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_BloodBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_BloodBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Cyclone : CCitadelProjectile
{
    internal CCitadel_Projectile_Cyclone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Cyclone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Cyclone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Cyclone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Cyclone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Cyclone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_DustStorm : CCitadelProjectile
{
    internal CCitadel_Projectile_DustStorm(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_DustStorm> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_DustStorm.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_DustStorm.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_DustStorm.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_DustStorm.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Guided_Arrow : CCitadelProjectile
{
    internal CCitadel_Projectile_Guided_Arrow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Projectile_Guided_Arrow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Projectile_Guided_Arrow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Guided_Arrow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Guided_Arrow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Guided_Arrow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Guided_Arrow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_HookBlade : CCitadelTrackedProjectile
{
    internal CCitadel_Projectile_HookBlade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_HookBlade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelTrackedProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_HookBlade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_HookBlade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_HookBlade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_HookBlade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Petrify : CCitadelProjectile
{
    internal CCitadel_Projectile_Petrify(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Petrify> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Petrify.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Petrify.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Petrify.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Petrify.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Pillar : CCitadelProjectile
{
    internal CCitadel_Projectile_Pillar(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Pillar> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Pillar.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Pillar.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Pillar.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Pillar.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_RocketLauncher_Rocket : CCitadelProjectile
{
    internal CCitadel_Projectile_RocketLauncher_Rocket(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_RocketLauncher_Rocket> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_RocketLauncher_Rocket.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_RocketLauncher_Rocket.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_RocketLauncher_Rocket.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_RocketLauncher_Rocket.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_SettingSun : CCitadelProjectile
{
    internal CCitadel_Projectile_SettingSun(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_SettingSun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_SettingSun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_SettingSun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_SettingSun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_SettingSun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Tier2Boss_RocketBarrage : CCitadelProjectile
{
    internal CCitadel_Projectile_Tier2Boss_RocketBarrage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Tier2Boss_RocketBarrage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Tier2Boss_RocketBarrage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Tier2Boss_RocketBarrage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Tier2Boss_RocketBarrage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Tier2Boss_RocketBarrage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Viscous_GooGrenade : CCitadelProjectile
{
    internal CCitadel_Projectile_Viscous_GooGrenade(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_Viscous_GooGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Viscous_GooGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Viscous_GooGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Viscous_GooGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Viscous_GooGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_Wrecker_Teleport : CCitadelProjectile
{
    internal CCitadel_Projectile_Wrecker_Teleport(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_Projectile_Wrecker_Teleport> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadel_Projectile_Wrecker_Teleport @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Wrecker_Teleport.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Wrecker_Teleport.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Wrecker_Teleport.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_Wrecker_Teleport.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Projectile_WreckingBall : CCitadelProjectile
{
    internal CCitadel_Projectile_WreckingBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Projectile_WreckingBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_WreckingBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_WreckingBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_WreckingBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Projectile_WreckingBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_RestorativeGooCube : CCitadelAnimatingModelEntity
{
    internal CCitadel_RestorativeGooCube(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_RestorativeGooCube> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_RestorativeGooCube.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_RestorativeGooCube.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_RestorativeGooCube.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_RestorativeGooCube.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Shield : CCitadelModelEntity
{
    internal CCitadel_Shield(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool AllowRotatingUp { get; private set; }

    public bool FixedPosition { get; private set; }

    public float ShieldOffset { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Shield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAllowRotatingUp")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Shield @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AllowRotatingUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFixedPosition")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Shield @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FixedPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShieldOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadel_Shield @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShieldOffset = decoder(ref buffer);
            };
        }
        return CCitadelModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Shield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Shield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Shield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Shield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_TechUpgrade_Infuser : CCitadel_Item
{
    internal CCitadel_TechUpgrade_Infuser(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_TechUpgrade_Infuser> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_Infuser.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_Infuser.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_Infuser.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_Infuser.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_TechUpgrade_SuperAcolyteGloves : CCitadel_Item
{
    internal CCitadel_TechUpgrade_SuperAcolyteGloves(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_TechUpgrade_SuperAcolyteGloves> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_SuperAcolyteGloves.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_SuperAcolyteGloves.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_SuperAcolyteGloves.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_TechUpgrade_SuperAcolyteGloves.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_AerialAssault : CCitadel_Item
{
    internal CCitadel_Upgrade_AerialAssault(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Upgrade_AerialAssault> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AerialAssault.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AerialAssault.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AerialAssault.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AerialAssault.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_AmmoScavenger : CCitadel_Item
{
    internal CCitadel_Upgrade_AmmoScavenger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Upgrade_AmmoScavenger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AmmoScavenger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AmmoScavenger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AmmoScavenger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_AmmoScavenger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_MagicCarpet : CCitadel_Item
{
    internal CCitadel_Upgrade_MagicCarpet(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Flying { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool Summoning { get; private set; }

    internal new static SendNodeDecoder<CCitadel_Upgrade_MagicCarpet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bFlying")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Upgrade_MagicCarpet @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flying = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSummoning")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_Upgrade_MagicCarpet @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Summoning = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_MagicCarpet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_MagicCarpet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_MagicCarpet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_MagicCarpet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_OverdriveClip : CCitadel_Item
{
    internal CCitadel_Upgrade_OverdriveClip(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Upgrade_OverdriveClip> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_OverdriveClip.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_OverdriveClip.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_OverdriveClip.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_OverdriveClip.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_StabilizingTripod : CCitadel_Item
{
    internal CCitadel_Upgrade_StabilizingTripod(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Upgrade_StabilizingTripod> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_StabilizingTripod.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_StabilizingTripod.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_StabilizingTripod.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_StabilizingTripod.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_Upgrade_WeaponPowerForHealth : CCitadel_Item
{
    internal CCitadel_Upgrade_WeaponPowerForHealth(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_Upgrade_WeaponPowerForHealth> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_WeaponPowerForHealth.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_WeaponPowerForHealth.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_WeaponPowerForHealth.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_Upgrade_WeaponPowerForHealth.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_UtilityUpgrade_AOESmokeBomb : CCitadel_Item
{
    internal CCitadel_UtilityUpgrade_AOESmokeBomb(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_UtilityUpgrade_AOESmokeBomb> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_AOESmokeBomb.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_AOESmokeBomb.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_AOESmokeBomb.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_AOESmokeBomb.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_UtilityUpgrade_DebuffImmunity : CCitadel_Item
{
    internal CCitadel_UtilityUpgrade_DebuffImmunity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_UtilityUpgrade_DebuffImmunity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_DebuffImmunity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_DebuffImmunity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_DebuffImmunity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_DebuffImmunity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_UtilityUpgrade_HealthNova : CCitadel_Item
{
    internal CCitadel_UtilityUpgrade_HealthNova(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_UtilityUpgrade_HealthNova> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_HealthNova.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_HealthNova.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_HealthNova.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_HealthNova.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_UtilityUpgrade_RocketBooster : CCitadel_UtilityUpgrade_RocketBoots
{
    internal CCitadel_UtilityUpgrade_RocketBooster(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnCanSlamDownChanged"
    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime CastTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool CrashingDown { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool ImpulseApplied { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool CanCrash { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector CrashPosition { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector CrashDirection { get; private set; }

    internal new static SendNodeDecoder<CCitadel_UtilityUpgrade_RocketBooster> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flCastTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCrashingDown")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrashingDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bImpulseApplied")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ImpulseApplied = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanCrash")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanCrash = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCrashPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrashPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCrashDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadel_UtilityUpgrade_RocketBooster @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrashDirection = decoder(ref buffer);
            };
        }
        return CCitadel_UtilityUpgrade_RocketBoots.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBooster.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBooster.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBooster.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBooster.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_UtilityUpgrade_RocketBoots : CCitadel_Item
{
    internal CCitadel_UtilityUpgrade_RocketBoots(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_UtilityUpgrade_RocketBoots> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBoots.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBoots.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBoots.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_UtilityUpgrade_RocketBoots.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_BansheeSlugs : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_BansheeSlugs(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_BansheeSlugs> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BansheeSlugs.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BansheeSlugs.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BansheeSlugs.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BansheeSlugs.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_BurstFire : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_BurstFire(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime FastFireEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_BurstFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nFastFireEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadel_WeaponUpgrade_BurstFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FastFireEndTime = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BurstFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BurstFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BurstFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_BurstFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_FireRateAura : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_FireRateAura(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_FireRateAura> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_FireRateAura.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_FireRateAura.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_FireRateAura.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_FireRateAura.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_GlassCannon : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_GlassCannon(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 KillsEarned { get; private set; }

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_GlassCannon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nKillsEarned")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_WeaponUpgrade_GlassCannon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KillsEarned = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_GlassCannon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_GlassCannon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_GlassCannon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_GlassCannon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_Headhunter : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_Headhunter(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_Headhunter> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Headhunter.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Headhunter.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Headhunter.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Headhunter.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_HeadshotBooster : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_HeadshotBooster(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_HeadshotBooster> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_HeadshotBooster.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_HeadshotBooster.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_HeadshotBooster.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_HeadshotBooster.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_InstantReload : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_InstantReload(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_InstantReload> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_InstantReload.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_InstantReload.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_InstantReload.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_InstantReload.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_Ricochet : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_Ricochet(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_Ricochet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Ricochet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Ricochet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Ricochet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_Ricochet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_SiphonBullets : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_SiphonBullets(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Stacks { get; private set; }

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_SiphonBullets> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iStacks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_WeaponUpgrade_SiphonBullets @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Stacks = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SiphonBullets.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SiphonBullets.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SiphonBullets.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SiphonBullets.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_SurgingPower : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_SurgingPower(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_SurgingPower> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SurgingPower.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SurgingPower.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SurgingPower.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_SurgingPower.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadel_WeaponUpgrade_WeaponEater : CCitadel_Item
{
    internal CCitadel_WeaponUpgrade_WeaponEater(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 WeaponPower { get; private set; }

    internal new static SendNodeDecoder<CCitadel_WeaponUpgrade_WeaponEater> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nWeaponPower")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadel_WeaponUpgrade_WeaponEater @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WeaponPower = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_WeaponEater.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_WeaponEater.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_WeaponEater.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadel_WeaponUpgrade_WeaponEater.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelAbilityComponent : CEntityComponent
{
    // MNetworkUserGroup "Abilities"
    // MNetworkChangeCallback "abilitiesChanged"
    // MNetworkPriority 32
    public NetworkedVector<CHandle<CCitadelBaseAbility, DeadlockDemoParser>> Abilities { get; private set; } = new NetworkedVector<CHandle<CCitadelBaseAbility, DeadlockDemoParser>>();

    // MNetworkUserGroup "Abilities"
    // MNetworkPriority 32
    public NetworkedVector<CUtlStringToken> UniversalItems { get; private set; } = new NetworkedVector<CUtlStringToken>();

    // MNetworkUserGroup "Abilities"
    // MNetworkPriority 32
    public NetworkedVector<Int32> PendingAsyncAbilityReservationSlots { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "Abilities"
    // MNetworkPriority 32
    public NetworkedVector<Int32> PendingAsyncAbilityReservationAbilityIDs { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkChangeCallback "AbiCompSelectedAbilityChanged"
    public CHandle<CCitadelBaseAbility, DeadlockDemoParser> SelectedAbilityHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> PreviouslySelectedAbilityHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool PreviousAbilityQueued { get; private set; }

    // MNetworkChangeCallback "AbiCompTimeScaleChanged"
    public float TimeScale { get; private set; }

    // MNetworkChangeCallback "AbiCompParticleTimeScaleChanged"
    public float ParticleTimeScale { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InInterruptState { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public AbilityResource ResourceStamina { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public AbilityResource ResourceAbility { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelAbilityComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecAbilities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelBaseAbility, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Abilities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Abilities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Abilities[index] = element;
                }
            };
        }
        if (field.VarName == "m_vecUniversalItems")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.UniversalItems.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.UniversalItems.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.UniversalItems[index] = element;
                }
            };
        }
        if (field.VarName == "m_arPendingAsyncAbilityReservationSlots")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PendingAsyncAbilityReservationSlots.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PendingAsyncAbilityReservationSlots.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PendingAsyncAbilityReservationSlots[index] = element;
                }
            };
        }
        if (field.VarName == "m_arPendingAsyncAbilityReservationAbilityIDs")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PendingAsyncAbilityReservationAbilityIDs.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PendingAsyncAbilityReservationAbilityIDs.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PendingAsyncAbilityReservationAbilityIDs[index] = element;
                }
            };
        }
        if (field.VarName == "m_hSelectedAbility")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelBaseAbility, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelectedAbilityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPreviouslySelectedAbility")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PreviouslySelectedAbilityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPreviousAbilityQueued")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PreviousAbilityQueued = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flParticleTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParticleTimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInInterruptState")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InInterruptState = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ResourceStamina")
        {
            var innerDecoder = AbilityResource.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ResourceStamina, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ResourceAbility")
        {
            var innerDecoder = AbilityResource.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelAbilityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ResourceAbility, path, ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
public partial class CCitadelAnimatingModelEntity : CBaseAnimGraph
{
    internal CCitadelAnimatingModelEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelRegenComponent"
    // MNetworkAlias "CCitadelRegenComponent"
    // MNetworkTypeAlias "CCitadelRegenComponent"
    public CCitadelRegenComponent CCitadelRegenComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelAnimatingModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelRegenComponent")
        {
            var innerDecoder = CCitadelRegenComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelAnimatingModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelRegenComponent, path, ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelAnimatingModelEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelAnimatingModelEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelAnimatingModelEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelAnimatingModelEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelAutoScaledTime
{
    public GameTime Time { get; private set; } = new();

    internal static SendNodeDecoder<CCitadelAutoScaledTime> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelAutoScaledTime @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Time = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CCitadelAutoScaledTime @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByName "m_flTimeScale"
// MNetworkExcludeByName "m_angRotation"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_cellX"
// MNetworkExcludeByName "m_cellY"
// MNetworkExcludeByName "m_cellZ"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkExcludeByName "m_flSimulationTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_nForceBone"
// MNetworkExcludeByName "m_nHitboxSet"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_vecForce"
// MNetworkExcludeByName "m_vecMaxs"
// MNetworkExcludeByName "m_vecMins"
// MNetworkExcludeByName "m_vecOrigin"
// MNetworkExcludeByName "m_vecSpecifiedSurroundingMaxs"
// MNetworkExcludeByName "m_vecSpecifiedSurroundingMins"
// MNetworkExcludeByName "m_vLookTargetPosition"
// MNetworkExcludeByName "m_MoveCollide"
// MNetworkExcludeByName "m_MoveType"
// MNetworkExcludeByName "m_Gender"
// MNetworkExcludeByName "m_flElasticity"
// MNetworkExcludeByName "m_nMinCPULevel"
// MNetworkExcludeByName "m_nMinGPULevel"
// MNetworkExcludeByName "m_nMaxCPULevel"
// MNetworkExcludeByName "m_nMaxGPULevel"
// MNetworkExcludeByName "m_flNavIgnoreUntilTime"
// MNetworkExcludeByName "m_ubInterpolationFrame"
// MNetworkExcludeByName "m_flScale"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkUserGroupProxy "CCitadelBaseAbility"
// MNetworkUserGroupProxy "CCitadelBaseAbility"
// MNetworkOverride "m_flTimeScale "
public partial class CCitadelBaseAbility : CBaseEntity
{
    internal CCitadelBaseAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnChannelingChanged"
    public bool Channeling { get; private set; }

    // MNetworkChangeCallback "OnInCastDelayChanged"
    public bool InCastDelay { get; private set; }

    // MNetworkChangeCallback "OnAbilityImbuedChanged"
    public NetworkedVector<CUtlStringToken> ImbuedByAbilitiyIDs { get; private set; } = new NetworkedVector<CUtlStringToken>();

    // MNetworkChangeCallback "OnUpgradeBitsChanged"
    // MNetworkPriority 32
    public Int32 UpgradeBits { get; private set; }

    public Int32 BucketID { get; private set; }

    public bool ToggleState { get; private set; }

    // MNetworkPriority 32
    public GameTime CooldownStart { get; private set; } = new();

    // MNetworkPriority 32
    public GameTime CooldownEnd { get; private set; } = new();

    public GameTime CastCompletedTime { get; private set; } = new();

    public GameTime ChannelStartTime { get; private set; } = new();

    public GameTime CastDelayStartTime { get; private set; } = new();

    // MNetworkChangeCallback "OnAbilitySlotChanged"
    public EAbilitySlots AbilitySlot { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime PostCastDelayEndTime { get; private set; } = new();

    // MNetworkPriority 32
    public Int32 RemainingCharges { get; private set; }

    // MNetworkPriority 32
    public GameTime ChargeRechargeStart { get; private set; } = new();

    // MNetworkPriority 32
    public GameTime ChargeRechargeEnd { get; private set; } = new();

    public GameTime MovementControlActiveTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SelectedChangedTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AltCastHoldStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime AltCastDoubleTapStartTime { get; private set; } = new();

    public CUtlStringToken ImbuedAbilityID { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public bool SelectionModeIsAltMode { get; private set; }

    internal new static SendNodeDecoder<CCitadelBaseAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bChanneling")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Channeling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInCastDelay")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InCastDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecImbuedByAbilitiyIDs")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ImbuedByAbilitiyIDs.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ImbuedByAbilitiyIDs.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ImbuedByAbilitiyIDs[index] = element;
                }
            };
        }
        if (field.VarName == "m_nUpgradeBits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UpgradeBits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBucketID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BucketID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bToggleState")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ToggleState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCooldownStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CooldownStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCooldownEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CooldownEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCastCompletedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastCompletedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flChannelStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChannelStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCastDelayStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastDelayStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eAbilitySlot")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EAbilitySlots>(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AbilitySlot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPostCastDelayEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostCastDelayEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRemainingCharges")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RemainingCharges = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flChargeRechargeStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChargeRechargeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flChargeRechargeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChargeRechargeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMovementControlActiveTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MovementControlActiveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSelectedChangedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelectedChangedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAltCastHoldStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AltCastHoldStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAltCastDoubleTapStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AltCastDoubleTapStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nImbuedAbilityID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ImbuedAbilityID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSelectionModeIsAltMode")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelBaseAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelectionModeIsAltMode = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseAbilityServerOnly : CCitadelBaseAbility
{
    internal CCitadelBaseAbilityServerOnly(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelBaseAbilityServerOnly> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbilityServerOnly.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbilityServerOnly.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbilityServerOnly.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseAbilityServerOnly.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseDashCastAbility : CCitadelBaseAbility
{
    internal CCitadelBaseDashCastAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime DashCastStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public Vector DashCastDir { get; private set; }

    internal new static SendNodeDecoder<CCitadelBaseDashCastAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDashCastStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseDashCastAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashCastStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDashCastDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelBaseDashCastAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DashCastDir = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseDashCastAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseDashCastAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseDashCastAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseDashCastAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseLockonAbility : CCitadelBaseAbility
{
    internal CCitadelBaseLockonAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public NetworkedVector<LockonTarget> LockonTargets { get; private set; } = new NetworkedVector<LockonTarget>();

    public GameTime LockOnStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelBaseLockonAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecLockonTargets")
        {
            var innerDecoder = decoderSet.GetDecoder<LockonTarget>(field.FieldSerializerKey!.Value);
            return (CCitadelBaseLockonAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.LockonTargets.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.LockonTargets.EnsureSize(index + 1);
                    var element = @this.LockonTargets[index] ??= new LockonTarget();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_LockOnStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseLockonAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LockOnStartTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseLockonAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseLockonAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseLockonAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseLockonAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseShivAbility : CCitadelBaseAbility
{
    internal CCitadelBaseShivAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelBaseShivAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseShivAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseShivAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseShivAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseShivAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseTriggerAbility : CCitadelBaseAbility
{
    internal CCitadelBaseTriggerAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public CHandle<CCitadelBaseAbility, DeadlockDemoParser> AbilityToTriggerHandle { get; private set; }
    public CCitadelBaseAbility? AbilityToTrigger => AbilityToTriggerHandle.Get(Demo);

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public GameTime SwappedToTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelBaseTriggerAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hAbilityToTrigger")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelBaseAbility, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelBaseTriggerAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AbilityToTriggerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SwappedToTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBaseTriggerAbility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SwappedToTime = decoder(ref buffer);
            };
        }
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseTriggerAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseTriggerAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseTriggerAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseTriggerAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBaseYamatoAbility : CCitadelBaseAbility
{
    internal CCitadelBaseYamatoAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelBaseYamatoAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbility.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBaseYamatoAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBaseYamatoAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseYamatoAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBaseYamatoAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBoomerangProjectile : CCitadelProjectile
{
    internal CCitadelBoomerangProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelBoomerangProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBoomerangProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBoomerangProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBoomerangProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBoomerangProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelBulletTimeWarp : CBaseModelEntity
{
    internal CCitadelBulletTimeWarp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float BulletTimeScale { get; private set; }

    public float ProjectileTimeScale { get; private set; }

    public GameTime ExpireTime { get; private set; } = new();

    public float StopDuration { get; private set; }

    internal new static SendNodeDecoder<CCitadelBulletTimeWarp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flBulletTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelBulletTimeWarp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BulletTimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProjectileTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelBulletTimeWarp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileTimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExpireTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelBulletTimeWarp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExpireTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStopDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelBulletTimeWarp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StopDuration = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelBulletTimeWarp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelBulletTimeWarp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBulletTimeWarp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelBulletTimeWarp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelCatapultTrigger : CBaseTrigger
{
    internal CCitadelCatapultTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector LaunchTarget { get; private set; }

    public float LaunchSpeed { get; private set; }

    internal new static SendNodeDecoder<CCitadelCatapultTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vLaunchTarget")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelCatapultTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LaunchTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLaunchSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelCatapultTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LaunchSpeed = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelCatapultTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelCatapultTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelCatapultTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelCatapultTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelClimbRopeTrigger : CBaseTrigger
{
    internal CCitadelClimbRopeTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelClimbRopeTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelClimbRopeTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelClimbRopeTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelClimbRopeTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelClimbRopeTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelControlPointTrigger : CTriggerMultiple
{
    internal CCitadelControlPointTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float InitialRadius { get; private set; }

    public float EndRadius { get; private set; }

    public float Progress { get; private set; }

    public float CaptureTime { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> UnlockPrereqHandle { get; private set; }
    public CBaseEntity? UnlockPrereq => UnlockPrereqHandle.Get(Demo);

    public bool Available { get; private set; }

    public bool IsBeingCaptured { get; private set; }

    public bool IsBeingBlocked { get; private set; }

    internal new static SendNodeDecoder<CCitadelControlPointTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flInitialRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEndRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProgress")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Progress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCaptureTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CaptureTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hUnlockPrereq")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UnlockPrereqHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAvailable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Available = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsBeingCaptured")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsBeingCaptured = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsBeingBlocked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelControlPointTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsBeingBlocked = decoder(ref buffer);
            };
        }
        return CTriggerMultiple.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelControlPointTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelControlPointTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelControlPointTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelControlPointTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelGameRules : CTeamplayRules
{
    internal static SendNodeDecoder<CCitadelGameRules> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCitadelGameRules> factory)
    {
        if (serializerKey.Name == "CCitadelGameRules")
        {
            factory = () => new CCitadelGameRules();
            return decoderSet.GetDecoder<CCitadelGameRules>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCitadelGameRules: {serializerKey}");
    }

    public bool FreezePeriod { get; private set; }

    public GameTime LevelStartTime { get; private set; } = new();

    public GameTime GameStartTime { get; private set; } = new();

    public GameTime RoundStartTime { get; private set; } = new();

    public EGameState GameState { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TowerAmberHandle { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TowerSapphireHandle { get; private set; }

    public bool EnemyInAmberBase { get; private set; }

    public bool EnemyInSapphireBase { get; private set; }

    public Vector MinimapMins { get; private set; }

    public Vector MinimapMaxs { get; private set; }

    public bool MatchSafeToAbandon { get; private set; }

    public bool NoDeathEnabled { get; private set; }

    public bool FastCooldownsEnabled { get; private set; }

    public bool StaminaCooldownsEnabled { get; private set; }

    public bool UnlimitedAmmoEnabled { get; private set; }

    public bool InfiniteResourcesEnabled { get; private set; }

    public bool FlexSlotsForcedUnlocked { get; private set; }

    public ECitadelMatchMode MatchMode { get; private set; }

    public ECitadelGameMode GameMode { get; private set; }

    public UInt32 SpectatorCount { get; private set; }

    public CHandle<CCitadelTrooperMinimap, DeadlockDemoParser> TrooperMinimapHandle { get; private set; }

    // MNetworkPriority 32
    public CHandle<CBaseEntity, DeadlockDemoParser> CurrentHeroDrafterRebelsHandle { get; private set; }

    // MNetworkPriority 32
    public CHandle<CBaseEntity, DeadlockDemoParser> CurrentHeroDrafterCombineHandle { get; private set; }

    public bool ServerPaused { get; private set; }

    public Int32 PauseTeam { get; private set; }

    public Int32 MatchClockUpdateTick { get; private set; }

    public float MatchClockAtLastUpdate { get; private set; }

    public bool RequiresReportCardDismissal { get; private set; }

    public Int32 GGTeam { get; private set; }

    public GameTime GGEndsAtTime { get; private set; } = new();

    public MatchID MatchID { get; private set; } = new();

    public Int32 ExperimentalGameplayState { get; private set; }

    public GameTime HeroDiedTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bFreezePeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FreezePeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLevelStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LevelStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGameStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRoundStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eGameState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EGameState>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTowerAmber")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TowerAmberHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTowerSapphire")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TowerSapphireHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnemyInAmberBase")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyInAmberBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnemyInSapphireBase")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyInSapphireBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinimapMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinimapMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMatchSafeToAbandon")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchSafeToAbandon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoDeathEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoDeathEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFastCooldownsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FastCooldownsEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStaminaCooldownsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StaminaCooldownsEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUnlimitedAmmoEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UnlimitedAmmoEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInfiniteResourcesEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InfiniteResourcesEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlexSlotsForcedUnlocked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlexSlotsForcedUnlocked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eMatchMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ECitadelMatchMode>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eGameMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ECitadelGameMode>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unSpectatorCount")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpectatorCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTrooperMinimap")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelTrooperMinimap, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TrooperMinimapHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCurrentHeroDrafterRebels")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentHeroDrafterRebelsHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCurrentHeroDrafterCombine")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentHeroDrafterCombineHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bServerPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ServerPaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPauseTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PauseTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMatchClockUpdateTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchClockUpdateTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMatchClockAtLastUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchClockAtLastUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRequiresReportCardDismissal")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RequiresReportCardDismissal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eGGTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GGTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGGEndsAtTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GGEndsAtTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unMatchID")
        {
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchID = MatchID.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_nExperimentalGameplayState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExperimentalGameplayState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeroDiedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroDiedTime = decoder(ref buffer);
            };
        }
        return CTeamplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelGameRulesProxy : CGameRulesProxy
{
    internal CCitadelGameRulesProxy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkTypeAlias "CCitadelGamerules*"
    // MNetworkPriority 32
    public CCitadelGameRules? GameRules { get; private set; }

    internal new static SendNodeDecoder<CCitadelGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pGameRules")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCitadelGameRules.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCitadelGameRulesProxy @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.GameRules = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.GameRules ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CGameRulesProxy.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelGameRulesProxy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelGameRulesProxy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelGameRulesProxy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelGameRulesProxy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelHeroComponent : CEntityComponent
{
    // MNetworkChangeCallback "OnHeroChanged"
    public HeroID HeroID { get; private set; } = new();

    // MNetworkPriority 32
    public HeroID HeroLoading { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelHeroComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nHeroID")
        {
            return (CCitadelHeroComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroID = HeroID.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_nHeroLoading")
        {
            return (CCitadelHeroComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroLoading = HeroID.Decode(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelHornetStingProjectile : CCitadelProjectile
{
    internal CCitadelHornetStingProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelHornetStingProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelHornetStingProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelHornetStingProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelHornetStingProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelHornetStingProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelIdolReturnTrigger : CTriggerModifier
{
    internal CCitadelIdolReturnTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelIdolReturnTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelIdolReturnTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        return CTriggerModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelIdolReturnTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelIdolReturnTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelIdolReturnTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelIdolReturnTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelItemPickup : CCitadelAnimatingModelEntity
{
    internal CCitadelItemPickup(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public Int32 LootType { get; private set; }

    public Int32 CurrencyValue { get; private set; }

    public NetworkedString ModelName { get; private set; }

    public float ModelScale { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetPlayerHandle { get; private set; }
    public CBaseEntity? TargetPlayer => TargetPlayerHandle.Get(Demo);

    public float FallRate { get; private set; }

    internal new static SendNodeDecoder<CCitadelItemPickup> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_eLootType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LootType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCurrencyValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrencyValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszModelName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ModelName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flModelScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ModelScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetPlayerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFallRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelItemPickup @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallRate = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickup.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelItemPickup.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickup.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickup.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelItemPickupIdol : CCitadelItemPickup
{
    internal CCitadelItemPickupIdol(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelItemPickupIdol> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelItemPickup.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupIdol.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupIdol.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupIdol.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupIdol.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelItemPickupRejuv : CCitadelItemPickup
{
    internal CCitadelItemPickupRejuv(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelAbilityComponent"
    // MNetworkAlias "CCitadelAbilityComponent"
    // MNetworkTypeAlias "CCitadelAbilityComponent"
    public CCitadelAbilityComponent CCitadelAbilityComponent { get; private set; } = new();

    public bool PickedUp { get; private set; }

    internal new static SendNodeDecoder<CCitadelItemPickupRejuv> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelAbilityComponent")
        {
            var innerDecoder = CCitadelAbilityComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelItemPickupRejuv @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelAbilityComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_bPickedUp")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelItemPickupRejuv @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PickedUp = decoder(ref buffer);
            };
        }
        return CCitadelItemPickup.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuv.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuv.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuv.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuv.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelItemPickupRejuvHeroTest : CCitadelItemPickupRejuv
{
    internal CCitadelItemPickupRejuvHeroTest(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelItemPickupRejuvHeroTest> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelItemPickupRejuv.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuvHeroTest.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuvHeroTest.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuvHeroTest.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelItemPickupRejuvHeroTest.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelMinimapBoundary : CBaseEntity
{
    internal CCitadelMinimapBoundary(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelMinimapBoundary> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelMinimapBoundary.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelMinimapBoundary.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelMinimapBoundary.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelMinimapBoundary.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelMinimapComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CCitadelMinimapComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
public partial class CCitadelModelEntity : CBaseModelEntity
{
    internal CCitadelModelEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelRegenComponent"
    // MNetworkAlias "CCitadelRegenComponent"
    // MNetworkTypeAlias "CCitadelRegenComponent"
    public CCitadelRegenComponent CCitadelRegenComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelRegenComponent")
        {
            var innerDecoder = CCitadelRegenComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelRegenComponent, path, ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelModelEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelModelEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelModelEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelModelEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelObserver_MovementServices : CPlayer_MovementServices
{
    internal new static SendNodeDecoder<CCitadelObserver_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkVarTypeOverride "CCitadelPlayer_ObserverServices m_pObserverServices"
// MNetworkIncludeByName "m_pObserverServices"
// MNetworkVarTypeOverride "CCitadelPlayer_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
// MNetworkVarTypeOverride "CCitadelObserver_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
public partial class CCitadelObserverPawn : CCitadelPlayerPawnBase
{
    internal CCitadelObserverPawn(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public new CCitadelPlayer_ObserverServices? ObserverServices
    {
        get => (CCitadelPlayer_ObserverServices?) base.ObserverServices;
    }

    public new CCitadelPlayer_CameraServices? CameraServices
    {
        get => (CCitadelPlayer_CameraServices?) base.CameraServices;
    }

    public new CCitadelObserver_MovementServices? MovementServices
    {
        get => (CCitadelObserver_MovementServices?) base.MovementServices;
    }

    internal new static SendNodeDecoder<CCitadelObserverPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelObserverPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelObserverPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelObserverPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelObserverPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPayload : CCitadelAnimatingModelEntity
{
    internal CCitadelPayload(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Progress { get; private set; }

    public Int32 NumPushers { get; private set; }

    internal new static SendNodeDecoder<CCitadelPayload> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flProgress")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPayload @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Progress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumPushers")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPayload @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumPushers = decoder(ref buffer);
            };
        }
        return CCitadelAnimatingModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPayload.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPayload.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPayload.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPayload.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPlayer_CameraServices : CPlayer_CameraServices
{
    internal new static SendNodeDecoder<CCitadelPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelPlayer_MovementServices : CPlayer_MovementServices_Humanoid
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    public CNetworkVelocityVector PositionDeltaVelocity { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vPositionDeltaVelocity")
        {
            var innerDecoder = CNetworkVelocityVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.PositionDeltaVelocity, path, ref buffer);
            };
        }
        return CPlayer_MovementServices_Humanoid.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelPlayer_ObserverServices : CPlayer_ObserverServices
{
    // MNetworkChangeCallback "LocalPlayerExclusive"
    public CHandle<CBaseEntity, DeadlockDemoParser> OverrideObserverTargetHandle { get; private set; }

    // MNetworkChangeCallback "LocalPlayerExclusive"
    public ObserverMode OverrideObserverMode { get; private set; }

    public Int32 SecondsAfterDeathToAllowObserving { get; private set; }

    // MNetworkEncoder "qangle"
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkBitCount 11
    // MNetworkPriority 32
    public QAngle TargetCamera { get; private set; }

    // MNetworkEncoder "coord"
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    public Vector TargetCameraPos { get; private set; }

    internal new static SendNodeDecoder<CCitadelPlayer_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hOverrideObserverTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideObserverTargetHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOverrideObserverMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ObserverMode>(field.FieldEncodingInfo);
            return (CCitadelPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideObserverMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSecondsAfterDeathToAllowObserving")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SecondsAfterDeathToAllowObserving = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angTargetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadelPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTargetCameraPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetCameraPos = decoder(ref buffer);
            };
        }
        return CPlayer_ObserverServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelPlayerBotNPCBrain : CAI_CitadelNPC
{
    internal CCitadelPlayerBotNPCBrain(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelPlayerBotNPCBrain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerBotNPCBrain.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPlayerBotNPCBrain.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerBotNPCBrain.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerBotNPCBrain.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPlayerClipComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CCitadelPlayerClipComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelPlayerController : CBasePlayerController
{
    internal CCitadelPlayerController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public EPlayerPlayState PlayState { get; private set; }

    public Int32 GuidedBotMatchLastHits { get; private set; }

    public Int32 GuidedBotMatchOrbsSecured { get; private set; }

    public Int32 GuidedBotMatchOrbsDenied { get; private set; }

    public Int32 GuidedBotMatchDamageToGuardians { get; private set; }

    public Int32 GuidedBotMatchDamageToPlayers { get; private set; }

    public Int32 GuidedBotMatchDamageTaken { get; private set; }

    public Int32 GuidedBotMatchNetWorth { get; private set; }

    public Int32 GuidedBotMatchModsPurchased { get; private set; }

    public Int32 GuidedBotMatchAbilityUpgrades { get; private set; }

    public float GuideBotMatchLastTaskNagVO { get; private set; }

    public float GuideBotLastTimeTaskCompleted { get; private set; }

    public EGuidedBotMatchObjective GuidedBotMatchObjective { get; private set; }

    public Int32 CurrentRank { get; private set; }

    // MNetworkChangeCallback "AssignedLaneChanged"
    public sbyte AssignedLane { get; private set; }

    public sbyte OriginalLaneAssignment { get; private set; }

    public bool IsKingPanda { get; private set; }

    public bool BotDisconnectTakeover { get; private set; }

    // MNetworkChangeCallback "ChatGroupsChanged"
    public bool InTeamChat { get; private set; }

    // MNetworkChangeCallback "ChatGroupsChanged"
    public bool InPartyChat { get; private set; }

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public HeroBuildID HeroBuildID { get; private set; } = new();

    public CHandle<CCitadelPlayerPawn, DeadlockDemoParser> HeroPawnHandle { get; private set; }
    public CCitadelPlayerPawn? HeroPawn => HeroPawnHandle.Get(Demo);

    public PlayerDataGlobal PlayerDataGlobal { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerOwnerAndObserversExclusive"
    public sbyte DeathReplayAvailable { get; private set; }

    public CitadelLobbyPlayerSlot LobbyPlayerSlot { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelPlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ePlayState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EPlayerPlayState>(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchLastHits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchLastHits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchOrbsSecured")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchOrbsSecured = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchOrbsDenied")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchOrbsDenied = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchDamageToGuardians")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchDamageToGuardians = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchDamageToPlayers")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchDamageToPlayers = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchDamageTaken")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchDamageTaken = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchNetWorth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchNetWorth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchModsPurchased")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchModsPurchased = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGuidedBotMatchAbilityUpgrades")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchAbilityUpgrades = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGuideBotMatchLastTaskNagVO")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuideBotMatchLastTaskNagVO = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGuideBotLastTimeTaskCompleted")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuideBotLastTimeTaskCompleted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eGuidedBotMatchObjective")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EGuidedBotMatchObjective>(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuidedBotMatchObjective = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCurrentRank")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentRank = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAssignedLane")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AssignedLane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOriginalLaneAssignment")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalLaneAssignment = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsKingPanda")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsKingPanda = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBotDisconnectTakeover")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BotDisconnectTakeover = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInTeamChat")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InTeamChat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInPartyChat")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InPartyChat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unHeroBuildID")
        {
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroBuildID = HeroBuildID.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_hHeroPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelPlayerPawn, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroPawnHandle = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_PlayerDataGlobal")
        {
            var innerDecoder = PlayerDataGlobal.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.PlayerDataGlobal, path, ref buffer);
            };
        }
        if (field.VarName == "m_nDeathReplayAvailable")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeathReplayAvailable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unLobbyPlayerSlot")
        {
            return (CCitadelPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LobbyPlayerSlot = CitadelLobbyPlayerSlot.Decode(ref buffer);
            };
        }
        return CBasePlayerController.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPlayerController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
// MNetworkUserGroupProxy "CCitadelPlayerPawn"
// MNetworkUserGroupProxy "CCitadelPlayerPawn"
// MNetworkVarTypeOverride "CCitadelPlayer_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
// MNetworkVarTypeOverride "CCitadelPlayer_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
public partial class CCitadelPlayerPawn : CCitadelPlayerPawnBase
{
    internal CCitadelPlayerPawn(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public new CCitadelPlayer_CameraServices? CameraServices
    {
        get => (CCitadelPlayer_CameraServices?) base.CameraServices;
    }

    public new CCitadelPlayer_MovementServices? MovementServices
    {
        get => (CCitadelPlayer_MovementServices?) base.MovementServices;
    }

    // MNetworkUserGroup "SourceTVExclusive"
    // MNetworkBitCount 11
    // MNetworkPriority 32
    public QAngle ClientCamera { get; private set; }

    // MNetworkUserGroup "RemotePlayersOnly"
    // MNetworkEncoder "qangle"
    // MNetworkBitCount 11
    // MNetworkPriority 32
    public QAngle EyeAngles { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public QAngle LockedEyeAngles { get; private set; }

    public Int32 Level { get; private set; }

    public Int32[] Currencies { get; private set; } = Array.Empty<Int32>();

    public Int32[] SpentCurrencies { get; private set; } = Array.Empty<Int32>();

    public GameTime RespawnTime { get; private set; } = new();

    public GameTime LastSpawnTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public bool InRegenerationZone { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InItemShopZone { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public GameTime TimeRevealedOnMinimapByNPC { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<CUtlStringToken> FullSellPriceItems { get; private set; } = new NetworkedVector<CUtlStringToken>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<FullSellPriceAbilityUpgrades> FullSellPriceAbilityUpgrades { get; private set; } = new NetworkedVector<FullSellPriceAbilityUpgrades>();

    public bool NetworkDisconnected { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool HasIncomingThreats { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool LearningAbility { get; private set; }

    public Int32 FlashStartTick { get; private set; }

    public Int32 FlashMaxStartTick { get; private set; }

    public Int32 FlashFadeStartTick { get; private set; }

    public Int32 FlashEndTick { get; private set; }

    public sbyte FlashMaxAlpha { get; private set; }

    public Int32 DeducedLane { get; private set; }

    public bool DismissedReportCard { get; private set; }

    public float CurrentHealingAmount { get; private set; }

    // MNetworkUserGroup "CCitadelAbilityComponent"
    // MNetworkAlias "CCitadelAbilityComponent"
    // MNetworkTypeAlias "CCitadelAbilityComponent"
    // MNetworkPriority 32
    public CCitadelAbilityComponent CCitadelAbilityComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelHeroComponent"
    // MNetworkAlias "CCitadelHeroComponent"
    // MNetworkTypeAlias "CCitadelHeroComponent"
    public CCitadelHeroComponent CCitadelHeroComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelRegenComponent"
    // MNetworkAlias "CCitadelRegenComponent"
    // MNetworkTypeAlias "CCitadelRegenComponent"
    public CCitadelRegenComponent CCitadelRegenComponent { get; private set; } = new();

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CMsgLaneColor ZipLineLaneColor { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public sbyte SuccessiveDucks { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime LastDuckTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool AnimGraphMovementClipped { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool AnimGraphMovementDisableGravity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool AnimGraphMovementDirectAirControl { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime PredTimeSlowedStart { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime PredTimeSlowedEnd { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float PredSlowSpeed { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime[] TimeSlowedStart { get; private set; } = Array.Empty<GameTime>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime[] TimeSlowedEnd { get; private set; } = Array.Empty<GameTime>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float[] SlowSpeed { get; private set; } = Array.Empty<float>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime SprintAnimSuppressEndTime { get; private set; } = new();

    internal new static SendNodeDecoder<CCitadelPlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_angClientCamera")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EyeAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angLockedEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LockedEyeAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Level = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCurrencies")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Currencies.Length == 0) @this.Currencies = new Int32[fixedArraySize];
                @this.Currencies[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSpentCurrencies")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.SpentCurrencies.Length == 0) @this.SpentCurrencies = new Int32[fixedArraySize];
                @this.SpentCurrencies[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRespawnTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RespawnTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastSpawnTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastSpawnTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInRegenerationZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InRegenerationZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInItemShopZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InItemShopZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timeRevealedOnMinimapByNPC")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeRevealedOnMinimapByNPC = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecFullSellPriceItems")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FullSellPriceItems.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.FullSellPriceItems.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.FullSellPriceItems[index] = element;
                }
            };
        }
        if (field.VarName == "m_vecFullSellPriceAbilityUpgrades")
        {
            var innerDecoder = decoderSet.GetDecoder<FullSellPriceAbilityUpgrades>(field.FieldSerializerKey!.Value);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FullSellPriceAbilityUpgrades.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.FullSellPriceAbilityUpgrades.EnsureSize(index + 1);
                    var element = @this.FullSellPriceAbilityUpgrades[index] ??= new FullSellPriceAbilityUpgrades();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bNetworkDisconnected")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NetworkDisconnected = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasIncomingThreats")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasIncomingThreats = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLearningAbility")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LearningAbility = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlashStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlashMaxStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashMaxStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlashFadeStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashFadeStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlashEndTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashEndTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlashMaxAlpha")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashMaxAlpha = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDeducedLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeducedLane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDismissedReportCard")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DismissedReportCard = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCurrentHealingAmount")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentHealingAmount = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelAbilityComponent")
        {
            var innerDecoder = CCitadelAbilityComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelAbilityComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelHeroComponent")
        {
            var innerDecoder = CCitadelHeroComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelHeroComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelRegenComponent")
        {
            var innerDecoder = CCitadelRegenComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelRegenComponent, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_eZipLineLaneColor")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CMsgLaneColor>(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZipLineLaneColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSuccessiveDucks")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SuccessiveDucks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastDuckTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastDuckTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphMovementClipped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraphMovementClipped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphMovementDisableGravity")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraphMovementDisableGravity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphMovementDirectAirControl")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraphMovementDirectAirControl = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPredTimeSlowedStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PredTimeSlowedStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPredTimeSlowedEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PredTimeSlowedEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPredSlowSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PredSlowSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeSlowedStart")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TimeSlowedStart.Length == 0) @this.TimeSlowedStart = new GameTime[fixedArraySize];
                @this.TimeSlowedStart[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeSlowedEnd")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TimeSlowedEnd.Length == 0) @this.TimeSlowedEnd = new GameTime[fixedArraySize];
                @this.TimeSlowedEnd[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlowSpeed")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.SlowSpeed.Length == 0) @this.SlowSpeed = new float[fixedArraySize];
                @this.SlowSpeed[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSprintAnimSuppressEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SprintAnimSuppressEndTime = decoder(ref buffer);
            };
        }
        return CCitadelPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPlayerPawnBase : CBasePlayerPawn
{
    internal CCitadelPlayerPawnBase(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelPlayerPawnBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBasePlayerPawn.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawnBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawnBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawnBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPlayerPawnBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPositionHomingProjectile : CCitadelTrackedProjectile
{
    internal CCitadelPositionHomingProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelPositionHomingProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelTrackedProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPositionHomingProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPositionHomingProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPositionHomingProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPositionHomingProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelPreviewPlayerController : CCitadelPlayerController
{
    internal CCitadelPreviewPlayerController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelPreviewPlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelPlayerController.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelPreviewPlayerController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelPreviewPlayerController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPreviewPlayerController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelPreviewPlayerController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_flTimeScale"
// MNetworkOverride "m_flTimeScale "
// MNetworkOverride "m_flTimeScale "
public partial class CCitadelProjectile : CBaseModelEntity
{
    internal CCitadelProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector InitialVelocity { get; private set; }

    public Vector InitialPosition { get; private set; }

    public CUtlStringToken AbilityID { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> ThrowerHandle { get; private set; }
    public CBaseEntity? Thrower => ThrowerHandle.Get(Demo);

    public NetworkedString ParticleName { get; private set; }

    public Vector SpawnPosition { get; private set; }

    public float ProjectileSpeed { get; private set; }

    public float MaxLifetime { get; private set; }

    public float ParticleRadius { get; private set; }

    internal new static SendNodeDecoder<CCitadelProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vInitialVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vInitialPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_abilityID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AbilityID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hThrower")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sParticleName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParticleName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpawnPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpawnPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProjectileSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectileSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxLifetime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxLifetime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flParticleRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParticleRadius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelProjectile_ImmobilizeTrap : CCitadelProjectile
{
    internal CCitadelProjectile_ImmobilizeTrap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelProjectile_ImmobilizeTrap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile_ImmobilizeTrap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelProjectile_ImmobilizeTrap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile_ImmobilizeTrap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelProjectile_ImmobilizeTrap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelRegenComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CCitadelRegenComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCitadelSoundOpvarSetOBB : CBaseEntity
{
    internal CCitadelSoundOpvarSetOBB(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString StackName { get; private set; }

    public NetworkedString OperatorName { get; private set; }

    public NetworkedString OpvarName { get; private set; }

    public Vector DistanceInnerMins { get; private set; }

    public Vector DistanceInnerMaxs { get; private set; }

    public Vector DistanceOuterMins { get; private set; }

    public Vector DistanceOuterMaxs { get; private set; }

    public Int32 AABBDirection { get; private set; }

    internal new static SendNodeDecoder<CCitadelSoundOpvarSetOBB> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszStackName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StackName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOperatorName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OperatorName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOpvarName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OpvarName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDistanceInnerMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DistanceInnerMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDistanceInnerMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DistanceInnerMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDistanceOuterMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DistanceOuterMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDistanceOuterMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DistanceOuterMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAABBDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelSoundOpvarSetOBB @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AABBDirection = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelSoundOpvarSetOBB.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelSoundOpvarSetOBB.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSoundOpvarSetOBB.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSoundOpvarSetOBB.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelSpawnBlocker : CFuncBrush
{
    internal CCitadelSpawnBlocker(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelSpawnBlocker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelSpawnBlocker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelSpawnBlocker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpawnBlocker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpawnBlocker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelSpectateDirectedCamera : CBaseEntity
{
    internal CCitadelSpectateDirectedCamera(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkPriority 32
    public float CameraDist { get; private set; }

    public float CameraPitch { get; private set; }

    public float CameraHeight { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetHandle { get; private set; }
    public CBaseEntity? Target => TargetHandle.Get(Demo);

    internal new static SendNodeDecoder<CCitadelSpectateDirectedCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flCameraDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelSpectateDirectedCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CameraDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCameraPitch")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelSpectateDirectedCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CameraPitch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCameraHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelSpectateDirectedCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CameraHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelSpectateDirectedCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetHandle = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateDirectedCamera.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelSpectateDirectedCamera.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateDirectedCamera.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateDirectedCamera.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelSpectateNode : CBaseEntity
{
    internal CCitadelSpectateNode(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelSpectateNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateNode.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelSpectateNode.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateNode.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelSpectateNode.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelTeam : CTeam
{
    internal CCitadelTeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> PayloadHandle { get; private set; }
    public CBaseEntity? Payload => PayloadHandle.Get(Demo);

    public Int32 BossesAlive { get; private set; }

    public Int32 BossesMax { get; private set; }

    public EFlexSlotTypes FlexSlotsUnlocked { get; private set; }

    // MNetworkSendProxyRecipientsFilter
    // MNetworkPriority 32
    public NetworkedVector<STeamFOWEntity> FOWEntities { get; private set; } = new NetworkedVector<STeamFOWEntity>();

    internal new static SendNodeDecoder<CCitadelTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPayload")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PayloadHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBossesAlive")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BossesAlive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBossesMax")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCitadelTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BossesMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlexSlotsUnlocked")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EFlexSlotTypes>(field.FieldEncodingInfo);
            return (CCitadelTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlexSlotsUnlocked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecFOWEntities")
        {
            var innerDecoder = decoderSet.GetDecoder<STeamFOWEntity>(field.FieldSerializerKey!.Value);
            return (CCitadelTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FOWEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.FOWEntities.EnsureSize(index + 1);
                    var element = @this.FOWEntities[index] ??= new STeamFOWEntity();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CTeam.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelTeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelTeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelTeleportTrigger : CTriggerModifier
{
    internal CCitadelTeleportTrigger(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public Vector ExitOrigin { get; private set; }

    internal new static SendNodeDecoder<CCitadelTeleportTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCitadelTeleportTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_vExitOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCitadelTeleportTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExitOrigin = decoder(ref buffer);
            };
        }
        return CTriggerModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelTeleportTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelTeleportTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTeleportTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTeleportTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelTrackedProjectile : CCitadelProjectile
{
    internal CCitadelTrackedProjectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelTrackedProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelTrackedProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelTrackedProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTrackedProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTrackedProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelTrooperMinimap : CBaseEntity
{
    internal CCitadelTrooperMinimap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkPriority 32
    public GameTime TimeLastUpdate { get; private set; } = new();

    // MNetworkPriority 32
    public NetworkedVector<STrooperFOWEntity> FOWEntities { get; private set; } = new NetworkedVector<STrooperFOWEntity>();

    internal new static SendNodeDecoder<CCitadelTrooperMinimap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_timeLastUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCitadelTrooperMinimap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeLastUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecFOWEntities")
        {
            var innerDecoder = decoderSet.GetDecoder<STrooperFOWEntity>(field.FieldSerializerKey!.Value);
            return (CCitadelTrooperMinimap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FOWEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.FOWEntities.EnsureSize(index + 1);
                    var element = @this.FOWEntities[index] ??= new STrooperFOWEntity();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelTrooperMinimap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelTrooperMinimap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTrooperMinimap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelTrooperMinimap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelViscousBall : CCitadelModelEntity
{
    internal CCitadelViscousBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelViscousBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelViscousBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelViscousBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelViscousBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelViscousBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelZipLineNode : CBaseModelEntity
{
    internal CCitadelZipLineNode(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "connectionsChanged"
    public NetworkedVector<CHandle<CCitadelZipLineNode, DeadlockDemoParser>> Connections { get; private set; } = new NetworkedVector<CHandle<CCitadelZipLineNode, DeadlockDemoParser>>();

    public Int16 CaptureState { get; private set; }

    public Int16 PrimaryLane { get; private set; }

    public Int16 RopesParity { get; private set; }

    public bool CornerNode { get; private set; }

    public bool Capturable { get; private set; }

    public bool AlwaysUsable { get; private set; }

    public bool OneWay { get; private set; }

    public bool DisableZippingToByPlayers { get; private set; }

    public bool UseForMinimapDrawing { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> GuardingBossHandle { get; private set; }
    public CBaseEntity? GuardingBoss => GuardingBossHandle.Get(Demo);

    public float RopeRadius { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CCitadelZipLineNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecConnections")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCitadelZipLineNode, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Connections.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Connections.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Connections[index] = element;
                }
            };
        }
        if (field.VarName == "m_eCaptureState")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CaptureState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPrimaryLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrimaryLane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRopesParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopesParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCornerNode")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CornerNode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCapturable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Capturable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlwaysUsable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlwaysUsable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOneWay")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OneWay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDisableZippingToByPlayers")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisableZippingToByPlayers = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseForMinimapDrawing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseForMinimapDrawing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hGuardingBoss")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuardingBossHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRopeRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCitadelZipLineNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelZipLineNode.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelZipLineNode.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelZipLineNode.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelZipLineNode.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCitadelZiplinePath : CPathParticleRope
{
    internal CCitadelZiplinePath(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCitadelZiplinePath> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPathParticleRope.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CCitadelZiplinePath.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCitadelZiplinePath.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCitadelZiplinePath.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCitadelZiplinePath.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCollisionProperty
{
    // MNetworkChangeCallback "CollisionAttributeChanged"
    public VPhysicsCollisionAttribute CollisionAttribute { get; private set; } = new();

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Mins { get; private set; }

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Maxs { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidFlags"
    public byte SolidFlags { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidType"
    public SolidType SolidType { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public byte TriggerBloat { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public SurroundingBoundsType SurroundType { get; private set; }

    public byte CollisionGroup { get; private set; }

    // MNetworkChangeCallback "OnUpdateEnablePhysics"
    public byte EnablePhysics { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMins { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMaxs { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public Vector CapsuleCenter1 { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public Vector CapsuleCenter2 { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public float CapsuleRadius { get; private set; }

    internal static SendNodeDecoder<CCollisionProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_collisionAttribute")
        {
            var innerDecoder = VPhysicsCollisionAttribute.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CollisionAttribute, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usSolidFlags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SolidFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSolidType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SolidType>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SolidType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_triggerBloat")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TriggerBloat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSurroundType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SurroundingBoundsType>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SurroundType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_CollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnablePhysics")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnablePhysics = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpecifiedSurroundingMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpecifiedSurroundingMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter1")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleCenter1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter2")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleCenter2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleRadius = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByUserGroup "Origin"
public partial class CColorCorrection : CBaseEntity
{
    internal CColorCorrection(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeInDuration { get; private set; }

    public float FadeOutDuration { get; private set; }

    public float MaxWeight { get; private set; }

    public bool Enabled { get; private set; }

    public bool Master { get; private set; }

    public bool ClientSide { get; private set; }

    public bool Exclusive { get; private set; }

    public float MinFalloff { get; private set; }

    public float MaxFalloff { get; private set; }

    public float CurWeight { get; private set; }

    public string NetlookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrection> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Master = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSide")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExclusive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exclusive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MinFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCurWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_netlookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NetlookupFilename = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CColorCorrection.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CColorCorrection.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrection.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrection.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CColorCorrectionVolume : CBaseTrigger
{
    internal CColorCorrectionVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Enabled { get; private set; }

    public float MaxWeight { get; private set; }

    public float FadeDuration { get; private set; }

    public float Weight { get; private set; }

    public string LookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrectionVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Weight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Weight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LookupFilename = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CConditionalCollidable : CBaseModelEntity
{
    internal CConditionalCollidable(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CConditionalCollidable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CConditionalCollidable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CConditionalCollidable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CConditionalCollidable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CConditionalCollidable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDynamicLight : CBaseModelEntity
{
    internal CDynamicLight(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public byte DynamicLightFlags { get; private set; }

    public byte LightStyle { get; private set; }

    public float Radius { get; private set; }

    public Int32 Exponent { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    public float InnerAngle { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    public float OuterAngle { get; private set; }

    public float SpotRadius { get; private set; }

    internal new static SendNodeDecoder<CDynamicLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Flags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DynamicLightFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyle")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Exponent")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_InnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotRadius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CDynamicLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDynamicLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDynamicLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDynamicLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CDynamicProp : CBreakableProp
{
    internal CDynamicProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool UseHitboxesForRenderBox { get; private set; }

    public bool UseAnimGraph { get; private set; }

    internal new static SendNodeDecoder<CDynamicProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bUseHitboxesForRenderBox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseHitboxesForRenderBox = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAnimGraph")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseAnimGraph = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CDynamicProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDynamicProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDynamicProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDynamicProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEconEntity : CBaseFlex
{
    internal CEconEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CAttributeContainer AttributeManager { get; private set; } = new();

    internal new static SendNodeDecoder<CEconEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeManager")
        {
            var innerDecoder = CAttributeContainer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AttributeManager, path, ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEconEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEconEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEconEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEconEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEconItemAttribute
{
    public AttribDefinitionIndex AttributeDefinitionIndex { get; private set; } = new();

    // MNetworkAlias "m_iRawValue32"
    public float Value { get; private set; }

    internal static SendNodeDecoder<CEconItemAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iAttributeDefinitionIndex")
        {
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttributeDefinitionIndex = AttribDefinitionIndex.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_iRawValue32")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Value = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEconItemView : IEconItemInterface
{
    public ItemDefinitionIndex ItemDefinitionIndex { get; private set; } = new();

    public Int32 EntityQuality { get; private set; }

    public UInt32 EntityLevel { get; private set; }

    public ItemID ItemID { get; private set; } = new();

    public UInt32 AccountID { get; private set; }

    public UInt32 InventoryPosition { get; private set; }

    public bool Initialized { get; private set; }

    public StyleIndex OverrideStyle { get; private set; } = new();

    public CAttributeList AttributeList { get; private set; } = new();

    internal new static SendNodeDecoder<CEconItemView> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iItemDefinitionIndex")
        {
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemDefinitionIndex = ItemDefinitionIndex.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityQuality")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityLevel")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iItemID")
        {
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemID = ItemID.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_iAccountID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AccountID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInventoryPosition")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InventoryPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInitialized")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Initialized = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOverrideStyle")
        {
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideStyle = StyleIndex.Decode(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeList")
        {
            var innerDecoder = CAttributeList.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AttributeList, path, ref buffer);
            };
        }
        return IEconItemInterface.CreateFieldDecoder(field, decoderSet);
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEconWearable : CEconEntity
{
    internal CEconWearable(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CEconWearable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEconEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEconWearable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEconWearable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEconWearable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEconWearable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEntityDissolve : CBaseModelEntity
{
    internal CEntityDissolve(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeInStart { get; private set; }

    public float FadeInLength { get; private set; }

    public float FadeOutModelStart { get; private set; }

    public float FadeOutModelLength { get; private set; }

    public float FadeOutStart { get; private set; }

    public float FadeOutLength { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public EntityDisolveType DissolveType { get; private set; }

    public Vector DissolverOrigin { get; private set; }

    public UInt32 Magnitude { get; private set; }

    internal new static SendNodeDecoder<CEntityDissolve> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutModelStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutModelLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDissolveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EntityDisolveType>(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissolveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDissolverOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissolverOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMagnitude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Magnitude = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEntityDissolve.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEntityFlame : CBaseEntity
{
    internal CEntityFlame(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> EntAttachedHandle { get; private set; }
    public CBaseEntity? EntAttached => EntAttachedHandle.Get(Demo);

    public bool CheapEffect { get; private set; }

    internal new static SendNodeDecoder<CEntityFlame> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hEntAttached")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntAttachedHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCheapEffect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CheapEffect = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEntityFlame.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEntityFlame.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEntityFlame.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEntityFlame.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvCombinedLightProbeVolume : CBaseEntity
{
    internal CEnvCombinedLightProbeVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "StateChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "StateChanged"
    public float Brightness { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture { get; private set; }

    public bool CustomCubemapTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 EnvCubeMapArrayIndex { get; private set; }

    public Int32 Priority { get; private set; }

    public bool StartDisabled { get; private set; }

    public float EdgeFadeDist { get; private set; }

    public Vector EdgeFadeDists { get; private set; }

    public Int32 LightProbeSizeX { get; private set; }

    public Int32 LightProbeSizeY { get; private set; }

    public Int32 LightProbeSizeZ { get; private set; }

    public Int32 LightProbeAtlasX { get; private set; }

    public Int32 LightProbeAtlasY { get; private set; }

    public Int32 LightProbeAtlasZ { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCombinedLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Entity_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvCubemap : CBaseEntity
{
    internal CEnvCubemap(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture { get; private set; }

    public bool CustomCubemapTexture { get; private set; }

    public float InfluenceRadius { get; private set; }

    public Vector BoxProjectMins { get; private set; }

    public Vector BoxProjectMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 EnvCubeMapArrayIndex { get; private set; }

    public Int32 Priority { get; private set; }

    public float EdgeFadeDist { get; private set; }

    public Vector EdgeFadeDists { get; private set; }

    public float DiffuseScale { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool DefaultEnvMap { get; private set; }

    public bool DefaultSpecEnvMap { get; private set; }

    public bool IndoorCubeMap { get; private set; }

    public bool CopyDiffuseFromDefaultCubemap { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Entity_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_flInfluenceRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InfluenceRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxProjectMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxProjectMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxProjectMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxProjectMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_flDiffuseScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DiffuseScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bDefaultEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bDefaultSpecEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultSpecEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bIndoorCubeMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndoorCubeMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bCopyDiffuseFromDefaultCubemap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CopyDiffuseFromDefaultCubemap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCubemap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvCubemapFog : CBaseEntity
{
    internal CEnvCubemapFog(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float EndDistance { get; private set; }

    public float StartDistance { get; private set; }

    public float FogFalloffExponent { get; private set; }

    public bool HeightFogEnabled { get; private set; }

    public float FogHeightWidth { get; private set; }

    public float FogHeightEnd { get; private set; }

    public float FogHeightStart { get; private set; }

    public float FogHeightExponent { get; private set; }

    public float LODBias { get; private set; }

    public bool Active { get; private set; }

    public bool StartDisabled { get; private set; }

    public float FogMaxOpacity { get; private set; }

    public Int32 CubemapSourceType { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial { get; private set; }

    public NetworkedString SkyEntity { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> FogCubemapTexture { get; private set; }

    public bool HasHeightFogEnd { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemapFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLODBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LODBias = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCubemapSourceType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapSourceType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSkyEntity")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHeightFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasHeightFogEnd = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvDecal : CBaseModelEntity
{
    internal CEnvDecal(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> DecalMaterial { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Width { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Height { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Depth { get; private set; }

    public UInt32 RenderOrder { get; private set; }

    public bool ProjectOnWorld { get; private set; }

    public bool ProjectOnCharacters { get; private set; }

    public bool ProjectOnWater { get; private set; }

    public float DepthSortBias { get; private set; }

    internal new static SendNodeDecoder<CEnvDecal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hDecalMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Height = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Depth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderOrder")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderOrder = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnCharacters")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnCharacters = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWater")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnWater = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthSortBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthSortBias = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvDecal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvDecal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvDecal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvDecal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvDetailController : CBaseEntity
{
    internal CEnvDetailController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeStartDist { get; private set; }

    public float FadeEndDist { get; private set; }

    internal new static SendNodeDecoder<CEnvDetailController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeStartDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeStartDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeEndDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeEndDist = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvDetailController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvLightProbeVolume : CBaseEntity
{
    internal CEnvLightProbeVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 Priority { get; private set; }

    public bool StartDisabled { get; private set; }

    public Int32 LightProbeSizeX { get; private set; }

    public Int32 LightProbeSizeY { get; private set; }

    public Int32 LightProbeSizeZ { get; private set; }

    public Int32 LightProbeAtlasX { get; private set; }

    public Int32 LightProbeAtlasY { get; private set; }

    public Int32 LightProbeAtlasZ { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Entity_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Entity_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvParticleGlow : CParticleSystem
{
    internal CEnvParticleGlow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float AlphaScale { get; private set; }

    public float RadiusScale { get; private set; }

    public float SelfIllumScale { get; private set; }

    public Color ColorTint { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> TextureOverride { get; private set; }

    internal new static SendNodeDecoder<CEnvParticleGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RadiusScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSelfIllumScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelfIllumScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTextureOverride")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureOverride = decoder(ref buffer);
            };
        }
        return CParticleSystem.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvProjectedTexture : CModelPointEntity
{
    internal CEnvProjectedTexture(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetEntityHandle { get; private set; }
    public CBaseEntity? TargetEntity => TargetEntityHandle.Get(Demo);

    public bool State { get; private set; }

    public bool AlwaysUpdate { get; private set; }

    public float LightFOV { get; private set; }

    public bool EnableShadows { get; private set; }

    public bool SimpleProjection { get; private set; }

    public bool LightOnlyTarget { get; private set; }

    public bool LightWorld { get; private set; }

    public bool CameraSpace { get; private set; }

    public float BrightnessScale { get; private set; }

    public Color LightColor { get; private set; }

    public float Intensity { get; private set; }

    public float LinearAttenuation { get; private set; }

    public float QuadraticAttenuation { get; private set; }

    public bool Volumetric { get; private set; }

    public float NoiseStrength { get; private set; }

    public float FlashlightTime { get; private set; }

    public UInt32 NumPlanes { get; private set; }

    public float PlaneOffset { get; private set; }

    public float VolumetricIntensity { get; private set; }

    public float ColorTransitionTime { get; private set; }

    public float Ambient { get; private set; }

    public string SpotlightTextureName { get; private set; } = "";

    public Int32 SpotlightTextureFrame { get; private set; }

    public UInt32 ShadowQuality { get; private set; }

    // MNetworkBitCount 16
    // MNetworkMinValue 0
    // MNetworkMaxValue 500
    // MNetworkEncodeFlags 1
    public float NearZ { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue 0
    // MNetworkMaxValue 1500
    // MNetworkEncodeFlags 1
    public float FarZ { get; private set; }

    public float ProjectionSize { get; private set; }

    public float TextureRotation { get; private set; }

    public bool FlipHorizontal { get; private set; }

    internal new static SendNodeDecoder<CEnvProjectedTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hTargetEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bState")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.State = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlwaysUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlwaysUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightFOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightFOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnableShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSimpleProjection")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SimpleProjection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightOnlyTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightOnlyTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCameraSpace")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CameraSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Intensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLinearAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flQuadraticAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.QuadraticAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bVolumetric")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Volumetric = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashlightTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashlightTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumPlanes")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumPlanes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPlaneOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlaneOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flVolumetricIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VolumetricIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTransitionTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTransitionTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAmbient")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ambient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotlightTextureName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotlightTextureName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSpotlightTextureFrame")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotlightTextureFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowQuality")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NearZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProjectionSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectionSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlipHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlipHorizontal = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvScreenOverlay : CPointEntity
{
    internal CEnvScreenOverlay(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString[] OverlayNames { get; private set; } = Array.Empty<NetworkedString>();

    // MNetworkBitCount 11
    // MNetworkMinValue -1
    // MNetworkMaxValue 63
    public float[] OverlayTimes { get; private set; } = Array.Empty<float>();

    public GameTime StartTime { get; private set; } = new();

    public Int32 DesiredOverlay { get; private set; }

    public bool IsOverlayActive { get; private set; }

    internal new static SendNodeDecoder<CEnvScreenOverlay> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszOverlayNames")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.OverlayNames.Length == 0) @this.OverlayNames = new NetworkedString[fixedArraySize];
                @this.OverlayNames[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOverlayTimes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.OverlayTimes.Length == 0) @this.OverlayTimes = new float[fixedArraySize];
                @this.OverlayTimes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiredOverlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsOverlayActive = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvSky : CBaseModelEntity
{
    internal CEnvSky(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterialLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool StartDisabled { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColor { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColorLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Int32 FogType { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMinStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMinEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMaxStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMaxEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvSky> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterialLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterialLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TintColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColorLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TintColorLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMinStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMinEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvSky.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvSky.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvSky.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvSky.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvSoundscape : CBaseEntity
{
    internal CEnvSoundscape(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 SoundEventHash { get; private set; }

    internal new static SendNodeDecoder<CEnvSoundscape> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_soundEventHash")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvSoundscape @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundEventHash = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvSoundscape.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvSoundscape.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvSoundscape.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvSoundscape.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvVolumetricFogController : CBaseEntity
{
    internal CEnvVolumetricFogController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Scattering { get; private set; }

    public float Anisotropy { get; private set; }

    public float FadeSpeed { get; private set; }

    public float DrawDistance { get; private set; }

    public float FadeInStart { get; private set; }

    public float FadeInEnd { get; private set; }

    public float IndirectStrength { get; private set; }

    public Int32 VolumeDepth { get; private set; }

    public float FirstVolumeSliceThickness { get; private set; }

    public Int32 IndirectTextureDimX { get; private set; }

    public Int32 IndirectTextureDimY { get; private set; }

    public Int32 IndirectTextureDimZ { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Active { get; private set; }

    public GameTime StartAnisoTime { get; private set; } = new();

    public GameTime StartScatterTime { get; private set; } = new();

    public GameTime StartDrawDistanceTime { get; private set; } = new();

    public float StartAnisotropy { get; private set; }

    public float StartScattering { get; private set; }

    public float StartDrawDistance { get; private set; }

    public float DefaultAnisotropy { get; private set; }

    public float DefaultScattering { get; private set; }

    public float DefaultDrawDistance { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool EnableIndirect { get; private set; }

    public bool IndirectUseLPVs { get; private set; }

    public bool IsMaster { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> FogIndirectTexture { get; private set; }

    public Int32 ForceRefreshCount { get; private set; }

    public float NoiseSpeed { get; private set; }

    public float NoiseStrength { get; private set; }

    public Vector NoiseScale { get; private set; }

    public float WindSpeed { get; private set; }

    public Vector WindDirection { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Anisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIndirectStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVolumeDepth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VolumeDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFirstVolumeSliceThickness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FirstVolumeSliceThickness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisoTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAnisoTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScatterTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScatterTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistanceTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDrawDistanceTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableIndirect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnableIndirect = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIndirectUseLPVs")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectUseLPVs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsMaster = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogIndirectTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogIndirectTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceRefreshCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceRefreshCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fNoiseSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vNoiseScale")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWindSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vWindDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindDirection = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CEnvVolumetricFogVolume : CBaseEntity
{
    internal CEnvVolumetricFogVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Active { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool StartDisabled { get; private set; }

    public float Strength { get; private set; }

    public Int32 FalloffShape { get; private set; }

    public float FalloffExponent { get; private set; }

    public float HeightFogDepth { get; private set; }

    public float HeightFogEdgeWidth { get; private set; }

    public float IndirectLightStrength { get; private set; }

    public float SunLightStrength { get; private set; }

    public float NoiseStrength { get; private set; }

    public bool OverrideIndirectLightStrength { get; private set; }

    public bool OverrideSunLightStrength { get; private set; }

    public bool OverrideNoiseStrength { get; private set; }

    public bool AllowLPVIndirect { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Strength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFalloffShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FalloffShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeightFogDepth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fHeightFogEdgeWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogEdgeWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fIndirectLightStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectLightStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fSunLightStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SunLightStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOverrideIndirectLightStrength")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideIndirectLightStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOverrideSunLightStrength")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideSunLightStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOverrideNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OverrideNoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAllowLPVIndirect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AllowLPVIndirect = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvWind : CBaseEntity
{
    internal CEnvWind(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CEnvWindShared EnvWindShared { get; private set; } = new();

    internal new static SendNodeDecoder<CEnvWind> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_EnvWindShared")
        {
            var innerDecoder = CEnvWindShared.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEnvWind @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EnvWindShared, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvWind.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvWind.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvWind.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvWind.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvWindShared
{
    public GameTime StartTime { get; private set; } = new();

    public UInt32 WindSeed { get; private set; }

    public UInt16 MinWind { get; private set; }

    public UInt16 MaxWind { get; private set; }

    public Int32 WindRadius { get; private set; }

    public UInt16 MinGust { get; private set; }

    public UInt16 MaxGust { get; private set; }

    public float MinGustDelay { get; private set; }

    public float MaxGustDelay { get; private set; }

    public float GustDuration { get; private set; }

    public UInt16 GustDirChange { get; private set; }

    // MNetworkEncoder "coord"
    public Vector Location { get; private set; }

    public UInt16 InitialWindDir { get; private set; }

    public float InitialWindSpeed { get; private set; }

    internal static SendNodeDecoder<CEnvWindShared> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iWindSeed")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_windRadius")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGustDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GustDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGustDirChange")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GustDirChange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_location")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Location = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInitialWindDir")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialWindDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInitialWindSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialWindSpeed = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CFireSmoke : CBaseFire
{
    internal CFireSmoke(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 FlameModelIndex { get; private set; }

    public Int32 FlameFromAboveModelIndex { get; private set; }

    internal new static SendNodeDecoder<CFireSmoke> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nFlameModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlameModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlameFromAboveModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlameFromAboveModelIndex = decoder(ref buffer);
            };
        }
        return CBaseFire.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFireSmoke.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFireSmoke.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFireSmoke.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFireSmoke.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_lifeState"
public partial class CFish : CBaseAnimGraph
{
    internal CFish(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkSerializer "fish_pos_x"
    public float X { get; private set; }

    // MNetworkSerializer "fish_pos_y"
    public float Y { get; private set; }

    // MNetworkSerializer "fish_pos_z"
    public float Z { get; private set; }

    // MNetworkSerializer "angle_normalize_positive"
    // MNetworkBitCount 7
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    // MNetworkEncodeFlags 1
    public float Angle { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PoolOrigin { get; private set; }

    public float FishWaterLevel { get; private set; }

    internal new static SendNodeDecoder<CFish> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_x")
        {
            var decoder = CreateDecoder_fish_pos_x(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_y")
        {
            var decoder = CreateDecoder_fish_pos_y(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_z")
        {
            var decoder = CreateDecoder_fish_pos_z(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_angle")
        {
            var decoder = CreateDecoder_angle_normalize_positive(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Angle = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_poolOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PoolOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_waterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FishWaterLevel = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFish.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFish.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFish.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFish.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CFogController : CBaseEntity
{
    internal CFogController(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public FogParams Fog { get; private set; } = new();

    internal new static SendNodeDecoder<CFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_fog")
        {
            var innerDecoder = FogParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Fog, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFogController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFogController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFogController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFogController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncBrush : CBaseModelEntity
{
    internal CFuncBrush(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncBrush> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncBrush.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncBrush.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncBrush.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncBrush.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncElectrifiedVolume : CFuncBrush
{
    internal CFuncElectrifiedVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString EffectName { get; private set; }

    internal new static SendNodeDecoder<CFuncElectrifiedVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_EffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncElectrifiedVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectName = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncLadder : CBaseModelEntity
{
    internal CFuncLadder(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public Vector LadderDir { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionTop { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionBottom { get; private set; }

    public float AutoRideSpeed { get; private set; }

    public bool FakeLadder { get; private set; }

    internal new static SendNodeDecoder<CFuncLadder> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecLadderDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LadderDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionTop")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerMountPositionTop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionBottom")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerMountPositionBottom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoRideSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoRideSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFakeLadder")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FakeLadder = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncLadder.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncLadder.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncLadder.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncLadder.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncMonitor : CFuncBrush
{
    internal CFuncMonitor(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString TargetCamera { get; private set; }

    public Int32 ResolutionEnum { get; private set; }

    public bool RenderShadows { get; private set; }

    public bool UseUniqueColorTarget { get; private set; }

    public NetworkedString BrushModelName { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> HTargetCameraHandle { get; private set; }
    public CBaseEntity? HTargetCamera => HTargetCameraHandle.Get(Demo);

    public bool Enabled { get; private set; }

    public bool Draw3DSkybox { get; private set; }

    internal new static SendNodeDecoder<CFuncMonitor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_targetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionEnum")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionEnum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseUniqueColorTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseUniqueColorTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_brushModelName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrushModelName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HTargetCameraHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDraw3DSkybox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Draw3DSkybox = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncMonitor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_fFlags"
// MNetworkIncludeByName "m_vecVelocity"
// MNetworkOverride "m_fFlags CBaseEntity"
public partial class CFuncMoveLinear : CBaseToggle
{
    internal CFuncMoveLinear(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncMoveLinear> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncMover : CBaseModelEntity
{
    internal CFuncMover(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncMover> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncMover.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncMover.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncMover.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncMover.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkOverride "m_angRotation CGameSceneNode"
// MNetworkOverride "m_flSimulationTime CBaseEntity"
public partial class CFuncRotating : CBaseModelEntity
{
    internal CFuncRotating(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncRotating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncRotating.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncRotating.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncRotating.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncRotating.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncTrackTrain : CBaseModelEntity
{
    internal CFuncTrackTrain(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncTrackTrain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CGameRules
{
    public Int32 TotalPausedTicks { get; private set; }

    public Int32 PauseStartTick { get; private set; }

    public bool GamePaused { get; private set; }

    internal static SendNodeDecoder<CGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nTotalPausedTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalPausedTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPauseStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PauseStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGamePaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GamePaused = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGameRulesProxy : CBaseEntity
{
    internal CGameRulesProxy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CGameSceneNode
{
    // MNetworkSerializer "gameSceneNode"
    // MNetworkChangeCallback "gameSceneNodeHierarchyParentChanged"
    // MNetworkPriority 32
    // MNetworkVarEmbeddedFieldOffsetDelta 8
    public CGameSceneNodeHandle Parent { get; private set; } = new();

    // MNetworkPriority 32
    // MNetworkUserGroup "Origin"
    // MNetworkChangeCallback "gameSceneNodeLocalOriginChanged"
    public CNetworkOriginCellCoordQuantizedVector Origin { get; private set; } = new();

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority 32
    // MNetworkSerializer "gameSceneNodeStepSimulationAnglesSerializer"
    // MNetworkChangeCallback "gameSceneNodeLocalAnglesChanged"
    public QAngle Rotation { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeLocalScaleChanged"
    // MNetworkPriority 32
    public float Scale { get; private set; }

    public CUtlStringToken Name { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeHierarchyAttachmentChanged"
    public CUtlStringToken HierarchyAttachName { get; private set; }

    internal static SendNodeDecoder<CGameSceneNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hParent")
        {
            var decoder = CreateDecoder_gameSceneNode(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Parent = decoder(@this, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecOrigin")
        {
            var innerDecoder = CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Origin, path, ref buffer);
            };
        }
        if (field.VarName == "m_angRotation")
        {
            var decoder = CreateDecoder_gameSceneNodeStepSimulationAnglesSerializer(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Rotation = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_name")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Name = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hierarchyAttachName")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HierarchyAttachName = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGlowProperty
{
    // MNetworkChangeCallback "OnGlowTypeChanged"
    public Int32 GlowType { get; private set; }

    public Int32 GlowTeam { get; private set; }

    public Int32 GlowRange { get; private set; }

    public Int32 GlowRangeMin { get; private set; }

    // MNetworkChangeCallback "OnGlowColorChanged"
    public Color GlowColorOverride { get; private set; }

    public bool Flashing { get; private set; }

    public float GlowTime { get; private set; }

    public float GlowStartTime { get; private set; }

    internal static SendNodeDecoder<CGlowProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iGlowType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGlowTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRange")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRangeMin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowRangeMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_glowColorOverride")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowColorOverride = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlashing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flashing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowStartTime = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGradientFog : CBaseEntity
{
    internal CGradientFog(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> GradientFogTexture { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStartDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogEndDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public bool HeightFogEnabled { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStartHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogEndHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FarZ { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogMaxOpacity { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogFalloffExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogVerticalExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public Color FogColor { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStrength { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FadeTime { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool IsEnabled { get; private set; }

    internal new static SendNodeDecoder<CGradientFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hGradientFogTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GradientFogTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStartHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEndHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogVerticalExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogVerticalExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CGradientFog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CGradientFog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CGradientFog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CGradientFog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHandleTest : CBaseEntity
{
    internal CHandleTest(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> HandleHandle { get; private set; }
    public CBaseEntity? Handle => HandleHandle.Get(Demo);

    public bool SendHandle { get; private set; }

    internal new static SendNodeDecoder<CHandleTest> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Handle")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HandleHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSendHandle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SendHandle = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CHandleTest.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHandleTest.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHandleTest.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHandleTest.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHitboxComponent : CEntityComponent
{
    public UInt32[] DisabledHitGroups { get; private set; } = Array.Empty<UInt32>();

    internal new static SendNodeDecoder<CHitboxComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bvDisabledHitGroups")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CHitboxComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.DisabledHitGroups.Length == 0) @this.DisabledHitGroups = new UInt32[fixedArraySize];
                @this.DisabledHitGroups[path[1]] = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoLadderDismount : CBaseEntity
{
    internal CInfoLadderDismount(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInfoLadderDismount> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoOffscreenPanoramaTexture : CPointEntity
{
    internal CInfoOffscreenPanoramaTexture(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public Int32 ResolutionX { get; private set; }

    public Int32 ResolutionY { get; private set; }

    public NetworkedString LayoutFileName { get; private set; }

    public NetworkedString RenderAttrName { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>> TargetEntities { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity, DeadlockDemoParser>>();

    public Int32 TargetChangeCount { get; private set; }

    public NetworkedVector<NetworkedString> CSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    internal new static SendNodeDecoder<CInfoOffscreenPanoramaTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szLayoutFileName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LayoutFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RenderAttrName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderAttrName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TargetEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.TargetEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.TargetEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.TargetEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nTargetChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.CSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.CSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.CSSClasses[index] = element;
                }
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoVisibilityBox : CBaseEntity
{
    internal CInfoVisibilityBox(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Mode { get; private set; }

    public Vector BoxSize { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CInfoVisibilityBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoWorldLayer : CBaseEntity
{
    internal CInfoWorldLayer(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString WorldName { get; private set; }

    public NetworkedString LayerName { get; private set; }

    public bool WorldLayerVisible { get; private set; }

    public bool EntitiesSpawned { get; private set; }

    internal new static SendNodeDecoder<CInfoWorldLayer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_worldName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_layerName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LayerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldLayerVisible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldLayerVisible = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEntitiesSpawned")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntitiesSpawned = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInWorldKeyBindPanel : CPointClientUIWorldPanel
{
    internal CInWorldKeyBindPanel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInWorldKeyBindPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPointClientUIWorldPanel.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CInWorldKeyBindPanel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInWorldKeyBindPanel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInWorldKeyBindPanel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInWorldKeyBindPanel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MIsBoxedIntegerType
public readonly record struct CitadelLobbyPlayerSlot(int Value)
{
    public static CitadelLobbyPlayerSlot Decode(ref BitBuffer buffer) => new CitadelLobbyPlayerSlot(buffer.ReadVarInt32());
}

public partial class CItem : CBaseAnimGraph
{
    internal CItem(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItem_FleetfootBoots : CCitadel_Item
{
    internal CItem_FleetfootBoots(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem_FleetfootBoots> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem_FleetfootBoots.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem_FleetfootBoots.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem_FleetfootBoots.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem_FleetfootBoots.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItem_RestorativeLocket : CCitadel_Item
{
    internal CItem_RestorativeLocket(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 NumStacks { get; private set; }

    internal new static SendNodeDecoder<CItem_RestorativeLocket> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nNumStacks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CItem_RestorativeLocket @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumStacks = decoder(ref buffer);
            };
        }
        return CCitadel_Item.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem_RestorativeLocket.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem_RestorativeLocket.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem_RestorativeLocket.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem_RestorativeLocket.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItem_WitheringWhip : CCitadel_Item_TrackingProjectileApplyModifier
{
    internal CItem_WitheringWhip(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem_WitheringWhip> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadel_Item_TrackingProjectileApplyModifier.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem_WitheringWhip.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem_WitheringWhip.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem_WitheringWhip.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem_WitheringWhip.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
public partial class CItemCrate : CPhysicsProp
{
    internal CItemCrate(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public Int32 LootType { get; private set; }

    internal new static SendNodeDecoder<CItemCrate> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CItemCrate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_eLootType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CItemCrate @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LootType = decoder(ref buffer);
            };
        }
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemCrate.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemCrate.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemCrate.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemCrate.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemExplosiveBarrel : CCitadelProjectile
{
    internal CItemExplosiveBarrel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItemExplosiveBarrel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemExplosiveBarrel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemExplosiveBarrel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemExplosiveBarrel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemExplosiveBarrel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemFlare : CItemGeneric
{
    internal CItemFlare(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItemFlare> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CItemGeneric.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemFlare.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemFlare.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemFlare.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemFlare.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemGeneric : CItem
{
    internal CItemGeneric(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItemGeneric> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CItem.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemGeneric.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemGeneric.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemGeneric.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemGeneric.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemParachute : CPhysicsProp
{
    internal CItemParachute(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItemParachute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemParachute.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemParachute.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemParachute.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemParachute.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemXP : CBaseModelEntity
{
    internal CItemXP(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnLaunchTimeChanged"
    public GameTime TimeLaunch { get; private set; } = new();

    internal new static SendNodeDecoder<CItemXP> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_timeLaunch")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CItemXP @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeLaunch = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemXP.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemXP.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemXP.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemXP.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLaneNode : CCitadelModelEntity
{
    internal CLaneNode(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLaneNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLaneNode.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLaneNode.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLaneNode.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLaneNode.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightCapsuleEntity : CLightEntity
{
    internal CLightCapsuleEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightCapsuleEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightCapsuleEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightCapsuleEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightCapsuleEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightCapsuleEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightComponent : CEntityComponent
{
    internal static SendNodeDecoder<CLightComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CLightComponent> factory)
    {
        if (serializerKey.Name == "CLightComponent")
        {
            factory = () => new CLightComponent();
            return decoderSet.GetDecoder<CLightComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CLightComponent: {serializerKey}");
    }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color SecondaryColor { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Brightness { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float BrightnessMult { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Range { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Falloff { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Theta { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Phi { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 Cascades { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 CastShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderDiffuse { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 RenderSpecular { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderTransmissive { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float OrthoLightWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float OrthoLightHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 Style { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public NetworkedString Pattern { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 CascadeRenderStaticObjects { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeCrossFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistanceFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    // MNetworkAlias "m_bUsesIndexedBakedLighting"
    public bool UsesBakedShadowing { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowPriority { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 BakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderToCubemaps { get; private set; }

    public Int32 DirectLight { get; private set; }

    public Int32 IndirectLight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float FadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float FadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowFadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowFadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool Enabled { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool Flicker { get; private set; }

    public bool PrecomputedFieldsValid { get; private set; }

    public Vector PrecomputedBoundsMins { get; private set; }

    public Vector PrecomputedBoundsMaxs { get; private set; }

    public Vector PrecomputedOBBOrigin { get; private set; }

    public QAngle PrecomputedOBBAngles { get; private set; }

    public Vector PrecomputedOBBExtent { get; private set; }

    public float PrecomputedMaxRange { get; private set; }

    public Int32 FogLightingMode { get; private set; }

    public float FogContributionStength { get; private set; }

    public float NearClipPlane { get; private set; }

    public Color SkyColor { get; private set; }

    public float SkyIntensity { get; private set; }

    public Color SkyAmbientBounce { get; private set; }

    public bool UseSecondaryColor { get; private set; }

    // MNetworkChangeCallback "MixedShadowsChanged"
    public bool MixedShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public GameTime LightStyleStartTime { get; private set; } = new();

    public float CapsuleLength { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float MinRoughness { get; private set; }

    internal new static SendNodeDecoder<CLightComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Range = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Falloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTheta")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Theta = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPhi")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Phi = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascades")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Cascades = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowWidth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowHeight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderDiffuse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderDiffuse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderSpecular")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderSpecular = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderTransmissive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderTransmissive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OrthoLightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OrthoLightHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStyle")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Style = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Pattern")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Pattern = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascadeRenderStaticObjects")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CascadeRenderStaticObjects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeCrossFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeCrossFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistanceFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistanceFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance3")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution0")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution1")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution2")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution3")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUsesIndexedBakedLighting")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UsesBakedShadowing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlicker")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flicker = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPrecomputedMaxRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedMaxRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogLightingMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogLightingMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogContributionStength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogContributionStength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearClipPlane")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NearClipPlane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkyIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyAmbientBounce")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyAmbientBounce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseSecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseSecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMixedShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MixedShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinRoughness = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightDirectionalEntity : CLightEntity
{
    internal CLightDirectionalEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightDirectionalEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CLightEntity : CBaseModelEntity
{
    internal CLightEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CLightComponent"
    // MNetworkAlias "CLightComponent"
    // MNetworkTypeAlias "CLightComponent"
    public CLightComponent? CLightComponent { get; private set; }

    internal new static SendNodeDecoder<CLightEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CLightComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CLightComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CLightEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CLightComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CLightComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightEnvironmentEntity : CLightDirectionalEntity
{
    internal CLightEnvironmentEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightEnvironmentEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightDirectionalEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "m_spawnflags"
public partial class CLightGlow : CBaseModelEntity
{
    internal CLightGlow(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 HorizontalSize { get; private set; }

    public UInt32 VerticalSize { get; private set; }

    public UInt32 MinDist { get; private set; }

    public UInt32 MaxDist { get; private set; }

    public UInt32 OuterMaxDist { get; private set; }

    // MNetworkBitCount 6
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 2
    public float GlowProxySize { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CLightGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nHorizontalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HorizontalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVerticalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VerticalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOuterMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightGlow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightGlow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightGlow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightGlow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightOrthoEntity : CLightEntity
{
    internal CLightOrthoEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightOrthoEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightSpotEntity : CLightEntity
{
    internal CLightSpotEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightSpotEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CMiniMapMarker : CPointEntity
{
    internal CMiniMapMarker(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public EMiniMapMarkerType Type { get; private set; }

    internal new static SendNodeDecoder<CMiniMapMarker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CMiniMapMarker @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_eType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EMiniMapMarkerType>(field.FieldEncodingInfo);
            return (CMiniMapMarker @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Type = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CMiniMapMarker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CMiniMapMarker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CMiniMapMarker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CMiniMapMarker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CModelPointEntity : CBaseModelEntity
{
    internal CModelPointEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CModelPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CModelPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CModelState
{
    // MNetworkChangeCallback "skeletonModelChanged"
    public CStrongHandle<InfoForResourceTypeCModel> Model { get; private set; }

    public bool ClientClothCreationSuppressed { get; private set; }

    // MNetworkChangeCallback "skeletonMeshGroupMaskChanged"
    public UInt64 MeshGroupMask { get; private set; }

    // MNetworkChangeCallback "bodyGroupChoiceChanged"
    public NetworkedVector<Int32> BodyGroupChoices { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkChangeCallback "skeletonMotionTypeChanged"
    public sbyte IdealMotionType { get; private set; }

    internal static SendNodeDecoder<CModelState> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hModel")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCModel>(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Model = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientClothCreationSuppressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientClothCreationSuppressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MeshGroupMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MeshGroupMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBodyGroupChoices")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.BodyGroupChoices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.BodyGroupChoices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.BodyGroupChoices[index] = element;
                }
            };
        }
        if (field.VarName == "m_nIdealMotionType")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IdealMotionType = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CModifierProperty
{
    internal static SendNodeDecoder<CModifierProperty> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CModifierProperty> factory)
    {
        if (serializerKey.Name == "CModifierProperty")
        {
            factory = () => new CModifierProperty();
            return decoderSet.GetDecoder<CModifierProperty>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CModifierProperty: {serializerKey}");
    }

    public NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>> Providers { get; private set; } = new NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>>();

    public UInt32 DisabledGroups { get; private set; }

    // MNetworkChangeCallback "modifierStatesChanged"
    public UInt32[] EnabledStateMask { get; private set; } = Array.Empty<UInt32>();

    // MNetworkChangeCallback "modifierStatesChanged"
    public UInt32[] DisabledStateMask { get; private set; } = Array.Empty<UInt32>();

    // MNetworkChangeCallback "modifierStatesChanged"
    public UInt32[] EnabledPredictedStateMask { get; private set; } = Array.Empty<UInt32>();

    internal static SendNodeDecoder<CModifierProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecProviders")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Providers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Providers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Providers[index] = element;
                }
            };
        }
        if (field.VarName == "m_nDisabledGroups")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisabledGroups = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bvEnabledStateMask")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.EnabledStateMask.Length == 0) @this.EnabledStateMask = new UInt32[fixedArraySize];
                @this.EnabledStateMask[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bvDisabledStateMask")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.DisabledStateMask.Length == 0) @this.DisabledStateMask = new UInt32[fixedArraySize];
                @this.DisabledStateMask[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bvEnabledPredictedStateMask")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.EnabledPredictedStateMask.Length == 0) @this.EnabledPredictedStateMask = new UInt32[fixedArraySize];
                @this.EnabledPredictedStateMask[path[1]] = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CModifierProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CMultiplayRules : CGameRules
{
    internal new static SendNodeDecoder<CMultiplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CGameRules.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkVarsAtomic
public partial class CNetworkOriginCellCoordQuantizedVector
{
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "cellx"
    public UInt16 CellX { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "celly"
    public UInt16 CellY { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "cellz"
    public UInt16 CellZ { get; private set; }

    public UInt16 OutsideWorld { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posx"
    public float X { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posy"
    public float Y { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posz"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkOriginCellCoordQuantizedVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_cellX")
        {
            var decoder = CreateDecoder_cellx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellX = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_cellY")
        {
            var decoder = CreateDecoder_celly(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellY = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_cellZ")
        {
            var decoder = CreateDecoder_cellz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellZ = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_nOutsideWorld")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OutsideWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecX")
        {
            var decoder = CreateDecoder_posx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = CreateDecoder_posy(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = CreateDecoder_posz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(@this, ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkVarsAtomic
public partial class CNetworkOriginQuantizedVector
{
    // MNetworkBitCount 19
    // MNetworkMinValue -16384
    // MNetworkMaxValue 16384
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkOriginQuantizedVector"
    public float X { get; private set; }

    // MNetworkBitCount 19
    // MNetworkMinValue -16384
    // MNetworkMaxValue 16384
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkOriginQuantizedVector"
    public float Y { get; private set; }

    // MNetworkBitCount 19
    // MNetworkMinValue -16384
    // MNetworkMaxValue 16384
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkOriginQuantizedVector"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkOriginQuantizedVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkOriginQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkOriginQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkOriginQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkOriginQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkVarsAtomic
public partial class CNetworkVelocityVector
{
    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float X { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Y { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkVelocityVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkVarsAtomic
public partial class CNetworkViewOffsetVector
{
    // MNetworkBitCount 10
    // MNetworkMinValue -64
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float X { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue -64
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Y { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 128
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkViewOffsetVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByName "m_bTakesDamage"
// MNetworkIncludeByName "m_nTakeDamageFlags"
public partial class CNPC_BaseDefenseSentry : CNPC_SimpleAnimatingAI
{
    internal CNPC_BaseDefenseSentry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector UnitStatusOffset { get; private set; }

    internal new static SendNodeDecoder<CNPC_BaseDefenseSentry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecUnitStatusOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CNPC_BaseDefenseSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UnitStatusOffset = decoder(ref buffer);
            };
        }
        return CNPC_SimpleAnimatingAI.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_BaseDefenseSentry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_BaseDefenseSentry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_BaseDefenseSentry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_BaseDefenseSentry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_Boss_Tier2 : CAI_CitadelNPC
{
    internal CNPC_Boss_Tier2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Lane { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetedEnemyHandle { get; private set; }
    public CBaseEntity? TargetedEnemy => TargetedEnemyHandle.Get(Demo);

    public GameTime FadeOutStart { get; private set; } = new();

    public GameTime FadeOutEnd { get; private set; } = new();

    // MNetworkEncoder "coord"
    public Vector ElectricBeamLookTarget { get; private set; }

    public Int32 ElectricBeamCasts { get; private set; }

    internal new static SendNodeDecoder<CNPC_Boss_Tier2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetedEnemy")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetedEnemyHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecElectricBeamLookTarget")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ElectricBeamLookTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nElectricBeamCasts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ElectricBeamCasts = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_Boss_Tier3 : CAI_CitadelNPC
{
    internal CNPC_Boss_Tier3(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Lane { get; private set; }

    // MNetworkEncoder "qangle"
    public QAngle Targeting1 { get; private set; }

    // MNetworkEncoder "qangle"
    public QAngle Targeting2 { get; private set; }

    public Int32 ElectricBeamCasts { get; private set; }

    public ETier3State AliveState { get; private set; }

    public ETier3Phase Phase { get; private set; }

    internal new static SendNodeDecoder<CNPC_Boss_Tier3> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angTargeting1")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Targeting1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angTargeting2")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Targeting2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nElectricBeamCasts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ElectricBeamCasts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eAliveState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ETier3State>(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AliveState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ePhase")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ETier3Phase>(field.FieldEncodingInfo);
            return (CNPC_Boss_Tier3 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Phase = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier3.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier3.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier3.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Boss_Tier3.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_CarpetBombDrone : CAI_CitadelNPC
{
    internal CNPC_CarpetBombDrone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_CarpetBombDrone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_CarpetBombDrone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_CarpetBombDrone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_CarpetBombDrone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_CarpetBombDrone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_FieldSentry : CNPC_SimpleAnimatingAI
{
    internal CNPC_FieldSentry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float AimPitch { get; private set; }

    public float AttackRange { get; private set; }

    internal new static SendNodeDecoder<CNPC_FieldSentry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAimPitch")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_FieldSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPitch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_FieldSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackRange = decoder(ref buffer);
            };
        }
        return CNPC_SimpleAnimatingAI.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_FieldSentry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_FieldSentry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_FieldSentry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_FieldSentry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iMaxHealth"
public partial class CNPC_FlyingDrone : CAI_CitadelNPC
{
    internal CNPC_FlyingDrone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_FlyingDrone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_FlyingDrone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_FlyingDrone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_FlyingDrone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_FlyingDrone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_HeroCloneTrooper : CAI_CitadelNPC
{
    internal CNPC_HeroCloneTrooper(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> OwnerHandle { get; private set; }
    public CBaseEntity? Owner => OwnerHandle.Get(Demo);

    internal new static SendNodeDecoder<CNPC_HeroCloneTrooper> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CNPC_HeroCloneTrooper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerHandle = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_HeroCloneTrooper.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_HeroCloneTrooper.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_HeroCloneTrooper.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_HeroCloneTrooper.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_HeroDecoy : CNPC_HeroCloneTrooper
{
    internal CNPC_HeroDecoy(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_HeroDecoy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CNPC_HeroCloneTrooper.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_HeroDecoy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_HeroDecoy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_HeroDecoy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_HeroDecoy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_MidBoss : CAI_CitadelNPC
{
    internal CNPC_MidBoss(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_MidBoss> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_MidBoss.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_MidBoss.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MidBoss.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MidBoss.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_MidBossHeroTest : CNPC_TrooperNeutral
{
    internal CNPC_MidBossHeroTest(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_MidBossHeroTest> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CNPC_TrooperNeutral.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_MidBossHeroTest.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_MidBossHeroTest.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MidBossHeroTest.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MidBossHeroTest.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_MortarSentry : CAI_CitadelNPC
{
    internal CNPC_MortarSentry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_MortarSentry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_MortarSentry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_MortarSentry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MortarSentry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_MortarSentry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_NanoRollermine : CAI_CitadelNPC
{
    internal CNPC_NanoRollermine(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float ForwardSpeed { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> OwnerPawnHandle { get; private set; }
    public CBaseEntity? OwnerPawn => OwnerPawnHandle.Get(Demo);

    internal new static SendNodeDecoder<CNPC_NanoRollermine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flForwardSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_NanoRollermine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForwardSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOwnerPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CNPC_NanoRollermine @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerPawnHandle = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_NanoRollermine.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_NanoRollermine.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_NanoRollermine.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_NanoRollermine.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_PestilenceDrone : CAI_CitadelNPC
{
    internal CNPC_PestilenceDrone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_PestilenceDrone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_PestilenceDrone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_PestilenceDrone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_PestilenceDrone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_PestilenceDrone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_ShieldedSentry : CNPC_SimpleAnimatingAI
{
    internal CNPC_ShieldedSentry(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public float AimPitch { get; private set; }

    public float AttackRange { get; private set; }

    internal new static SendNodeDecoder<CNPC_ShieldedSentry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CNPC_ShieldedSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_flAimPitch")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_ShieldedSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPitch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttackRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_ShieldedSentry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttackRange = decoder(ref buffer);
            };
        }
        return CNPC_SimpleAnimatingAI.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_ShieldedSentry.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_ShieldedSentry.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_ShieldedSentry.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_ShieldedSentry.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_iTeam"
// MNetworkExcludeByName "m_flSimulationTime"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_flEncodedController"
// MNetworkExcludeByName "m_flPoseParameter"
public partial class CNPC_SimpleAnimatingAI : CBaseAnimGraph
{
    internal CNPC_SimpleAnimatingAI(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity, DeadlockDemoParser> EnemyHandle { get; private set; }
    public CBaseEntity? Enemy => EnemyHandle.Get(Demo);

    // MNetworkUserGroup "CCitadelRegenComponent"
    // MNetworkAlias "CCitadelRegenComponent"
    // MNetworkTypeAlias "CCitadelRegenComponent"
    public CCitadelRegenComponent CCitadelRegenComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CNPC_SimpleAnimatingAI> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hEnemy")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CNPC_SimpleAnimatingAI @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyHandle = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelRegenComponent")
        {
            var innerDecoder = CCitadelRegenComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CNPC_SimpleAnimatingAI @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelRegenComponent, path, ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_SimpleAnimatingAI.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_SimpleAnimatingAI.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_SimpleAnimatingAI.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_SimpleAnimatingAI.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_SurveillanceDrone : CNPC_FlyingDrone
{
    internal CNPC_SurveillanceDrone(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_SurveillanceDrone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CNPC_FlyingDrone.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_SurveillanceDrone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_SurveillanceDrone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_SurveillanceDrone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_SurveillanceDrone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_TeslaCoil : CNPC_SimpleAnimatingAI
{
    internal CNPC_TeslaCoil(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelAbilityComponent"
    // MNetworkAlias "CCitadelAbilityComponent"
    // MNetworkTypeAlias "CCitadelAbilityComponent"
    public CCitadelAbilityComponent CCitadelAbilityComponent { get; private set; } = new();

    internal new static SendNodeDecoder<CNPC_TeslaCoil> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelAbilityComponent")
        {
            var innerDecoder = CCitadelAbilityComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CNPC_TeslaCoil @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelAbilityComponent, path, ref buffer);
            };
        }
        return CNPC_SimpleAnimatingAI.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_TeslaCoil.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_TeslaCoil.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TeslaCoil.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TeslaCoil.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_Trooper : CAI_CitadelNPC
{
    internal CNPC_Trooper(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Lane { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetedEnemyHandle { get; private set; }
    public CBaseEntity? TargetedEnemy => TargetedEnemyHandle.Get(Demo);

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    public float HealingChargeParticlePct { get; private set; }

    internal new static SendNodeDecoder<CNPC_Trooper> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CNPC_Trooper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetedEnemy")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CNPC_Trooper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetedEnemyHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHealingChargeParticlePct")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNPC_Trooper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HealingChargeParticlePct = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_Trooper.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_Trooper.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Trooper.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_Trooper.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_TrooperBarrackBoss : CNPC_TrooperBoss
{
    internal CNPC_TrooperBarrackBoss(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_TrooperBarrackBoss> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CNPC_TrooperBoss.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBarrackBoss.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBarrackBoss.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBarrackBoss.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBarrackBoss.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_TrooperBoss : CNPC_Trooper
{
    internal CNPC_TrooperBoss(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelPlayerClipComponent"
    // MNetworkAlias "CCitadelPlayerClipComponent"
    // MNetworkTypeAlias "CCitadelPlayerClipComponent"
    public CCitadelPlayerClipComponent CCitadelPlayerClipComponent { get; private set; } = new();

    public GameTime FadeOutStart { get; private set; } = new();

    public GameTime FadeOutEnd { get; private set; } = new();

    internal new static SendNodeDecoder<CNPC_TrooperBoss> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelPlayerClipComponent")
        {
            var innerDecoder = CCitadelPlayerClipComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CNPC_TrooperBoss @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelPlayerClipComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CNPC_TrooperBoss @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CNPC_TrooperBoss @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutEnd = decoder(ref buffer);
            };
        }
        return CNPC_Trooper.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBoss.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBoss.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBoss.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperBoss.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_TrooperNeutral : CAI_CitadelNPC
{
    internal CNPC_TrooperNeutral(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool ShieldActive { get; private set; }

    public bool PlayingIdle { get; private set; }

    internal new static SendNodeDecoder<CNPC_TrooperNeutral> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShieldActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CNPC_TrooperNeutral @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShieldActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPlayingIdle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CNPC_TrooperNeutral @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayingIdle = decoder(ref buffer);
            };
        }
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutral.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutral.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutral.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutral.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_TrooperNeutralNodeMover : CNPC_TrooperNeutral
{
    internal CNPC_TrooperNeutralNodeMover(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_TrooperNeutralNodeMover> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CNPC_TrooperNeutral.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutralNodeMover.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutralNodeMover.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutralNodeMover.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_TrooperNeutralNodeMover.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CNPC_YakuzaGangster : CAI_CitadelNPC
{
    internal CNPC_YakuzaGangster(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CNPC_YakuzaGangster> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CAI_CitadelNPC.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CNPC_YakuzaGangster.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CNPC_YakuzaGangster.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CNPC_YakuzaGangster.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CNPC_YakuzaGangster.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class COmniLight : CBarnLight
{
    internal COmniLight(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public float InnerAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float OuterAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool ShowLight { get; private set; }

    internal new static SendNodeDecoder<COmniLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flInnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.COmniLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.COmniLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.COmniLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.COmniLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_hOwnerEntity"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nameStringableIndex"
// MEntityAllowsPortraitWorldSpawn
public partial class CParticleSystem : CBaseModelEntity
{
    internal CParticleSystem(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string SnapshotFileName { get; private set; } = "";

    public bool Active { get; private set; }

    public bool Frozen { get; private set; }

    public float FreezeTransitionDuration { get; private set; }

    public Int32 StopType { get; private set; }

    public bool AnimateDuringGameplayPause { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public float PreSimTime { get; private set; }

    public Vector[] ServerControlPoints { get; private set; } = Array.Empty<Vector>();

    public byte[] ServerControlPointAssignments { get; private set; } = Array.Empty<byte>();

    public CHandle<CBaseEntity, DeadlockDemoParser>[] ControlPointEnts { get; private set; } = Array.Empty<CHandle<CBaseEntity, DeadlockDemoParser>>();

    public bool NoSave { get; private set; }

    public bool NoFreeze { get; private set; }

    public bool NoRamp { get; private set; }

    internal new static SendNodeDecoder<CParticleSystem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_szSnapshotFileName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapshotFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFreezeTransitionDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FreezeTransitionDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStopType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StopType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimateDuringGameplayPause")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimateDuringGameplayPause = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPreSimTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PreSimTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vServerControlPoints")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ServerControlPoints.Length == 0) @this.ServerControlPoints = new Vector[fixedArraySize];
                @this.ServerControlPoints[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iServerControlPointAssignments")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ServerControlPointAssignments.Length == 0) @this.ServerControlPointAssignments = new byte[fixedArraySize];
                @this.ServerControlPointAssignments[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPointEnts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ControlPointEnts.Length == 0) @this.ControlPointEnts = new CHandle<CBaseEntity, DeadlockDemoParser>[fixedArraySize];
                @this.ControlPointEnts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSave")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoSave = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoFreeze")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoFreeze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoRamp")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoRamp = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CParticleSystem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CParticleSystem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CParticleSystem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CParticleSystem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPathParticleRope : CBaseEntity
{
    internal CPathParticleRope(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float ParticleSpacing { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float Slack { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float Radius { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public Color ColorTint { get; private set; }

    // MNetworkChangeCallback "effectStateChanged"
    public Int32 EffectState { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex { get; private set; }

    public NetworkedVector<Vector> PathNodes_Position { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_TangentIn { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_TangentOut { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_Color { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkChangeCallback "pinStateChanged"
    public NetworkedVector<bool> PathNodes_PinEnabled { get; private set; } = new NetworkedVector<bool>();

    public NetworkedVector<float> PathNodes_RadiusScale { get; private set; } = new NetworkedVector<float>();

    internal new static SendNodeDecoder<CPathParticleRope> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flParticleSpacing")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParticleSpacing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlack")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Slack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEffectState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PathNodes_Position")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_Position.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_Position.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_Position[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentIn")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_TangentIn.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_TangentIn.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_TangentIn[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentOut")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_TangentOut.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_TangentOut.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_TangentOut[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_Color.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_Color.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_Color[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_PinEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_PinEnabled.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_PinEnabled.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_PinEnabled[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_RadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_RadiusScale.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_RadiusScale.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_RadiusScale[index] = element;
                }
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPathParticleRope.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CPathSimple : CBaseEntity
{
    internal CPathSimple(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString PathString { get; private set; }

    internal new static SendNodeDecoder<CPathSimple> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pathString")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPathSimple @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PathString = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPathSimple.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPathSimple.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPathSimple.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPathSimple.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPhysBox : CBreakable
{
    internal CPhysBox(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBreakable.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
public partial class CPhysicsProp : CBreakableProp
{
    internal CPhysicsProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Awake { get; private set; }

    internal new static SendNodeDecoder<CPhysicsProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAwake")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPhysicsProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Awake = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysicsProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPhysMagnet : CBaseAnimGraph
{
    internal CPhysMagnet(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysMagnet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysMagnet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPlayer_AutoaimServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_AutoaimServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_AutoaimServices> factory)
    {
        if (serializerKey.Name == "CPlayer_AutoaimServices")
        {
            factory = () => new CPlayer_AutoaimServices();
            return decoderSet.GetDecoder<CPlayer_AutoaimServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_AutoaimServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_AutoaimServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_CameraServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_CameraServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_CameraServices> factory)
    {
        if (serializerKey.Name == "CPlayer_CameraServices")
        {
            factory = () => new CPlayer_CameraServices();
            return decoderSet.GetDecoder<CPlayer_CameraServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCitadelPlayer_CameraServices")
        {
            factory = () => new CCitadelPlayer_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCitadelPlayer_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_CameraServices);
                var downcastInstance = Unsafe.As<CCitadelPlayer_CameraServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_CameraServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    // MNetworkEncoder "qangle_precise"
    public QAngle PunchAngle { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkEncoder "qangle_precise"
    public QAngle PunchAngleVel { get; private set; }

    // MNetworkChangeCallback "OnPunchJoltChanged"
    public GameTick PunchAngleJoltTick { get; private set; } = new();

    public FogPlayerParams PlayerFog { get; private set; } = new();

    public CHandle<CColorCorrection, DeadlockDemoParser> ColorCorrectionCtrlHandle { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> ViewEntityHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public CHandle<CTonemapController2, DeadlockDemoParser> TonemapControllerHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public AudioParams Audio { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public NetworkedVector<CHandle<CPostProcessingVolume, DeadlockDemoParser>> PostProcessingVolumes { get; private set; } = new NetworkedVector<CHandle<CPostProcessingVolume, DeadlockDemoParser>>();

    internal new static SendNodeDecoder<CPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecPunchAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PunchAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPunchAngleVel")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PunchAngleVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPunchAngleJoltTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PunchAngleJoltTick = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_PlayerFog")
        {
            var innerDecoder = FogPlayerParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.PlayerFog, path, ref buffer);
            };
        }
        if (field.VarName == "m_hColorCorrectionCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CColorCorrection, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorCorrectionCtrlHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTonemapController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CTonemapController2, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapControllerHandle = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_audio")
        {
            var innerDecoder = AudioParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Audio, path, ref buffer);
            };
        }
        if (field.VarName == "m_PostProcessingVolumes")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CPostProcessingVolume, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PostProcessingVolumes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PostProcessingVolumes.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PostProcessingVolumes[index] = element;
                }
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_FlashlightServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_FlashlightServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_FlashlightServices> factory)
    {
        if (serializerKey.Name == "CPlayer_FlashlightServices")
        {
            factory = () => new CPlayer_FlashlightServices();
            return decoderSet.GetDecoder<CPlayer_FlashlightServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_FlashlightServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_FlashlightServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ItemServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ItemServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ItemServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ItemServices")
        {
            factory = () => new CPlayer_ItemServices();
            return decoderSet.GetDecoder<CPlayer_ItemServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ItemServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_ItemServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_MovementServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_MovementServices> factory)
    {
        if (serializerKey.Name == "CPlayer_MovementServices")
        {
            factory = () => new CPlayer_MovementServices();
            return decoderSet.GetDecoder<CPlayer_MovementServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCitadelObserver_MovementServices")
        {
            factory = () => new CCitadelObserver_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCitadelObserver_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelObserver_MovementServices);
                var downcastInstance = Unsafe.As<CCitadelObserver_MovementServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CPlayer_MovementServices_Humanoid")
        {
            factory = () => new CPlayer_MovementServices_Humanoid();
            var childClassDecoder = decoderSet.GetDecoder<CPlayer_MovementServices_Humanoid>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices_Humanoid);
                var downcastInstance = Unsafe.As<CPlayer_MovementServices_Humanoid>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCitadelPlayer_MovementServices")
        {
            factory = () => new CCitadelPlayer_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCitadelPlayer_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_MovementServices);
                var downcastInstance = Unsafe.As<CCitadelPlayer_MovementServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_MovementServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt64 ToggleButtonDownMask { get; private set; }

    // MNetworkBitCount 12
    // MNetworkMinValue 0
    // MNetworkMaxValue 2048
    // MNetworkEncodeFlags 1
    public float Maxspeed { get; private set; }

    public float[] ForceSubtickMoveWhen { get; private set; } = Array.Empty<float>();

    internal new static SendNodeDecoder<CPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nToggleButtonDownMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ToggleButtonDownMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxspeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxspeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrForceSubtickMoveWhen")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ForceSubtickMoveWhen.Length == 0) @this.ForceSubtickMoveWhen = new float[fixedArraySize];
                @this.ForceSubtickMoveWhen[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices_Humanoid : CPlayer_MovementServices
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkBitCount 17
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    public float FallVelocity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InCrouch { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 CrouchState { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime CrouchTransitionStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool Ducked { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool Ducking { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InDuckJump { get; private set; }

    internal new static SendNodeDecoder<CPlayer_MovementServices_Humanoid> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFallVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInCrouch")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InCrouch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCrouchState")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrouchState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCrouchTransitionStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrouchTransitionStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ducked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ducking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInDuckJump")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InDuckJump = decoder(ref buffer);
            };
        }
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ObserverServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ObserverServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ObserverServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ObserverServices")
        {
            factory = () => new CPlayer_ObserverServices();
            return decoderSet.GetDecoder<CPlayer_ObserverServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCitadelPlayer_ObserverServices")
        {
            factory = () => new CCitadelPlayer_ObserverServices();
            var childClassDecoder = decoderSet.GetDecoder<CCitadelPlayer_ObserverServices>(serializerKey);
            return (CPlayer_ObserverServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_ObserverServices);
                var downcastInstance = Unsafe.As<CCitadelPlayer_ObserverServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ObserverServices: {serializerKey}");
    }

    // MNetworkChangeCallback "OnObserverModeChanged"
    public byte ObserverMode { get; private set; }

    // MNetworkChangeCallback "OnObserverTargetChanged"
    public CHandle<CBaseEntity, DeadlockDemoParser> ObserverTargetHandle { get; private set; }

    internal new static SendNodeDecoder<CPlayer_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iObserverMode")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObserverMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hObserverTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObserverTargetHandle = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_UseServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_UseServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_UseServices> factory)
    {
        if (serializerKey.Name == "CPlayer_UseServices")
        {
            factory = () => new CPlayer_UseServices();
            return decoderSet.GetDecoder<CPlayer_UseServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_UseServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WaterServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WaterServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WaterServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WaterServices")
        {
            factory = () => new CPlayer_WaterServices();
            return decoderSet.GetDecoder<CPlayer_WaterServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WaterServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_WaterServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WeaponServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WeaponServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WeaponServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WeaponServices")
        {
            factory = () => new CPlayer_WeaponServices();
            return decoderSet.GetDecoder<CPlayer_WeaponServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WeaponServices: {serializerKey}");
    }

    public NetworkedVector<CHandle<CBasePlayerWeapon, DeadlockDemoParser>> MyWeapons { get; private set; } = new NetworkedVector<CHandle<CBasePlayerWeapon, DeadlockDemoParser>>();

    public CHandle<CBasePlayerWeapon, DeadlockDemoParser> ActiveWeaponHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CHandle<CBasePlayerWeapon, DeadlockDemoParser> LastWeaponHandle { get; private set; }

    public UInt16[] Ammo { get; private set; } = Array.Empty<UInt16>();

    internal new static SendNodeDecoder<CPlayer_WeaponServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWeapons")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.MyWeapons.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.MyWeapons.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.MyWeapons[index] = element;
                }
            };
        }
        if (field.VarName == "m_hActiveWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveWeaponHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLastWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastWeaponHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Ammo.Length == 0) @this.Ammo = new UInt16[fixedArraySize];
                @this.Ammo[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayerPawnComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CPlayerPawnComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CPlayerVisibility : CBaseEntity
{
    internal CPlayerVisibility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float VisibilityStrength { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FogDistanceMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FogMaxDensityMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FadeTime { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool IsEnabled { get; private set; }

    internal new static SendNodeDecoder<CPlayerVisibility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flVisibilityStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VisibilityStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogDistanceMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogDistanceMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensityMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxDensityMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CPointCamera : CBaseEntity
{
    internal CPointCamera(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FOV { get; private set; }

    public float Resolution { get; private set; }

    public bool FogEnable { get; private set; }

    public Color FogColor { get; private set; }

    public float FogStart { get; private set; }

    public float FogEnd { get; private set; }

    public float FogMaxDensity { get; private set; }

    public bool Active { get; private set; }

    public bool UseScreenAspectRatio { get; private set; }

    public float AspectRatio { get; private set; }

    public bool NoSky { get; private set; }

    public float Brightness { get; private set; }

    public float ZFar { get; private set; }

    public float ZNear { get; private set; }

    public bool CanHLTVUse { get; private set; }

    public bool AlignWithParent { get; private set; }

    public bool DofEnabled { get; private set; }

    public float DofNearBlurry { get; private set; }

    public float DofNearCrisp { get; private set; }

    public float DofFarCrisp { get; private set; }

    public float DofFarBlurry { get; private set; }

    public float DofTiltToGround { get; private set; }

    internal new static SendNodeDecoder<CPointCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_FOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Resolution")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Resolution = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFogEnable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEnable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxDensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseScreenAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseScreenAspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSky")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoSky = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZFar")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanHLTVUse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanHLTVUse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlignWithParent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlignWithParent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDofEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofNearBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofNearCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofFarCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofFarBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofTiltToGround")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofTiltToGround = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointCamera.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointCamera.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointCamera.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointCamera.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointClientUIDialog : CBaseClientUIEntity
{
    internal CPointClientUIDialog(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnDialogActivatorChanged"
    public CHandle<CBaseEntity, DeadlockDemoParser> ActivatorHandle { get; private set; }
    public CBaseEntity? Activator => ActivatorHandle.Get(Demo);

    internal new static SendNodeDecoder<CPointClientUIDialog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActivator")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPointClientUIDialog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActivatorHandle = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CPointClientUIWorldPanel : CBaseClientUIEntity
{
    internal CPointClientUIWorldPanel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IgnoreInput { get; private set; }

    public bool Lit { get; private set; }

    public bool FollowPlayerAcrossTeleport { get; private set; }

    public float Width { get; private set; }

    public float Height { get; private set; }

    public float DPI { get; private set; }

    public float InteractDistance { get; private set; }

    public float DepthOffset { get; private set; }

    public UInt32 OwnerContext { get; private set; }

    public UInt32 HorizontalAlign { get; private set; }

    public UInt32 VerticalAlign { get; private set; }

    public UInt32 Orientation { get; private set; }

    public bool AllowInteractionFromAllSceneWorlds { get; private set; }

    public NetworkedVector<NetworkedString> CSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    public bool Opaque { get; private set; }

    public bool NoDepth { get; private set; }

    public bool RenderBackface { get; private set; }

    public bool UseOffScreenIndicator { get; private set; }

    public bool ExcludeFromSaveGames { get; private set; }

    public bool Grabbable { get; private set; }

    public bool OnlyRenderToTexture { get; private set; }

    public bool DisableMipGen { get; private set; }

    public Int32 ExplicitImageLayout { get; private set; }

    internal new static SendNodeDecoder<CPointClientUIWorldPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIgnoreInput")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IgnoreInput = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLit")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFollowPlayerAcrossTeleport")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FollowPlayerAcrossTeleport = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Height = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDPI")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DPI = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInteractDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOwnerContext")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerContext = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unHorizontalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HorizontalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unVerticalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VerticalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOrientation")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Orientation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAllowInteractionFromAllSceneWorlds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AllowInteractionFromAllSceneWorlds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.CSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.CSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.CSSClasses[index] = element;
                }
            };
        }
        if (field.VarName == "m_bOpaque")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Opaque = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoDepth")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderBackface")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderBackface = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseOffScreenIndicator")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseOffScreenIndicator = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExcludeFromSaveGames")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExcludeFromSaveGames = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGrabbable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Grabbable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOnlyRenderToTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OnlyRenderToTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDisableMipGen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisableMipGen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplicitImageLayout")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplicitImageLayout = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointClientUIWorldTextPanel : CPointClientUIWorldPanel
{
    internal CPointClientUIWorldTextPanel(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string MessageText { get; private set; } = "";

    internal new static SendNodeDecoder<CPointClientUIWorldTextPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointClientUIWorldTextPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MessageText = decoder(ref buffer);
            };
        }
        return CPointClientUIWorldPanel.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointCommentaryNode : CBaseAnimGraph
{
    internal CPointCommentaryNode(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString CommentaryFile { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> ViewPositionHandle { get; private set; }
    public CBaseEntity? ViewPosition => ViewPositionHandle.Get(Demo);

    public bool Active { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public float StartTimeInCommentary { get; private set; }

    public NetworkedString Title { get; private set; }

    public NetworkedString Speakers { get; private set; }

    public Int32 NodeNumber { get; private set; }

    public Int32 NodeNumberMax { get; private set; }

    public bool ListenedTo { get; private set; }

    internal new static SendNodeDecoder<CPointCommentaryNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszCommentaryFile")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CommentaryFile = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewPosition")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewPositionHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTimeInCommentary")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTimeInCommentary = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszTitle")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Title = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSpeakers")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Speakers = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NodeNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumberMax")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NodeNumberMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bListenedTo")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ListenedTo = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointEntity : CBaseEntity
{
    internal CPointEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CPointOrient : CBaseEntity
{
    internal CPointOrient(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPointOrient> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointOrient.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointOrient.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointOrient.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointOrient.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointValueRemapper : CBaseEntity
{
    internal CPointValueRemapper(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public bool UpdateOnClient { get; private set; }

    public ValueRemapperInputType InputType { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> RemapLineStartHandle { get; private set; }
    public CBaseEntity? RemapLineStart => RemapLineStartHandle.Get(Demo);

    public CHandle<CBaseEntity, DeadlockDemoParser> RemapLineEndHandle { get; private set; }
    public CBaseEntity? RemapLineEnd => RemapLineEndHandle.Get(Demo);

    public float MaximumChangePerSecond { get; private set; }

    public float DisengageDistance { get; private set; }

    public float EngageDistance { get; private set; }

    public bool RequiresUseKey { get; private set; }

    public ValueRemapperOutputType OutputType { get; private set; }

    public NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>> OutputEntities { get; private set; } = new NetworkedVector<CHandle<CBaseEntity, DeadlockDemoParser>>();

    public ValueRemapperHapticsType HapticsType { get; private set; }

    public ValueRemapperMomentumType MomentumType { get; private set; }

    public float MomentumModifier { get; private set; }

    public float SnapValue { get; private set; }

    public ValueRemapperRatchetType RatchetType { get; private set; }

    public float InputOffset { get; private set; }

    internal new static SendNodeDecoder<CPointValueRemapper> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUpdateOnClient")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UpdateOnClient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperInputType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineStart")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RemapLineStartHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineEnd")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RemapLineEndHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaximumChangePerSecond")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaximumChangePerSecond = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDisengageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisengageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEngageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EngageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRequiresUseKey")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RequiresUseKey = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOutputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperOutputType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OutputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOutputEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OutputEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OutputEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OutputEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nHapticsType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperHapticsType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HapticsType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMomentumType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperMomentumType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MomentumType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMomentumModifier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MomentumModifier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSnapValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRatchetType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperRatchetType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RatchetType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInputOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InputOffset = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointWorldText : CModelPointEntity
{
    internal CPointWorldText(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string MessageText { get; private set; } = "";

    public string FontName { get; private set; } = "";

    public bool Enabled { get; private set; }

    public bool Fullbright { get; private set; }

    public float WorldUnitsPerPx { get; private set; }

    public float FontSize { get; private set; }

    public float DepthOffset { get; private set; }

    public bool DrawBackground { get; private set; }

    public Color Color { get; private set; }

    public PointWorldTextJustifyHorizontal JustifyHorizontal { get; private set; }

    public PointWorldTextJustifyVertical JustifyVertical { get; private set; }

    public PointWorldTextReorientMode ReorientMode { get; private set; }

    internal new static SendNodeDecoder<CPointWorldText> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MessageText = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FontName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FontName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFullbright")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Fullbright = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWorldUnitsPerPx")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldUnitsPerPx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFontSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FontSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDrawBackground")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DrawBackground = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyHorizontal>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JustifyHorizontal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyVertical")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyVertical>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JustifyVertical = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nReorientMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextReorientMode>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReorientMode = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointWorldText.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointWorldText.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointWorldText.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointWorldText.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CPostProcessingVolume : CBaseTrigger
{
    internal CPostProcessingVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCPostProcessingResource> PostSettings { get; private set; }

    public float FadeDuration { get; private set; }

    public float MinLogExposure { get; private set; }

    public float MaxLogExposure { get; private set; }

    public float MinExposure { get; private set; }

    public float MaxExposure { get; private set; }

    public float ExposureCompensation { get; private set; }

    public float ExposureFadeSpeedUp { get; private set; }

    public float ExposureFadeSpeedDown { get; private set; }

    public float TonemapEVSmoothingRange { get; private set; }

    public bool Master { get; private set; }

    public bool ExposureControl { get; private set; }

    internal new static SendNodeDecoder<CPostProcessingVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPostSettings")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCPostProcessingResource>(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostSettings = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureCompensation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureCompensation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureFadeSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureFadeSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Master = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExposureControl")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureControl = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPrecipitation : CBaseTrigger
{
    internal CPrecipitation(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitation> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPrecipitation.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPrecipitation.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitation.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitation.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPrecipitationBlocker : CBaseModelEntity
{
    internal CPrecipitationBlocker(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitationBlocker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Mirage_Tornado : CCitadelProjectile
{
    internal CProjectile_Mirage_Tornado(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Mirage_Tornado> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Mirage_Tornado.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Mirage_Tornado.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Mirage_Tornado.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Mirage_Tornado.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Perched_Predator : CCitadelProjectile
{
    internal CProjectile_Perched_Predator(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Perched_Predator> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Perched_Predator.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Perched_Predator.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Perched_Predator.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Perched_Predator.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Rolling_FireBall : CCitadelProjectile
{
    internal CProjectile_Rolling_FireBall(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Rolling_FireBall> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Rolling_FireBall.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Rolling_FireBall.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Rolling_FireBall.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Rolling_FireBall.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Rutger_Rocket : CCitadelProjectile
{
    internal CProjectile_Rutger_Rocket(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Rutger_Rocket> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Rutger_Rocket.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Rutger_Rocket.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Rutger_Rocket.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Rutger_Rocket.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Stomp_Projectile : CCitadelProjectile
{
    internal CProjectile_Stomp_Projectile(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Width { get; private set; }

    public GameTime DieTime { get; private set; } = new();

    internal new static SendNodeDecoder<CProjectile_Stomp_Projectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CProjectile_Stomp_Projectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_tDieTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CProjectile_Stomp_Projectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DieTime = decoder(ref buffer);
            };
        }
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Stomp_Projectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Stomp_Projectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Stomp_Projectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Stomp_Projectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Synth_Barrage : CCitadelProjectile
{
    internal CProjectile_Synth_Barrage(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Synth_Barrage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_Barrage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_Barrage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_Barrage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_Barrage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CProjectile_Synth_PlasmaFlux : CCitadelProjectile
{
    internal CProjectile_Synth_PlasmaFlux(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CProjectile_Synth_PlasmaFlux> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelProjectile.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_PlasmaFlux.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_PlasmaFlux.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_PlasmaFlux.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CProjectile_Synth_PlasmaFlux.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
public partial class CPropAnimatingBreakable : CBaseAnimGraph
{
    internal CPropAnimatingBreakable(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPropAnimatingBreakable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPropAnimatingBreakable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPropAnimatingBreakable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPropAnimatingBreakable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPropAnimatingBreakable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPropDataComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CPropDataComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPropDoorRotating : CBasePropDoor
{
    internal CPropDoorRotating(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPropDoorRotating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBasePropDoor.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollManager : CBaseEntity
{
    internal CRagdollManager(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public sbyte CurrentMaxRagdollCount { get; private set; }

    internal new static SendNodeDecoder<CRagdollManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iCurrentMaxRagdollCount")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CRagdollManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentMaxRagdollCount = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollManager.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollManager.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollManager.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollManager.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollProp : CBaseAnimGraph
{
    internal CRagdollProp(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public NetworkedVector<Vector> RagPos { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkEncoder "qangle"
    // MNetworkBitCount 13
    public NetworkedVector<QAngle> RagAngles { get; private set; } = new NetworkedVector<QAngle>();

    public CHandle<CBaseEntity, DeadlockDemoParser> RagdollSourceHandle { get; private set; }
    public CBaseEntity? RagdollSource => RagdollSourceHandle.Get(Demo);

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 1
    public float BlendWeight { get; private set; }

    internal new static SendNodeDecoder<CRagdollProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ragPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RagPos.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.RagPos.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.RagPos[index] = element;
                }
            };
        }
        if (field.VarName == "m_ragAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RagAngles.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.RagAngles.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.RagAngles[index] = element;
                }
            };
        }
        if (field.VarName == "m_hRagdollSource")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollSourceHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBlendWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BlendWeight = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollPropAttached : CRagdollProp
{
    internal CRagdollPropAttached(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 BoneIndexAttached { get; private set; }

    public UInt32 RagdollAttachedObjectIndex { get; private set; }

    // MNetworkEncoder "coord"
    public Vector AttachmentPointBoneSpace { get; private set; }

    // MNetworkEncoder "coord"
    public Vector AttachmentPointRagdollSpace { get; private set; }

    internal new static SendNodeDecoder<CRagdollPropAttached> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_boneIndexAttached")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoneIndexAttached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ragdollAttachedObjectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollAttachedObjectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointBoneSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachmentPointBoneSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointRagdollSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachmentPointRagdollSpace = decoder(ref buffer);
            };
        }
        return CRagdollProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRectLight : CBarnLight
{
    internal CRectLight(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool ShowLight { get; private set; }

    internal new static SendNodeDecoder<CRectLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRectLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CRectLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRectLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRectLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRectLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRenderComponent : CEntityComponent
{
    internal static SendNodeDecoder<CRenderComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CRenderComponent> factory)
    {
        if (serializerKey.Name == "CRenderComponent")
        {
            factory = () => new CRenderComponent();
            return decoderSet.GetDecoder<CRenderComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CRenderComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CRenderComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nMinCPULevel"
// MNetworkIncludeByName "m_nMaxCPULevel"
// MNetworkIncludeByName "m_nMinGPULevel"
// MNetworkIncludeByName "m_nMaxGPULevel"
public partial class CRopeKeyframe : CBaseModelEntity
{
    internal CRopeKeyframe(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt16 RopeFlags { get; private set; }

    public Int16 Slack { get; private set; }

    public float Width { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue 0.1
    // MNetworkMaxValue 10
    public float TextureScale { get; private set; }

    public byte Segments { get; private set; }

    public bool ConstrainBetweenEndpoints { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> RopeMaterialModelIndex { get; private set; }

    public byte Subdiv { get; private set; }

    public byte ChangeCount { get; private set; }

    public Int16 RopeLength { get; private set; }

    public byte LockedPoints { get; private set; }

    public float ScrollSpeed { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> StartPointHandle { get; private set; }
    public CBaseEntity? StartPoint => StartPointHandle.Get(Demo);

    public CHandle<CBaseEntity, DeadlockDemoParser> EndPointHandle { get; private set; }
    public CBaseEntity? EndPoint => EndPointHandle.Get(Demo);

    public AttachmentHandle StartAttachment { get; private set; } = new();

    public AttachmentHandle EndAttachment { get; private set; } = new();

    internal new static SendNodeDecoder<CRopeKeyframe> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_RopeFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Slack")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Slack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Width")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TextureScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSegments")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Segments = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bConstrainBetweenEndpoints")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConstrainBetweenEndpoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRopeMaterialModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeMaterialModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Subdiv")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Subdiv = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RopeLength")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLockedPoints")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LockedPoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScrollSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScrollSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hStartPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPointHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hEndPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndPointHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iStartAttachment")
        {
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAttachment = AttachmentHandle.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_iEndAttachment")
        {
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndAttachment = AttachmentHandle.Decode(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSceneEntity : CPointEntity
{
    internal CSceneEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsPlayingBack { get; private set; }

    public bool Paused { get; private set; }

    public bool Multiplayer { get; private set; }

    public bool Autogenerated { get; private set; }

    public float ForceClientTime { get; private set; }

    public NetworkedVector<CHandle<CBaseFlex, DeadlockDemoParser>> ActorList { get; private set; } = new NetworkedVector<CHandle<CBaseFlex, DeadlockDemoParser>>();

    public UInt16 SceneStringIndex { get; private set; }

    internal new static SendNodeDecoder<CSceneEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsPlayingBack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsPlayingBack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Paused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMultiplayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Multiplayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAutogenerated")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Autogenerated = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flForceClientTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceClientTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hActorList")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseFlex, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ActorList.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ActorList.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ActorList[index] = element;
                }
            };
        }
        if (field.VarName == "m_nSceneStringIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SceneStringIndex = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSceneEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSceneEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSceneEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSceneEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_hModel"
public partial class CShatterGlassShardPhysics : CPhysicsProp
{
    internal CShatterGlassShardPhysics(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public SharedModelDesc ShardDesc { get; private set; } = new();

    internal new static SendNodeDecoder<CShatterGlassShardPhysics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ShardDesc")
        {
            var innerDecoder = SharedModelDesc.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CShatterGlassShardPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ShardDesc, path, ref buffer);
            };
        }
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSkeletonAnimationController : ISkeletonAnimationController
{
    internal new static SendNodeDecoder<CSkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return ISkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkeletonInstance : CGameSceneNode
{
    public CModelState ModelState { get; private set; } = new();

    public bool IsAnimationEnabled { get; private set; }

    public bool UseParentRenderBounds { get; private set; }

    // MNetworkChangeCallback "skeletonMaterialGroupChanged"
    public CUtlStringToken MaterialGroup { get; private set; }

    public byte HitboxSet { get; private set; }

    internal new static SendNodeDecoder<CSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_modelState")
        {
            var innerDecoder = CModelState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ModelState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsAnimationEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsAnimationEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseParentRenderBounds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseParentRenderBounds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_materialGroup")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaterialGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitboxSet")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitboxSet = decoder(ref buffer);
            };
        }
        return CGameSceneNode.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkyCamera : CBaseEntity
{
    internal CSkyCamera(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Sky3DParams SkyboxData { get; private set; } = new();

    public CUtlStringToken SkyboxSlotToken { get; private set; }

    internal new static SendNodeDecoder<CSkyCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skyboxData")
        {
            var innerDecoder = Sky3DParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SkyboxData, path, ref buffer);
            };
        }
        if (field.VarName == "m_skyboxSlotToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxSlotToken = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSkyCamera.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSkyCamera.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSkyCamera.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSkyCamera.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntityBase : CBaseEntity
{
    internal CSoundAreaEntityBase(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public NetworkedString SoundAreaType { get; private set; }

    public Vector Pos { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSoundAreaType")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundAreaType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Pos = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntityOrientedBox : CSoundAreaEntityBase
{
    internal CSoundAreaEntityOrientedBox(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Min { get; private set; }

    public Vector Max { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityOrientedBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Min = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Max = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntitySphere : CSoundAreaEntityBase
{
    internal CSoundAreaEntitySphere(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Radius { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntitySphere> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSoundAreaEntitySphere @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundEventAABBEntity : CSoundEventEntity
{
    internal CSoundEventAABBEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Mins { get; private set; }

    public Vector Maxs { get; private set; }

    internal new static SendNodeDecoder<CSoundEventAABBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundEventAABBEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundEventAABBEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxs = decoder(ref buffer);
            };
        }
        return CSoundEventEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundEventAABBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundEventAABBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventAABBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventAABBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundEventEntity : CBaseEntity
{
    internal CSoundEventEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundEventEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundEventEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundEventEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundEventOBBEntity : CSoundEventEntity
{
    internal CSoundEventOBBEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Mins { get; private set; }

    public Vector Maxs { get; private set; }

    internal new static SendNodeDecoder<CSoundEventOBBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundEventOBBEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundEventOBBEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxs = decoder(ref buffer);
            };
        }
        return CSoundEventEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundEventOBBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundEventOBBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventOBBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventOBBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundEventPathCornerEntity : CSoundEventEntity
{
    internal CSoundEventPathCornerEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<SoundeventPathCornerPairNetworked> CornerPairsNetworked { get; private set; } = new NetworkedVector<SoundeventPathCornerPairNetworked>();

    internal new static SendNodeDecoder<CSoundEventPathCornerEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecCornerPairsNetworked")
        {
            var innerDecoder = decoderSet.GetDecoder<SoundeventPathCornerPairNetworked>(field.FieldSerializerKey!.Value);
            return (CSoundEventPathCornerEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.CornerPairsNetworked.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.CornerPairsNetworked.EnsureSize(index + 1);
                    var element = @this.CornerPairsNetworked[index] ??= new SoundeventPathCornerPairNetworked();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CSoundEventEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundEventPathCornerEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundEventPathCornerEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventPathCornerEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventPathCornerEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundEventSphereEntity : CSoundEventEntity
{
    internal CSoundEventSphereEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Radius { get; private set; }

    internal new static SendNodeDecoder<CSoundEventSphereEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSoundEventSphereEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        return CSoundEventEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundEventSphereEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundEventSphereEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventSphereEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundEventSphereEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetAABBEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetAABBEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetAABBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetAutoRoomEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetAutoRoomEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetAutoRoomEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetOBBEntity : CSoundOpvarSetAABBEntity
{
    internal CSoundOpvarSetOBBEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetAABBEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetOBBWindEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetOBBWindEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBWindEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPathCornerEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetPathCornerEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPathCornerEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPointBase : CBaseEntity
{
    internal CSoundOpvarSetPointBase(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString StackName { get; private set; }

    public NetworkedString OperatorName { get; private set; }

    public NetworkedString OpvarName { get; private set; }

    public Int32 OpvarIndex { get; private set; }

    public bool UseAutoCompare { get; private set; }

    internal new static SendNodeDecoder<CSoundOpvarSetPointBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszStackName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StackName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOperatorName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OperatorName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOpvarName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OpvarName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOpvarIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OpvarIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAutoCompare")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseAutoCompare = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPointEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetPointEntity(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSpotlightEnd : CBaseModelEntity
{
    internal CSpotlightEnd(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float LightScale { get; private set; }

    public float Radius { get; private set; }

    internal new static SendNodeDecoder<CSpotlightEnd> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flLightScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSprite : CBaseModelEntity
{
    internal CSprite(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> SpriteMaterial { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> AttachedToEntityHandle { get; private set; }
    public CBaseEntity? AttachedToEntity => AttachedToEntityHandle.Get(Demo);

    public AttachmentHandle Attachment { get; private set; } = new();

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 60
    // MNetworkEncodeFlags 2
    public float SpriteFramerate { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    public float Frame { get; private set; }

    public UInt32 Brightness { get; private set; }

    public float BrightnessDuration { get; private set; }

    // MNetworkChangeCallback "OnSpriteScaleChanged"
    public float SpriteScale { get; private set; }

    public float ScaleDuration { get; private set; }

    public bool WorldSpaceScale { get; private set; }

    // MNetworkBitCount 6
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 2
    public float GlowProxySize { get; private set; }

    public float HDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CSprite> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSpriteMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachedToEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachedToEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachment")
        {
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attachment = AttachmentHandle.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteFramerate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteFramerate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScaleDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldSpaceScale")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldSpaceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSprite.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSprite.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSprite.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSprite.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSpriteOriented : CSprite
{
    internal CSpriteOriented(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSpriteOriented> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSprite.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSpriteOriented.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_clrRender"
public partial class CSun : CBaseModelEntity
{
    internal CSun(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Direction { get; private set; }

    public Color Overlay { get; private set; }

    public NetworkedString EffectName { get; private set; }

    public NetworkedString SSEffectName { get; private set; }

    public bool On { get; private set; }

    public bool BmaxColor { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float Size { get; private set; }

    // MNetworkMinValue -360
    // MNetworkMaxValue 360
    public float SunRotation { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HazeScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaHaze { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaHdr { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HDRColorScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    public float FarZScale { get; private set; }

    internal new static SendNodeDecoder<CSun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Direction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Overlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSSEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SSEffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.On = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bmaxColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BmaxColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Size = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SunRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHazeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HazeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHaze")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaHaze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHdr")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaHdr = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CSun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iTeamNum"
public partial class CTeam : CBaseEntity
{
    internal CTeam(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkAlias "m_aPlayers"
    public NetworkedVector<CHandle<CBasePlayerController, DeadlockDemoParser>> PlayerControllers { get; private set; } = new NetworkedVector<CHandle<CBasePlayerController, DeadlockDemoParser>>();

    // MNetworkAlias "m_aPawns"
    public NetworkedVector<CHandle<CBasePlayerPawn, DeadlockDemoParser>> Players { get; private set; } = new NetworkedVector<CHandle<CBasePlayerPawn, DeadlockDemoParser>>();

    public Int32 Score { get; private set; }

    public string Teamname { get; private set; } = "";

    internal new static SendNodeDecoder<CTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_aPlayers")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PlayerControllers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PlayerControllers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PlayerControllers[index] = element;
                }
            };
        }
        if (field.VarName == "m_aPawns")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Players.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Players.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Players[index] = element;
                }
            };
        }
        if (field.VarName == "m_iScore")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Score = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamname")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Teamname = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTeamplayRules : CMultiplayRules
{
    internal new static SendNodeDecoder<CTeamplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CMultiplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkExcludeByName "m_iEffectIndex"
// MNetworkIncludeByName "m_iTeamNum"
public partial class CTeamRelativeParticleSystem : CParticleSystem
{
    internal CTeamRelativeParticleSystem(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> FriendlyEffectIndex { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EnemyEffectIndex { get; private set; }

    internal new static SendNodeDecoder<CTeamRelativeParticleSystem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iFriendlyEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CTeamRelativeParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FriendlyEffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemyEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CTeamRelativeParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyEffectIndex = decoder(ref buffer);
            };
        }
        return CParticleSystem.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTeamRelativeParticleSystem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTeamRelativeParticleSystem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTeamRelativeParticleSystem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTeamRelativeParticleSystem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTextureBasedAnimatable : CBaseModelEntity
{
    internal CTextureBasedAnimatable(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Loop { get; private set; }

    public float FPS { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> PositionKeys { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> RotationKeys { get; private set; }

    public Vector AnimationBoundsMin { get; private set; }

    public Vector AnimationBoundsMax { get; private set; }

    public float StartTime { get; private set; }

    public float StartFrame { get; private set; }

    internal new static SendNodeDecoder<CTextureBasedAnimatable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bLoop")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Loop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFPS")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FPS = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPositionKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PositionKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRotationKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RotationKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationBoundsMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationBoundsMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartFrame = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTier3BossAbility : CCitadelBaseAbilityServerOnly
{
    internal CTier3BossAbility(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTier3BossAbility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCitadelBaseAbilityServerOnly.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTier3BossAbility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTier3BossAbility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTier3BossAbility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTier3BossAbility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MEntityAllowsPortraitWorldSpawn
public partial class CTonemapController2 : CBaseEntity
{
    internal CTonemapController2(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float AutoExposureMin { get; private set; }

    public float AutoExposureMax { get; private set; }

    public float TonemapPercentTarget { get; private set; }

    public float TonemapPercentBrightPixels { get; private set; }

    public float TonemapMinAvgLum { get; private set; }

    public float ExposureAdaptationSpeedUp { get; private set; }

    public float ExposureAdaptationSpeedDown { get; private set; }

    public float TonemapEVSmoothingRange { get; private set; }

    internal new static SendNodeDecoder<CTonemapController2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAutoExposureMin")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoExposureMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoExposureMax")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoExposureMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentBrightPixels")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentBrightPixels = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapMinAvgLum")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapMinAvgLum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureAdaptationSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureAdaptationSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTonemapController2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTonemapController2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTonemapController2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTonemapController2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerItemShop : CBaseTrigger
{
    internal CTriggerItemShop(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CCitadelMinimapComponent"
    // MNetworkAlias "CCitadelMinimapComponent"
    // MNetworkTypeAlias "CCitadelMinimapComponent"
    public CCitadelMinimapComponent CCitadelMinimapComponent { get; private set; } = new();

    public NetworkedString SoundName { get; private set; }

    internal new static SendNodeDecoder<CTriggerItemShop> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CCitadelMinimapComponent")
        {
            var innerDecoder = CCitadelMinimapComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CTriggerItemShop @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CCitadelMinimapComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_iszSoundName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CTriggerItemShop @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundName = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerItemShop.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerItemShop.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerItemShop.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerItemShop.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerModifier : CBaseTrigger
{
    internal CTriggerModifier(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerModifier> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerModifier.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerModifier.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerModifier.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerModifier.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerMultiple : CBaseTrigger
{
    internal CTriggerMultiple(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerMultiple> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerMultiple.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerMultiple.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerMultiple.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerMultiple.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerPhysics : CBaseTrigger
{
    internal CTriggerPhysics(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float TriggerGravityScale { get; private set; }

    public float LinearLimit { get; private set; }

    public float LinearDamping { get; private set; }

    public float AngularLimit { get; private set; }

    public float AngularDamping { get; private set; }

    public float LinearForce { get; private set; }

    public float Frequency { get; private set; }

    public float DampingRatio { get; private set; }

    public Vector LinearForcePointAt { get; private set; }

    public bool CollapseToForcePoint { get; private set; }

    public Vector LinearForcePointAtWorld { get; private set; }

    public Vector LinearForceDirection { get; private set; }

    public bool ConvertToDebrisWhenPossible { get; private set; }

    internal new static SendNodeDecoder<CTriggerPhysics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_gravityScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TriggerGravityScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearLimit")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearLimit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearDamping")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearDamping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angularLimit")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AngularLimit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angularDamping")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AngularDamping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearForce")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrequency")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frequency = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDampingRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DampingRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForcePointAt")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForcePointAt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCollapseToForcePoint")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollapseToForcePoint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForcePointAtWorld")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForcePointAtWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForceDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForceDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bConvertToDebrisWhenPossible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConvertToDebrisWhenPossible = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerVolume : CBaseModelEntity
{
    internal CTriggerVolume(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWaterBullet : CBaseAnimGraph
{
    internal CWaterBullet(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWaterBullet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CWaterBullet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWaterBullet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWaterBullet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWaterBullet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWorld : CBaseModelEntity
{
    internal CWorld(DeadlockDemoParser.EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWorld> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireCreateEvent()
    {
        Demo.EntityEvents.CWorld.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWorld.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWorld.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWorld.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class DynamicAbilityValues
{
    public CUtlStringToken SourceAbilityID { get; private set; }

    public CUtlStringToken TargetAbilityID { get; private set; }

    public EModifierValue ValType { get; private set; }

    public float Value { get; private set; }

    internal static SendNodeDecoder<DynamicAbilityValues> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_SourceAbilityID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (DynamicAbilityValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SourceAbilityID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TargetAbilityID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (DynamicAbilityValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetAbilityID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eValType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EModifierValue>(field.FieldEncodingInfo);
            return (DynamicAbilityValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ValType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (DynamicAbilityValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Value = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (DynamicAbilityValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class EntityRenderAttribute
{
    public CUtlStringToken ID { get; private set; }

    public Vector4D Values { get; private set; }

    internal static SendNodeDecoder<EntityRenderAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Values")
        {
            var decoder = FieldDecode.CreateDecoder_Vector4D(field.FieldEncodingInfo);
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Values = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class FogParams
{
    // MNetworkEncoder "coord"
    public Vector DirPrimary { get; private set; }

    public Color ColorPrimary { get; private set; }

    public Color ColorSecondary { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color ColorPrimaryLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color ColorSecondaryLerpTo { get; private set; }

    public float Start { get; private set; }

    public float End { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Farz { get; private set; }

    public float Maxdensity { get; private set; }

    public float Exponent { get; private set; }

    public float HDRColorScale { get; private set; }

    // MNetworkUserGroup "FogController"
    public float SkyboxFogFactor { get; private set; }

    // MNetworkUserGroup "FogController"
    public float SkyboxFogFactorLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float StartLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float EndLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float MaxdensityLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public GameTime Lerptime { get; private set; } = new();

    // MNetworkUserGroup "FogController"
    public float Duration { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Blendtobackground { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Scattering { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Locallightscale { get; private set; }

    public bool Enable { get; private set; }

    public bool Blend { get; private set; }

    public bool NoReflectionFog { get; private set; }

    internal static SendNodeDecoder<FogParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "dirPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorSecondary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorPrimaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorSecondaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "start")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Start = decoder(ref buffer);
            };
        }
        if (field.VarName == "end")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.End = decoder(ref buffer);
            };
        }
        if (field.VarName == "farz")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Farz = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxdensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "exponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "HDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactor")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxFogFactor = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactorLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxFogFactorLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "startLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "endLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensityLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxdensityLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "lerptime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lerptime = decoder(ref buffer);
            };
        }
        if (field.VarName == "duration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Duration = decoder(ref buffer);
            };
        }
        if (field.VarName == "blendtobackground")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blendtobackground = decoder(ref buffer);
            };
        }
        if (field.VarName == "scattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "locallightscale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Locallightscale = decoder(ref buffer);
            };
        }
        if (field.VarName == "enable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enable = decoder(ref buffer);
            };
        }
        if (field.VarName == "blend")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blend = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoReflectionFog")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoReflectionFog = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class FogPlayerParams
{
    // MNetworkUserGroup "PlayerFogController"
    public CHandle<CFogController, DeadlockDemoParser> CtrlHandle { get; private set; }

    internal static SendNodeDecoder<FogPlayerParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CFogController, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (FogPlayerParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CtrlHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (FogPlayerParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MGetKV3ClassDefaults
public partial class FullSellPriceAbilityUpgrades
{
    internal static SendNodeDecoder<FullSellPriceAbilityUpgrades> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (FullSellPriceAbilityUpgrades @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MIsBoxedIntegerType
public readonly record struct HeroBuildID(int Value)
{
    public static HeroBuildID Decode(ref BitBuffer buffer) => new HeroBuildID(buffer.ReadVarInt32());
}

// MIsBoxedIntegerType
public readonly record struct HeroID(int Value)
{
    public static HeroID Decode(ref BitBuffer buffer) => new HeroID(buffer.ReadVarInt32());
}

public partial class ice_path_shard_model_desc
{
    public Int32 ModelID { get; private set; }

    public Vector2D PanelSize { get; private set; }

    public NetworkedVector<Vector> PanelVertices { get; private set; } = new NetworkedVector<Vector>();

    public float Thickness { get; private set; }

    public CUtlStringToken SurfacePropStringToken { get; private set; }

    internal static SendNodeDecoder<ice_path_shard_model_desc> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nModelID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ModelID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelVertices")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PanelVertices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PanelVertices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PanelVertices[index] = element;
                }
            };
        }
        if (field.VarName == "m_flThickness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Thickness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SurfacePropStringToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SurfacePropStringToken = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ice_path_shard_model_desc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class IEconItemInterface
{
    internal static SendNodeDecoder<IEconItemInterface> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (IEconItemInterface @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCModel
{
    internal static SendNodeDecoder<InfoForResourceTypeCModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCPostProcessingResource
{
    internal static SendNodeDecoder<InfoForResourceTypeCPostProcessingResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCPostProcessingResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCTextureBase
{
    internal static SendNodeDecoder<InfoForResourceTypeCTextureBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCTextureBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeIMaterial2
{
    internal static SendNodeDecoder<InfoForResourceTypeIMaterial2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeIMaterial2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeIParticleSystemDefinition
{
    internal static SendNodeDecoder<InfoForResourceTypeIParticleSystemDefinition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeIParticleSystemDefinition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ISkeletonAnimationController
{
    internal static SendNodeDecoder<ISkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ISkeletonAnimationController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MIsBoxedIntegerType
public readonly record struct ItemDefinitionIndex(int Value)
{
    public static ItemDefinitionIndex Decode(ref BitBuffer buffer) => new ItemDefinitionIndex(buffer.ReadVarInt32());
}

// MIsBoxedIntegerType
public readonly record struct ItemID(int Value)
{
    public static ItemID Decode(ref BitBuffer buffer) => new ItemID(buffer.ReadVarInt32());
}

public partial class ItemImbuementPair
{
    public CUtlStringToken SourceItemID { get; private set; }

    public CUtlStringToken TargetAbilityID { get; private set; }

    internal static SendNodeDecoder<ItemImbuementPair> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_SourceItemID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (ItemImbuementPair @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SourceItemID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TargetAbilityID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (ItemImbuementPair @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetAbilityID = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ItemImbuementPair @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class LockonTarget
{
    public float LatchedValue { get; private set; }

    public GameTime LatchedTime { get; private set; } = new();

    public ELockonState LockonState { get; private set; }

    public CHandle<CBaseEntity, DeadlockDemoParser> TargetHandle { get; private set; }

    internal static SendNodeDecoder<LockonTarget> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flLatchedValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (LockonTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchedValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLatchedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (LockonTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LatchedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eLockonState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ELockonState>(field.FieldEncodingInfo);
            return (LockonTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LockonState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (LockonTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (LockonTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MIsBoxedIntegerType
public readonly record struct MatchID(int Value)
{
    public static MatchID Decode(ref BitBuffer buffer) => new MatchID(buffer.ReadVarInt32());
}

public partial class PhysicsRagdollPose
{
    // MNetworkChangeCallback "OnTransformChanged"
    public NetworkedVector<CTransform> Transforms { get; private set; } = new NetworkedVector<CTransform>();

    public CHandle<CBaseEntity, DeadlockDemoParser> OwnerHandle { get; private set; }

    internal static SendNodeDecoder<PhysicsRagdollPose> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Transforms")
        {
            var decoder = FieldDecode.CreateDecoder_CTransform(field.FieldEncodingInfo);
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Transforms.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Transforms.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Transforms[index] = element;
                }
            };
        }
        if (field.VarName == "m_hOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class PlayerDataGlobal
{
    public Int32 Level { get; private set; }

    public Int32 MaxAmmo { get; private set; }

    public Int32 HealthMax { get; private set; }

    public float HealthRegen { get; private set; }

    public GameTime RespawnTime { get; private set; } = new();

    public HeroID HeroID { get; private set; } = new();

    public Int32 GoldNetWorth { get; private set; }

    public Int32 APNetWorth { get; private set; }

    public Int32 CreepGold { get; private set; }

    public Int32 CreepGoldSoloBonus { get; private set; }

    public Int32 CreepGoldKill { get; private set; }

    public Int32 CreepGoldAirOrb { get; private set; }

    public Int32 CreepGoldGroundOrb { get; private set; }

    public Int32 CreepGoldDeny { get; private set; }

    public Int32 CreepGoldNeutral { get; private set; }

    public Int32 FarmBaseline { get; private set; }

    public Int32 Health { get; private set; }

    public Int32 PlayerKills { get; private set; }

    public Int32 PlayerAssists { get; private set; }

    public Int32 Deaths { get; private set; }

    public Int32 Denies { get; private set; }

    public Int32 LastHits { get; private set; }

    public bool Alive { get; private set; }

    // MNetworkChangeCallback "HeroDraftPositionChanged"
    public Int32 HeroDraftPosition { get; private set; }

    public bool UltimateTrained { get; private set; }

    public GameTime UltimateCooldownStart { get; private set; } = new();

    public GameTime UltimateCooldownEnd { get; private set; } = new();

    public bool HasRejuvenator { get; private set; }

    public bool HasRebirth { get; private set; }

    public bool FlaggedAsCheater { get; private set; }

    public Int32 HeroDamage { get; private set; }

    public Int32 HeroHealing { get; private set; }

    public Int32 SelfHealing { get; private set; }

    public Int32 ObjectiveDamage { get; private set; }

    // MNetworkUserGroup "Abilities"
    // MNetworkChangeCallback "pdgAbilitiesChanged"
    public Int32[] HeroAbilityUpgradeBits { get; private set; } = Array.Empty<Int32>();

    // MNetworkUserGroup "Abilities"
    // MNetworkChangeCallback "pdgUpgradesChanged"
    public NetworkedVector<CUtlStringToken> Upgrades { get; private set; } = new NetworkedVector<CUtlStringToken>();

    public NetworkedVector<CUtlStringToken> BonusCounterAbilities { get; private set; } = new NetworkedVector<CUtlStringToken>();

    // MNetworkUserGroup "Abilities"
    // MNetworkChangeCallback "pdgBonusCounterChanged"
    public NetworkedVector<Int32> BonusCounterValues { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "Abilities"
    // MNetworkChangeCallback "pdgUpgradesChanged"
    public CUtlStringToken HeldItem { get; private set; }

    public NetworkedVector<ItemImbuementPair> Imbuements { get; private set; } = new NetworkedVector<ItemImbuementPair>();

    public NetworkedVector<DynamicAbilityValues> DynamicAbilityValues { get; private set; } = new NetworkedVector<DynamicAbilityValues>();

    public NetworkedVector<StatViewerModifierValues> StatViewerModifierValues { get; private set; } = new NetworkedVector<StatViewerModifierValues>();

    internal static SendNodeDecoder<PlayerDataGlobal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Level = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxAmmo")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxAmmo = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHealthMax")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HealthMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHealthRegen")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HealthRegen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRespawnTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RespawnTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHeroID")
        {
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroID = HeroID.Decode(ref buffer);
            };
        }
        if (field.VarName == "m_iGoldNetWorth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GoldNetWorth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAPNetWorth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.APNetWorth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGold")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGold = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldSoloBonus")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldSoloBonus = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldKill")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldKill = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldAirOrb")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldAirOrb = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldGroundOrb")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldGroundOrb = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldDeny")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldDeny = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCreepGoldNeutral")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreepGoldNeutral = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iFarmBaseline")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarmBaseline = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHealth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Health = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPlayerKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPlayerAssists")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerAssists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDeaths")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Deaths = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDenies")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Denies = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLastHits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastHits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Alive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHeroDraftPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroDraftPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUltimateTrained")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UltimateTrained = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flUltimateCooldownStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UltimateCooldownStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flUltimateCooldownEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UltimateCooldownEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasRejuvenator")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasRejuvenator = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasRebirth")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasRebirth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlaggedAsCheater")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlaggedAsCheater = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHeroDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHeroHealing")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeroHealing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSelfHealing")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelfHealing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iObjectiveDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObjectiveDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHeroAbilityUpgradeBits")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HeroAbilityUpgradeBits.Length == 0) @this.HeroAbilityUpgradeBits = new Int32[fixedArraySize];
                @this.HeroAbilityUpgradeBits[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecUpgrades")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Upgrades.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Upgrades.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Upgrades[index] = element;
                }
            };
        }
        if (field.VarName == "m_vecBonusCounterAbilities")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.BonusCounterAbilities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.BonusCounterAbilities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.BonusCounterAbilities[index] = element;
                }
            };
        }
        if (field.VarName == "m_vecBonusCounterValues")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.BonusCounterValues.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.BonusCounterValues.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.BonusCounterValues[index] = element;
                }
            };
        }
        if (field.VarName == "m_tHeldItem")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeldItem = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecImbuements")
        {
            var innerDecoder = decoderSet.GetDecoder<ItemImbuementPair>(field.FieldSerializerKey!.Value);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Imbuements.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.Imbuements.EnsureSize(index + 1);
                    var element = @this.Imbuements[index] ??= new ItemImbuementPair();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_vecDynamicAbilityValues")
        {
            var innerDecoder = decoderSet.GetDecoder<DynamicAbilityValues>(field.FieldSerializerKey!.Value);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.DynamicAbilityValues.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.DynamicAbilityValues.EnsureSize(index + 1);
                    var element = @this.DynamicAbilityValues[index] ??= new DynamicAbilityValues();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_vecStatViewerModifierValues")
        {
            var innerDecoder = decoderSet.GetDecoder<StatViewerModifierValues>(field.FieldSerializerKey!.Value);
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.StatViewerModifierValues.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.StatViewerModifierValues.EnsureSize(index + 1);
                    var element = @this.StatViewerModifierValues[index] ??= new StatViewerModifierValues();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (PlayerDataGlobal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class SharedModelDesc
{
    public Int32 ModelID { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> MaterialBase { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> MaterialDamageOverlay { get; private set; }

    public ShardSolid Solid { get; private set; }

    public Vector2D PanelSize { get; private set; }

    public Vector2D StressPositionA { get; private set; }

    public Vector2D StressPositionB { get; private set; }

    public NetworkedVector<Vector2D> PanelVertices { get; private set; } = new NetworkedVector<Vector2D>();

    public NetworkedVector<Vector4D> InitialPanelVertices { get; private set; } = new NetworkedVector<Vector4D>();

    public float GlassHalfThickness { get; private set; }

    public bool HasParent { get; private set; }

    public bool ParentFrozen { get; private set; }

    public CUtlStringToken SurfacePropStringToken { get; private set; }

    internal static SendNodeDecoder<SharedModelDesc> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nModelID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ModelID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaterialBase")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaterialBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaterialDamageOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaterialDamageOverlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_solid")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ShardSolid>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Solid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionA")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StressPositionA = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionB")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StressPositionB = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelVertices")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PanelVertices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PanelVertices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PanelVertices[index] = element;
                }
            };
        }
        if (field.VarName == "m_vInitialPanelVertices")
        {
            var decoder = FieldDecode.CreateDecoder_Vector4D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.InitialPanelVertices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.InitialPanelVertices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.InitialPanelVertices[index] = element;
                }
            };
        }
        if (field.VarName == "m_flGlassHalfThickness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlassHalfThickness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasParent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasParent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bParentFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParentFrozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SurfacePropStringToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SurfacePropStringToken = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class Sky3DParams
{
    public Int16 Scale { get; private set; }

    // MNetworkEncoder "coord"
    public Vector Origin { get; private set; }

    public bool Clip3DSkyBoxNearToWorldFar { get; private set; }

    public float Clip3DSkyBoxNearToWorldFarOffset { get; private set; }

    public FogParams Fog { get; private set; } = new();

    public WorldGroupId WorldGroupID { get; private set; }

    internal static SendNodeDecoder<Sky3DParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "scale")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "origin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Origin = decoder(ref buffer);
            };
        }
        if (field.VarName == "bClip3DSkyBoxNearToWorldFar")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip3DSkyBoxNearToWorldFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "flClip3DSkyBoxNearToWorldFarOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip3DSkyBoxNearToWorldFarOffset = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "fog")
        {
            var innerDecoder = FogParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Fog, path, ref buffer);
            };
        }
        if (field.VarName == "m_nWorldGroupID")
        {
            var decoder = FieldDecode.CreateDecoder_WorldGroupId(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldGroupID = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class SoundeventPathCornerPairNetworked
{
    internal static SendNodeDecoder<SoundeventPathCornerPairNetworked> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (SoundeventPathCornerPairNetworked @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class StatViewerModifierValues
{
    public CUtlStringToken SourceModifierID { get; private set; }

    public EModifierValue ValType { get; private set; }

    public float Value { get; private set; }

    internal static SendNodeDecoder<StatViewerModifierValues> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_SourceModifierID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (StatViewerModifierValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SourceModifierID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eValType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EModifierValue>(field.FieldEncodingInfo);
            return (StatViewerModifierValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ValType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (StatViewerModifierValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Value = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (StatViewerModifierValues @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class STeamFOWEntity
{
    public CEntityIndex EntIndex { get; private set; }

    public Int32 Team { get; private set; }

    public Class_T Class { get; private set; }

    public Int32 Lane { get; private set; }

    public EMinimapHeight Height { get; private set; }

    public bool VisibleOnMap { get; private set; }

    public bool BackdoorProtectionActive { get; private set; }

    public GameTick TickHidden { get; private set; } = new();

    public NetworkedString StrEntityName { get; private set; }

    public byte HealthPercent { get; private set; }

    // MNetworkPriority 32
    public byte PositionX { get; private set; }

    // MNetworkPriority 32
    public byte PositionY { get; private set; }

    internal static SendNodeDecoder<STeamFOWEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nEntIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Team = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eClass")
        {
            var decoder = FieldDecode.CreateDecoder_enum<Class_T>(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Class = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLane")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eHeight")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EMinimapHeight>(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Height = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bVisibleOnMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VisibleOnMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBackdoorProtectionActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BackdoorProtectionActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTickHidden")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TickHidden = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_strEntityName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StrEntityName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHealthPercent")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HealthPercent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPositionX")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PositionX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPositionY")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PositionY = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (STeamFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class STrooperFOWEntity
{
    public CEntityIndex EntIndex { get; private set; }

    public sbyte Team { get; private set; }

    // MNetworkPriority 32
    // MNetworkChangeCallback "OnFieldXYChanged"
    public UInt16 PositionXY { get; private set; }

    internal static SendNodeDecoder<STrooperFOWEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nEntIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (STrooperFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeam")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (STrooperFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Team = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPositionXY")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (STrooperFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PositionXY = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (STrooperFOWEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MIsBoxedIntegerType
public readonly record struct StyleIndex(int Value)
{
    public static StyleIndex Decode(ref BitBuffer buffer) => new StyleIndex(buffer.ReadVarInt32());
}

public partial class ViewAngleServerChange
{
    public FixAngleSet Type { get; private set; }

    // MNetworkEncoder "qangle_precise"
    public QAngle Angle { get; private set; }

    public UInt32 Index { get; private set; }

    internal static SendNodeDecoder<ViewAngleServerChange> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "nType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<FixAngleSet>(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Type = decoder(ref buffer);
            };
        }
        if (field.VarName == "qAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Angle = decoder(ref buffer);
            };
        }
        if (field.VarName == "nIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Index = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class VPhysicsCollisionAttribute
{
    public UInt64 InteractsAs { get; private set; }

    public UInt64 InteractsWith { get; private set; }

    public UInt64 InteractsExclude { get; private set; }

    public UInt32 EntityId { get; private set; }

    public UInt32 OwnerId { get; private set; }

    public UInt16 HierarchyId { get; private set; }

    public byte CollisionGroup { get; private set; }

    public byte CollisionFunctionMask { get; private set; }

    internal static SendNodeDecoder<VPhysicsCollisionAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nInteractsAs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsAs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsWith")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsWith = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsExclude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsExclude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEntityId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHierarchyId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HierarchyId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionFunctionMask")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionFunctionMask = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class WeakPoint
{
    // MNetworkChangeCallback "OnOuterChanged"
    public CHandle<CBaseEntity, DeadlockDemoParser> OuterHandle { get; private set; }

    // MNetworkChangeCallback "OnFlashDataChanged"
    public HitGroup CritHitGroup { get; private set; }

    // MNetworkChangeCallback "OnFlashDataChanged"
    public Int32 BodyGroup { get; private set; }

    // MNetworkChangeCallback "OnPermanentlyBroken"
    public bool PermanentlyBroken { get; private set; }

    public Int32 BrokenBodygroupIndex { get; private set; }

    internal static SendNodeDecoder<WeakPoint> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hOuter")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity, DeadlockDemoParser>(field.FieldEncodingInfo);
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCritHitGroup")
        {
            var decoder = FieldDecode.CreateDecoder_enum<HitGroup>(field.FieldEncodingInfo);
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CritHitGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBodyGroup")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BodyGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPermanentlyBroken")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PermanentlyBroken = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBrokenBodygroupIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrokenBodygroupIndex = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (WeakPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

internal sealed class DeadlockDecoderSet : DecoderSet
{
    internal DeadlockDecoderSet(IReadOnlyDictionary<SerializerKey, Serializer> serializers) : base(serializers)
    {
    }

    public override bool TryGetDecoderByName(string className, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor), NotNullWhen(true)] out Type? classType, [NotNullWhen(true)] out SendNodeDecoder<object>? decoder)
    {
        switch (className)
        {
        case "AbilityResource_t":
        {
            var innerDecoder = GetDecoder<AbilityResource>(new SerializerKey(className, 0));
            classType = typeof(AbilityResource);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is AbilityResource);
                var @this = Unsafe.As<AbilityResource>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "audioparams_t":
        {
            var innerDecoder = GetDecoder<AudioParams>(new SerializerKey(className, 0));
            classType = typeof(AudioParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is AudioParams);
                var @this = Unsafe.As<AudioParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Fathom_ReefdwellerHarpoon":
        {
            var innerDecoder = GetDecoder<CAbility_Fathom_ReefdwellerHarpoon>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Fathom_ReefdwellerHarpoon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Fathom_ReefdwellerHarpoon);
                var @this = Unsafe.As<CAbility_Fathom_ReefdwellerHarpoon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Mirage_SandPhantom":
        {
            var innerDecoder = GetDecoder<CAbility_Mirage_SandPhantom>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Mirage_SandPhantom);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Mirage_SandPhantom);
                var @this = Unsafe.As<CAbility_Mirage_SandPhantom>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Mirage_Tornado":
        {
            var innerDecoder = GetDecoder<CAbility_Mirage_Tornado>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Mirage_Tornado);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Mirage_Tornado);
                var @this = Unsafe.As<CAbility_Mirage_Tornado>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Rutger_CheatDeath":
        {
            var innerDecoder = GetDecoder<CAbility_Rutger_CheatDeath>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Rutger_CheatDeath);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Rutger_CheatDeath);
                var @this = Unsafe.As<CAbility_Rutger_CheatDeath>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Rutger_ForceField":
        {
            var innerDecoder = GetDecoder<CAbility_Rutger_ForceField>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Rutger_ForceField);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Rutger_ForceField);
                var @this = Unsafe.As<CAbility_Rutger_ForceField>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Rutger_RocketLauncher":
        {
            var innerDecoder = GetDecoder<CAbility_Rutger_RocketLauncher>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Rutger_RocketLauncher);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Rutger_RocketLauncher);
                var @this = Unsafe.As<CAbility_Rutger_RocketLauncher>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_Affliction":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_Affliction>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_Affliction);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_Affliction);
                var @this = Unsafe.As<CAbility_Synth_Affliction>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_Barrage":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_Barrage>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_Barrage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_Barrage);
                var @this = Unsafe.As<CAbility_Synth_Barrage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_Blitz":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_Blitz>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_Blitz);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_Blitz);
                var @this = Unsafe.As<CAbility_Synth_Blitz>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_Grasp":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_Grasp>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_Grasp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_Grasp);
                var @this = Unsafe.As<CAbility_Synth_Grasp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_PlasmaFlux":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_PlasmaFlux>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_PlasmaFlux);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_PlasmaFlux);
                var @this = Unsafe.As<CAbility_Synth_PlasmaFlux>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAbility_Synth_Pulse":
        {
            var innerDecoder = GetDecoder<CAbility_Synth_Pulse>(new SerializerKey(className, 0));
            classType = typeof(CAbility_Synth_Pulse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAbility_Synth_Pulse);
                var @this = Unsafe.As<CAbility_Synth_Pulse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAI_BaseNPC":
        {
            var innerDecoder = GetDecoder<CAI_BaseNPC>(new SerializerKey(className, 0));
            classType = typeof(CAI_BaseNPC);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAI_BaseNPC);
                var @this = Unsafe.As<CAI_BaseNPC>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAI_CitadelNPC":
        {
            var innerDecoder = GetDecoder<CAI_CitadelNPC>(new SerializerKey(className, 0));
            classType = typeof(CAI_CitadelNPC);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAI_CitadelNPC);
                var @this = Unsafe.As<CAI_CitadelNPC>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAnimGraph2TestProp":
        {
            var innerDecoder = GetDecoder<CAnimGraph2TestProp>(new SerializerKey(className, 0));
            classType = typeof(CAnimGraph2TestProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAnimGraph2TestProp);
                var @this = Unsafe.As<CAnimGraph2TestProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAnimGraphNetworkedVariables":
        {
            var innerDecoder = GetDecoder<CAnimGraphNetworkedVariables>(new SerializerKey(className, 0));
            classType = typeof(CAnimGraphNetworkedVariables);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAnimGraphNetworkedVariables);
                var @this = Unsafe.As<CAnimGraphNetworkedVariables>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAssignedLaneParticle":
        {
            var innerDecoder = GetDecoder<CAssignedLaneParticle>(new SerializerKey(className, 0));
            classType = typeof(CAssignedLaneParticle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAssignedLaneParticle);
                var @this = Unsafe.As<CAssignedLaneParticle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeContainer":
        {
            var innerDecoder = GetDecoder<CAttributeContainer>(new SerializerKey(className, 0));
            classType = typeof(CAttributeContainer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeContainer);
                var @this = Unsafe.As<CAttributeContainer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeList":
        {
            var innerDecoder = GetDecoder<CAttributeList>(new SerializerKey(className, 0));
            classType = typeof(CAttributeList);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeList);
                var @this = Unsafe.As<CAttributeList>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeManager":
        {
            var innerDecoder = GetDecoder<CAttributeManager>(new SerializerKey(className, 0));
            classType = typeof(CAttributeManager);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeManager);
                var @this = Unsafe.As<CAttributeManager>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBarnLight":
        {
            var innerDecoder = GetDecoder<CBarnLight>(new SerializerKey(className, 0));
            classType = typeof(CBarnLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBarnLight);
                var @this = Unsafe.As<CBarnLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseAnimGraph":
        {
            var innerDecoder = GetDecoder<CBaseAnimGraph>(new SerializerKey(className, 0));
            classType = typeof(CBaseAnimGraph);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseAnimGraph);
                var @this = Unsafe.As<CBaseAnimGraph>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseAnimGraphController":
        {
            var innerDecoder = GetDecoder<CBaseAnimGraphController>(new SerializerKey(className, 0));
            classType = typeof(CBaseAnimGraphController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseAnimGraphController);
                var @this = Unsafe.As<CBaseAnimGraphController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseButton":
        {
            var innerDecoder = GetDecoder<CBaseButton>(new SerializerKey(className, 0));
            classType = typeof(CBaseButton);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseButton);
                var @this = Unsafe.As<CBaseButton>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseClientUIEntity":
        {
            var innerDecoder = GetDecoder<CBaseClientUIEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseClientUIEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseClientUIEntity);
                var @this = Unsafe.As<CBaseClientUIEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseCombatCharacter":
        {
            var innerDecoder = GetDecoder<CBaseCombatCharacter>(new SerializerKey(className, 0));
            classType = typeof(CBaseCombatCharacter);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseCombatCharacter);
                var @this = Unsafe.As<CBaseCombatCharacter>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseDoor":
        {
            var innerDecoder = GetDecoder<CBaseDoor>(new SerializerKey(className, 0));
            classType = typeof(CBaseDoor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseDoor);
                var @this = Unsafe.As<CBaseDoor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseEntity":
        {
            var innerDecoder = GetDecoder<CBaseEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseEntity);
                var @this = Unsafe.As<CBaseEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseFire":
        {
            var innerDecoder = GetDecoder<CBaseFire>(new SerializerKey(className, 0));
            classType = typeof(CBaseFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseFire);
                var @this = Unsafe.As<CBaseFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseFlex":
        {
            var innerDecoder = GetDecoder<CBaseFlex>(new SerializerKey(className, 0));
            classType = typeof(CBaseFlex);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseFlex);
                var @this = Unsafe.As<CBaseFlex>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseModelEntity":
        {
            var innerDecoder = GetDecoder<CBaseModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseModelEntity);
                var @this = Unsafe.As<CBaseModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerController":
        {
            var innerDecoder = GetDecoder<CBasePlayerController>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerController);
                var @this = Unsafe.As<CBasePlayerController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerPawn":
        {
            var innerDecoder = GetDecoder<CBasePlayerPawn>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerPawn);
                var @this = Unsafe.As<CBasePlayerPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerWeapon":
        {
            var innerDecoder = GetDecoder<CBasePlayerWeapon>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerWeapon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerWeapon);
                var @this = Unsafe.As<CBasePlayerWeapon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseProp":
        {
            var innerDecoder = GetDecoder<CBaseProp>(new SerializerKey(className, 0));
            classType = typeof(CBaseProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseProp);
                var @this = Unsafe.As<CBaseProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePropDoor":
        {
            var innerDecoder = GetDecoder<CBasePropDoor>(new SerializerKey(className, 0));
            classType = typeof(CBasePropDoor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePropDoor);
                var @this = Unsafe.As<CBasePropDoor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseToggle":
        {
            var innerDecoder = GetDecoder<CBaseToggle>(new SerializerKey(className, 0));
            classType = typeof(CBaseToggle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseToggle);
                var @this = Unsafe.As<CBaseToggle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseTrigger":
        {
            var innerDecoder = GetDecoder<CBaseTrigger>(new SerializerKey(className, 0));
            classType = typeof(CBaseTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseTrigger);
                var @this = Unsafe.As<CBaseTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBeam":
        {
            var innerDecoder = GetDecoder<CBeam>(new SerializerKey(className, 0));
            classType = typeof(CBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBeam);
                var @this = Unsafe.As<CBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponent":
        {
            var innerDecoder = GetDecoder<CBodyComponent>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponent);
                var @this = Unsafe.As<CBodyComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentBaseAnimGraph":
        {
            var innerDecoder = GetDecoder<CBodyComponentBaseAnimGraph>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentBaseAnimGraph);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseAnimGraph);
                var @this = Unsafe.As<CBodyComponentBaseAnimGraph>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentBaseModelEntity":
        {
            var innerDecoder = GetDecoder<CBodyComponentBaseModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentBaseModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseModelEntity);
                var @this = Unsafe.As<CBodyComponentBaseModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentPoint":
        {
            var innerDecoder = GetDecoder<CBodyComponentPoint>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentPoint);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentPoint);
                var @this = Unsafe.As<CBodyComponentPoint>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentSkeletonInstance":
        {
            var innerDecoder = GetDecoder<CBodyComponentSkeletonInstance>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentSkeletonInstance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentSkeletonInstance);
                var @this = Unsafe.As<CBodyComponentSkeletonInstance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreakable":
        {
            var innerDecoder = GetDecoder<CBreakable>(new SerializerKey(className, 0));
            classType = typeof(CBreakable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreakable);
                var @this = Unsafe.As<CBreakable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreakableProp":
        {
            var innerDecoder = GetDecoder<CBreakableProp>(new SerializerKey(className, 0));
            classType = typeof(CBreakableProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreakableProp);
                var @this = Unsafe.As<CBreakableProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Afterburn":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Afterburn>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Afterburn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Afterburn);
                var @this = Unsafe.As<CCitadel_Ability_Afterburn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Astro_Rifle":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Astro_Rifle>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Astro_Rifle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Astro_Rifle);
                var @this = Unsafe.As<CCitadel_Ability_Astro_Rifle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Astro_Shotgun_Toggle":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Astro_Shotgun_Toggle>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Astro_Shotgun_Toggle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Astro_Shotgun_Toggle);
                var @this = Unsafe.As<CCitadel_Ability_Astro_Shotgun_Toggle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_BaseHeldItem":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_BaseHeldItem>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_BaseHeldItem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_BaseHeldItem);
                var @this = Unsafe.As<CCitadel_Ability_BaseHeldItem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bebop_LaserBeam":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bebop_LaserBeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bebop_LaserBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bebop_LaserBeam);
                var @this = Unsafe.As<CCitadel_Ability_Bebop_LaserBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_BloodBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_BloodBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_BloodBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_BloodBomb);
                var @this = Unsafe.As<CCitadel_Ability_BloodBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bomber_Ability02":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bomber_Ability02>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bomber_Ability02);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bomber_Ability02);
                var @this = Unsafe.As<CCitadel_Ability_Bomber_Ability02>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bomber_Ability03":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bomber_Ability03>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bomber_Ability03);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bomber_Ability03);
                var @this = Unsafe.As<CCitadel_Ability_Bomber_Ability03>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bomber_ULT":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bomber_ULT>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bomber_ULT);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bomber_ULT);
                var @this = Unsafe.As<CCitadel_Ability_Bomber_ULT>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bounce_Pad":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bounce_Pad>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bounce_Pad);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bounce_Pad);
                var @this = Unsafe.As<CCitadel_Ability_Bounce_Pad>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bull_Charge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bull_Charge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bull_Charge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bull_Charge);
                var @this = Unsafe.As<CCitadel_Ability_Bull_Charge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bull_Heal":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bull_Heal>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bull_Heal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bull_Heal);
                var @this = Unsafe.As<CCitadel_Ability_Bull_Heal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Bull_Leap":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Bull_Leap>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Bull_Leap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Bull_Leap);
                var @this = Unsafe.As<CCitadel_Ability_Bull_Leap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_BulletFlurry":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_BulletFlurry>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_BulletFlurry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_BulletFlurry);
                var @this = Unsafe.As<CCitadel_Ability_BulletFlurry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Burrow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Burrow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Burrow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Burrow);
                var @this = Unsafe.As<CCitadel_Ability_Burrow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Cadence_Anthem":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Cadence_Anthem>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Cadence_Anthem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Cadence_Anthem);
                var @this = Unsafe.As<CCitadel_Ability_Cadence_Anthem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Cadence_Crescendo":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Cadence_Crescendo>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Cadence_Crescendo);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Cadence_Crescendo);
                var @this = Unsafe.As<CCitadel_Ability_Cadence_Crescendo>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Cadence_GrandFinale":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Cadence_GrandFinale>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Cadence_GrandFinale);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Cadence_GrandFinale);
                var @this = Unsafe.As<CCitadel_Ability_Cadence_GrandFinale>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Cadence_Lullaby":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Cadence_Lullaby>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Cadence_Lullaby);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Cadence_Lullaby);
                var @this = Unsafe.As<CCitadel_Ability_Cadence_Lullaby>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Cadence_SilenceContraptions":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Cadence_SilenceContraptions>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Cadence_SilenceContraptions);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Cadence_SilenceContraptions);
                var @this = Unsafe.As<CCitadel_Ability_Cadence_SilenceContraptions>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_CardToss":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_CardToss>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_CardToss);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_CardToss);
                var @this = Unsafe.As<CCitadel_Ability_CardToss>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Charged_Bomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Charged_Bomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Charged_Bomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Charged_Bomb);
                var @this = Unsafe.As<CCitadel_Ability_Charged_Bomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ChargedShot":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ChargedShot>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ChargedShot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ChargedShot);
                var @this = Unsafe.As<CCitadel_Ability_ChargedShot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ChargedTackle":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ChargedTackle>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ChargedTackle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ChargedTackle);
                var @this = Unsafe.As<CCitadel_Ability_ChargedTackle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Chrono_KineticCarbine":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Chrono_KineticCarbine>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Chrono_KineticCarbine);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Chrono_KineticCarbine);
                var @this = Unsafe.As<CCitadel_Ability_Chrono_KineticCarbine>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Chrono_PulseGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Chrono_PulseGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Chrono_PulseGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Chrono_PulseGrenade);
                var @this = Unsafe.As<CCitadel_Ability_Chrono_PulseGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Chrono_TimeWall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Chrono_TimeWall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Chrono_TimeWall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Chrono_TimeWall);
                var @this = Unsafe.As<CCitadel_Ability_Chrono_TimeWall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ChronoSwap":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ChronoSwap>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ChronoSwap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ChronoSwap);
                var @this = Unsafe.As<CCitadel_Ability_ChronoSwap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Climb_Rope":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Climb_Rope>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Climb_Rope);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Climb_Rope);
                var @this = Unsafe.As<CCitadel_Ability_Climb_Rope>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Crackshot":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Crackshot>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Crackshot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Crackshot);
                var @this = Unsafe.As<CCitadel_Ability_Crackshot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_CrowdControl":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_CrowdControl>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_CrowdControl);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_CrowdControl);
                var @this = Unsafe.As<CCitadel_Ability_CrowdControl>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Dash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Dash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Dash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Dash);
                var @this = Unsafe.As<CCitadel_Ability_Dash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_DeathTax":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_DeathTax>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_DeathTax);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_DeathTax);
                var @this = Unsafe.As<CCitadel_Ability_DeathTax>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Disruptive_Charge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Disruptive_Charge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Disruptive_Charge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Disruptive_Charge);
                var @this = Unsafe.As<CCitadel_Ability_Disruptive_Charge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Dust_Storm":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Dust_Storm>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Dust_Storm);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Dust_Storm);
                var @this = Unsafe.As<CCitadel_Ability_Dust_Storm>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Empty":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Empty>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Empty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Empty);
                var @this = Unsafe.As<CCitadel_Ability_Empty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ExplosiveBarrel":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ExplosiveBarrel>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ExplosiveBarrel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ExplosiveBarrel);
                var @this = Unsafe.As<CCitadel_Ability_ExplosiveBarrel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Fathom_Breach":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Fathom_Breach>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Fathom_Breach);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Fathom_Breach);
                var @this = Unsafe.As<CCitadel_Ability_Fathom_Breach>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Fathom_ScaldingSpray":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Fathom_ScaldingSpray>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Fathom_ScaldingSpray);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Fathom_ScaldingSpray);
                var @this = Unsafe.As<CCitadel_Ability_Fathom_ScaldingSpray>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Fealty":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Fealty>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Fealty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Fealty);
                var @this = Unsafe.As<CCitadel_Ability_Fealty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_FireBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_FireBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_FireBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_FireBomb);
                var @this = Unsafe.As<CCitadel_Ability_FireBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_FissureWall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_FissureWall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_FissureWall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_FissureWall);
                var @this = Unsafe.As<CCitadel_Ability_FissureWall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_FlameDash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_FlameDash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_FlameDash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_FlameDash);
                var @this = Unsafe.As<CCitadel_Ability_FlameDash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_FlyingStrike":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_FlyingStrike>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_FlyingStrike);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_FlyingStrike);
                var @this = Unsafe.As<CCitadel_Ability_FlyingStrike>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GangActivity":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GangActivity>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GangActivity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GangActivity);
                var @this = Unsafe.As<CCitadel_Ability_GangActivity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GangActivity_Cancel":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GangActivity_Cancel>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GangActivity_Cancel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GangActivity_Cancel);
                var @this = Unsafe.As<CCitadel_Ability_GangActivity_Cancel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GenericPerson_1":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GenericPerson_1>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GenericPerson_1);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GenericPerson_1);
                var @this = Unsafe.As<CCitadel_Ability_GenericPerson_1>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GenericPerson_2":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GenericPerson_2>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GenericPerson_2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GenericPerson_2);
                var @this = Unsafe.As<CCitadel_Ability_GenericPerson_2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GenericPerson_3":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GenericPerson_3>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GenericPerson_3);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GenericPerson_3);
                var @this = Unsafe.As<CCitadel_Ability_GenericPerson_3>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GenericPerson_4":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GenericPerson_4>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GenericPerson_4);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GenericPerson_4);
                var @this = Unsafe.As<CCitadel_Ability_GenericPerson_4>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Ghost_BloodShards":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Ghost_BloodShards>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Ghost_BloodShards);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Ghost_BloodShards);
                var @this = Unsafe.As<CCitadel_Ability_Ghost_BloodShards>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GoldenIdol":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GoldenIdol>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GoldenIdol);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GoldenIdol);
                var @this = Unsafe.As<CCitadel_Ability_GoldenIdol>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GooBowlingBall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GooBowlingBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GooBowlingBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GooBowlingBall);
                var @this = Unsafe.As<CCitadel_Ability_GooBowlingBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GooGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GooGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GooGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GooGrenade);
                var @this = Unsafe.As<CCitadel_Ability_GooGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Gravity_Lasso":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Gravity_Lasso>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Gravity_Lasso);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Gravity_Lasso);
                var @this = Unsafe.As<CCitadel_Ability_Gravity_Lasso>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_GuidedArrow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_GuidedArrow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_GuidedArrow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_GuidedArrow);
                var @this = Unsafe.As<CCitadel_Ability_GuidedArrow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HatTrick":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HatTrick>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HatTrick);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HatTrick);
                var @this = Unsafe.As<CCitadel_Ability_HatTrick>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Haze_StackingDamage":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Haze_StackingDamage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Haze_StackingDamage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Haze_StackingDamage);
                var @this = Unsafe.As<CCitadel_Ability_Haze_StackingDamage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HealingSlash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HealingSlash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HealingSlash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HealingSlash);
                var @this = Unsafe.As<CCitadel_Ability_HealingSlash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HealthSwap":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HealthSwap>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HealthSwap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HealthSwap);
                var @this = Unsafe.As<CCitadel_Ability_HealthSwap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HighAlert":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HighAlert>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HighAlert);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HighAlert);
                var @this = Unsafe.As<CCitadel_Ability_HighAlert>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HoldMelee":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HoldMelee>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HoldMelee);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HoldMelee);
                var @this = Unsafe.As<CCitadel_Ability_HoldMelee>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Hook":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Hook>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Hook);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Hook);
                var @this = Unsafe.As<CCitadel_Ability_Hook>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Hornet_Chain":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Hornet_Chain>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Hornet_Chain);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Hornet_Chain);
                var @this = Unsafe.As<CCitadel_Ability_Hornet_Chain>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Hornet_Snipe":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Hornet_Snipe>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Hornet_Snipe);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Hornet_Snipe);
                var @this = Unsafe.As<CCitadel_Ability_Hornet_Snipe>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HornetLeap":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HornetLeap>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HornetLeap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HornetLeap);
                var @this = Unsafe.As<CCitadel_Ability_HornetLeap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HornetMark":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HornetMark>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HornetMark);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HornetMark);
                var @this = Unsafe.As<CCitadel_Ability_HornetMark>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_HornetSting":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_HornetSting>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_HornetSting);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_HornetSting);
                var @this = Unsafe.As<CCitadel_Ability_HornetSting>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_IceBeam":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_IceBeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_IceBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_IceBeam);
                var @this = Unsafe.As<CCitadel_Ability_IceBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_IceDome":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_IceDome>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_IceDome);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_IceDome);
                var @this = Unsafe.As<CCitadel_Ability_IceDome>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_IceGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_IceGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_IceGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_IceGrenade);
                var @this = Unsafe.As<CCitadel_Ability_IceGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_IcePath":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_IcePath>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_IcePath);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_IcePath);
                var @this = Unsafe.As<CCitadel_Ability_IcePath>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ImmobilizeTrap":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ImmobilizeTrap>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ImmobilizeTrap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ImmobilizeTrap);
                var @this = Unsafe.As<CCitadel_Ability_ImmobilizeTrap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_IncendiaryProjectile":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_IncendiaryProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_IncendiaryProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_IncendiaryProjectile);
                var @this = Unsafe.As<CCitadel_Ability_IncendiaryProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_InfinitySlash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_InfinitySlash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_InfinitySlash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_InfinitySlash);
                var @this = Unsafe.As<CCitadel_Ability_InfinitySlash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Intimidate":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Intimidate>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Intimidate);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Intimidate);
                var @this = Unsafe.As<CCitadel_Ability_Intimidate>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Jump":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Jump>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Jump);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Jump);
                var @this = Unsafe.As<CCitadel_Ability_Jump>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Kobun":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Kobun>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Kobun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Kobun);
                var @this = Unsafe.As<CCitadel_Ability_Kobun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Lash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Lash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Lash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Lash);
                var @this = Unsafe.As<CCitadel_Ability_Lash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Lash_Flog":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Lash_Flog>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Lash_Flog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Lash_Flog);
                var @this = Unsafe.As<CCitadel_Ability_Lash_Flog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Lash_Ultimate":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Lash_Ultimate>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Lash_Ultimate);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Lash_Ultimate);
                var @this = Unsafe.As<CCitadel_Ability_Lash_Ultimate>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_LashDownStrike":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_LashDownStrike>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_LashDownStrike);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_LashDownStrike);
                var @this = Unsafe.As<CCitadel_Ability_LashDownStrike>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_LifeDrain":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_LifeDrain>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_LifeDrain);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_LifeDrain);
                var @this = Unsafe.As<CCitadel_Ability_LifeDrain>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_LightningBall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_LightningBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_LightningBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_LightningBall);
                var @this = Unsafe.As<CCitadel_Ability_LightningBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_LockDown":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_LockDown>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_LockDown);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_LockDown);
                var @this = Unsafe.As<CCitadel_Ability_LockDown>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_MageWalk":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_MageWalk>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_MageWalk);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_MageWalk);
                var @this = Unsafe.As<CCitadel_Ability_MageWalk>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Magician_AnimalCurse":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Magician_AnimalCurse>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Magician_AnimalCurse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Magician_AnimalCurse);
                var @this = Unsafe.As<CCitadel_Ability_Magician_AnimalCurse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Magician_MagicBolt":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Magician_MagicBolt>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Magician_MagicBolt);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Magician_MagicBolt);
                var @this = Unsafe.As<CCitadel_Ability_Magician_MagicBolt>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Magician_ShadowClone":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Magician_ShadowClone>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Magician_ShadowClone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Magician_ShadowClone);
                var @this = Unsafe.As<CCitadel_Ability_Magician_ShadowClone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Mantle":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Mantle>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Mantle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Mantle);
                var @this = Unsafe.As<CCitadel_Ability_Mantle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_MedicHeal":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_MedicHeal>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_MedicHeal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_MedicHeal);
                var @this = Unsafe.As<CCitadel_Ability_MedicHeal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Melee_Base":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Melee_Base>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Melee_Base);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Melee_Base);
                var @this = Unsafe.As<CCitadel_Ability_Melee_Base>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_MeleeParry":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_MeleeParry>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_MeleeParry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_MeleeParry);
                var @this = Unsafe.As<CCitadel_Ability_MeleeParry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Mirage_FireBeetles":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Mirage_FireBeetles>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Mirage_FireBeetles);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Mirage_FireBeetles);
                var @this = Unsafe.As<CCitadel_Ability_Mirage_FireBeetles>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Mirage_Teleport":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Mirage_Teleport>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Mirage_Teleport);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Mirage_Teleport);
                var @this = Unsafe.As<CCitadel_Ability_Mirage_Teleport>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_MobileResupply":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_MobileResupply>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_MobileResupply);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_MobileResupply);
                var @this = Unsafe.As<CCitadel_Ability_MobileResupply>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Nano_Pounce":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Nano_Pounce>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Nano_Pounce);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Nano_Pounce);
                var @this = Unsafe.As<CCitadel_Ability_Nano_Pounce>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Nano_Pounce_Instant":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Nano_Pounce_Instant>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Nano_Pounce_Instant);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Nano_Pounce_Instant);
                var @this = Unsafe.As<CCitadel_Ability_Nano_Pounce_Instant>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Nano_Shadow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Nano_Shadow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Nano_Shadow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Nano_Shadow);
                var @this = Unsafe.As<CCitadel_Ability_Nano_Shadow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Nikuman":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Nikuman>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Nikuman);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Nikuman);
                var @this = Unsafe.As<CCitadel_Ability_Nikuman>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PassiveBeefy":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PassiveBeefy>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PassiveBeefy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PassiveBeefy);
                var @this = Unsafe.As<CCitadel_Ability_PassiveBeefy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Perched_Predator":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Perched_Predator>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Perched_Predator);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Perched_Predator);
                var @this = Unsafe.As<CCitadel_Ability_Perched_Predator>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PoisonBullets":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PoisonBullets>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PoisonBullets);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PoisonBullets);
                var @this = Unsafe.As<CCitadel_Ability_PoisonBullets>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PowerJump":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PowerJump>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PowerJump);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PowerJump);
                var @this = Unsafe.As<CCitadel_Ability_PowerJump>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PowerSlash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PowerSlash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PowerSlash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PowerSlash);
                var @this = Unsafe.As<CCitadel_Ability_PowerSlash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PowerSurge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PowerSurge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PowerSurge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PowerSurge);
                var @this = Unsafe.As<CCitadel_Ability_PowerSurge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PrimaryWeapon":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PrimaryWeapon>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PrimaryWeapon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PrimaryWeapon);
                var @this = Unsafe.As<CCitadel_Ability_PrimaryWeapon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PrimaryWeapon_BeamWeapon":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PrimaryWeapon_BeamWeapon>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PrimaryWeapon_BeamWeapon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PrimaryWeapon_BeamWeapon);
                var @this = Unsafe.As<CCitadel_Ability_PrimaryWeapon_BeamWeapon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PrimaryWeapon_Bebop":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PrimaryWeapon_Bebop>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PrimaryWeapon_Bebop);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PrimaryWeapon_Bebop);
                var @this = Unsafe.As<CCitadel_Ability_PrimaryWeapon_Bebop>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PrimaryWeapon_Cadence":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PrimaryWeapon_Cadence>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PrimaryWeapon_Cadence);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PrimaryWeapon_Cadence);
                var @this = Unsafe.As<CCitadel_Ability_PrimaryWeapon_Cadence>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PrimaryWeapon_Empty":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PrimaryWeapon_Empty>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PrimaryWeapon_Empty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PrimaryWeapon_Empty);
                var @this = Unsafe.As<CCitadel_Ability_PrimaryWeapon_Empty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ProjectMind":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ProjectMind>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ProjectMind);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ProjectMind);
                var @this = Unsafe.As<CCitadel_Ability_ProjectMind>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Protection_Racket":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Protection_Racket>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Protection_Racket);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Protection_Racket);
                var @this = Unsafe.As<CCitadel_Ability_Protection_Racket>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ProximityRitual":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ProximityRitual>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ProximityRitual);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ProximityRitual);
                var @this = Unsafe.As<CCitadel_Ability_ProximityRitual>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PsychicDagger":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PsychicDagger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PsychicDagger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PsychicDagger);
                var @this = Unsafe.As<CCitadel_Ability_PsychicDagger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PsychicLift":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PsychicLift>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PsychicLift);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PsychicLift);
                var @this = Unsafe.As<CCitadel_Ability_PsychicLift>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_PsychicPulse":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_PsychicPulse>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_PsychicPulse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_PsychicPulse);
                var @this = Unsafe.As<CCitadel_Ability_PsychicPulse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Puddle":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Puddle>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Puddle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Puddle);
                var @this = Unsafe.As<CCitadel_Ability_Puddle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_RapidFire":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_RapidFire>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_RapidFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_RapidFire);
                var @this = Unsafe.As<CCitadel_Ability_RapidFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_RestorativeGoo":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_RestorativeGoo>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_RestorativeGoo);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_RestorativeGoo);
                var @this = Unsafe.As<CCitadel_Ability_RestorativeGoo>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_RiotProtocol":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_RiotProtocol>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_RiotProtocol);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_RiotProtocol);
                var @this = Unsafe.As<CCitadel_Ability_RiotProtocol>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_RocketBarrage":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_RocketBarrage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_RocketBarrage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_RocketBarrage);
                var @this = Unsafe.As<CCitadel_Ability_RocketBarrage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_RocketLauncher":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_RocketLauncher>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_RocketLauncher);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_RocketLauncher);
                var @this = Unsafe.As<CCitadel_Ability_RocketLauncher>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Rolling_FireBall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Rolling_FireBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Rolling_FireBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Rolling_FireBall);
                var @this = Unsafe.As<CCitadel_Ability_Rolling_FireBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Running_Decoy":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Running_Decoy>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Running_Decoy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Running_Decoy);
                var @this = Unsafe.As<CCitadel_Ability_Running_Decoy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Rutger_Pulse":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Rutger_Pulse>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Rutger_Pulse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Rutger_Pulse);
                var @this = Unsafe.As<CCitadel_Ability_Rutger_Pulse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SelfVacuum":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SelfVacuum>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SelfVacuum);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SelfVacuum);
                var @this = Unsafe.As<CCitadel_Ability_SelfVacuum>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SettingSun":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SettingSun>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SettingSun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SettingSun);
                var @this = Unsafe.As<CCitadel_Ability_SettingSun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shakedown_Target":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shakedown_Target>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shakedown_Target);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shakedown_Target);
                var @this = Unsafe.As<CCitadel_Ability_Shakedown_Target>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shield":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shield);
                var @this = Unsafe.As<CCitadel_Ability_Shield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShieldedSentry":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShieldedSentry>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShieldedSentry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShieldedSentry);
                var @this = Unsafe.As<CCitadel_Ability_ShieldedSentry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShieldGuy_Ability01":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShieldGuy_Ability01>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShieldGuy_Ability01);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShieldGuy_Ability01);
                var @this = Unsafe.As<CCitadel_Ability_ShieldGuy_Ability01>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShieldGuy_Ability02":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShieldGuy_Ability02>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShieldGuy_Ability02);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShieldGuy_Ability02);
                var @this = Unsafe.As<CCitadel_Ability_ShieldGuy_Ability02>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShieldGuy_Ability03":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShieldGuy_Ability03>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShieldGuy_Ability03);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShieldGuy_Ability03);
                var @this = Unsafe.As<CCitadel_Ability_ShieldGuy_Ability03>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShieldGuy_Ability04":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShieldGuy_Ability04>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShieldGuy_Ability04);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShieldGuy_Ability04);
                var @this = Unsafe.As<CCitadel_Ability_ShieldGuy_Ability04>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shiv_Defer_Damage":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shiv_Defer_Damage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shiv_Defer_Damage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shiv_Defer_Damage);
                var @this = Unsafe.As<CCitadel_Ability_Shiv_Defer_Damage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shiv_KillingBlow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shiv_KillingBlow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shiv_KillingBlow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shiv_KillingBlow);
                var @this = Unsafe.As<CCitadel_Ability_Shiv_KillingBlow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShivDagger":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShivDagger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShivDagger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShivDagger);
                var @this = Unsafe.As<CCitadel_Ability_ShivDagger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShivDash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShivDash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShivDash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShivDash);
                var @this = Unsafe.As<CCitadel_Ability_ShivDash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ShivWeapon":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ShivWeapon>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ShivWeapon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ShivWeapon);
                var @this = Unsafe.As<CCitadel_Ability_ShivWeapon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shotgun_Astro":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shotgun_Astro>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shotgun_Astro);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shotgun_Astro);
                var @this = Unsafe.As<CCitadel_Ability_Shotgun_Astro>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Shotgun_Astro_Backwards":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Shotgun_Astro_Backwards>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Shotgun_Astro_Backwards);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Shotgun_Astro_Backwards);
                var @this = Unsafe.As<CCitadel_Ability_Shotgun_Astro_Backwards>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SleepBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SleepBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SleepBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SleepBomb);
                var @this = Unsafe.As<CCitadel_Ability_SleepBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SleepDagger":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SleepDagger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SleepDagger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SleepDagger);
                var @this = Unsafe.As<CCitadel_Ability_SleepDagger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Slide":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Slide>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Slide);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Slide);
                var @this = Unsafe.As<CCitadel_Ability_Slide>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SmokeBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SmokeBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SmokeBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SmokeBomb);
                var @this = Unsafe.As<CCitadel_Ability_SmokeBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SnakeDash":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SnakeDash>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SnakeDash);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SnakeDash);
                var @this = Unsafe.As<CCitadel_Ability_SnakeDash>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Spinning_Blade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Spinning_Blade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Spinning_Blade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Spinning_Blade);
                var @this = Unsafe.As<CCitadel_Ability_Spinning_Blade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Sprint":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Sprint>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Sprint);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Sprint);
                var @this = Unsafe.As<CCitadel_Ability_Sprint>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_StaticCharge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_StaticCharge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_StaticCharge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_StaticCharge);
                var @this = Unsafe.As<CCitadel_Ability_StaticCharge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_StickyBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_StickyBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_StickyBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_StickyBomb);
                var @this = Unsafe.As<CCitadel_Ability_StickyBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Stomp":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Stomp>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Stomp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Stomp);
                var @this = Unsafe.As<CCitadel_Ability_Stomp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_StormCloud":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_StormCloud>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_StormCloud);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_StormCloud);
                var @this = Unsafe.As<CCitadel_Ability_StormCloud>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SummonGangster":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SummonGangster>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SummonGangster);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SummonGangster);
                var @this = Unsafe.As<CCitadel_Ability_SummonGangster>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SuperNeutralCharge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SuperNeutralCharge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SuperNeutralCharge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SuperNeutralCharge);
                var @this = Unsafe.As<CCitadel_Ability_SuperNeutralCharge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SuperNeutralIncendiary":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SuperNeutralIncendiary>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SuperNeutralIncendiary);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SuperNeutralIncendiary);
                var @this = Unsafe.As<CCitadel_Ability_SuperNeutralIncendiary>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_SuperNeutralShield":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_SuperNeutralShield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_SuperNeutralShield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_SuperNeutralShield);
                var @this = Unsafe.As<CCitadel_Ability_SuperNeutralShield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TangoTether":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TangoTether>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TangoTether);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TangoTether);
                var @this = Unsafe.As<CCitadel_Ability_TangoTether>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TangoTether_Trigger":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TangoTether_Trigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TangoTether_Trigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TangoTether_Trigger);
                var @this = Unsafe.As<CCitadel_Ability_TangoTether_Trigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Targetdummy_1":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Targetdummy_1>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Targetdummy_1);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Targetdummy_1);
                var @this = Unsafe.As<CCitadel_Ability_Targetdummy_1>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Targetdummy_2":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Targetdummy_2>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Targetdummy_2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Targetdummy_2);
                var @this = Unsafe.As<CCitadel_Ability_Targetdummy_2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Targetdummy_3":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Targetdummy_3>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Targetdummy_3);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Targetdummy_3);
                var @this = Unsafe.As<CCitadel_Ability_Targetdummy_3>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Targetdummy_4":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Targetdummy_4>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Targetdummy_4);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Targetdummy_4);
                var @this = Unsafe.As<CCitadel_Ability_Targetdummy_4>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Targetdummy_Inherent":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Targetdummy_Inherent>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Targetdummy_Inherent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Targetdummy_Inherent);
                var @this = Unsafe.As<CCitadel_Ability_Targetdummy_Inherent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TargetPractice":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TargetPractice>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TargetPractice);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TargetPractice);
                var @this = Unsafe.As<CCitadel_Ability_TargetPractice>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Teleport":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Teleport>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Teleport);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Teleport);
                var @this = Unsafe.As<CCitadel_Ability_Teleport>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TeleportToGangster":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TeleportToGangster>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TeleportToGangster);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TeleportToGangster);
                var @this = Unsafe.As<CCitadel_Ability_TeleportToGangster>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tenacity":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tenacity>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tenacity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tenacity);
                var @this = Unsafe.As<CCitadel_Ability_Tenacity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tengu_AirLift":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tengu_AirLift>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tengu_AirLift);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tengu_AirLift);
                var @this = Unsafe.As<CCitadel_Ability_Tengu_AirLift>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tengu_StoneForm":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tengu_StoneForm>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tengu_StoneForm);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tengu_StoneForm);
                var @this = Unsafe.As<CCitadel_Ability_Tengu_StoneForm>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tengu_Urn":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tengu_Urn>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tengu_Urn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tengu_Urn);
                var @this = Unsafe.As<CCitadel_Ability_Tengu_Urn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ThrowSand":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ThrowSand>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ThrowSand);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ThrowSand);
                var @this = Unsafe.As<CCitadel_Ability_ThrowSand>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Thumper_1":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Thumper_1>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Thumper_1);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Thumper_1);
                var @this = Unsafe.As<CCitadel_Ability_Thumper_1>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Thumper_2":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Thumper_2>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Thumper_2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Thumper_2);
                var @this = Unsafe.As<CCitadel_Ability_Thumper_2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Thumper_3":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Thumper_3>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Thumper_3);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Thumper_3);
                var @this = Unsafe.As<CCitadel_Ability_Thumper_3>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Thumper_4":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Thumper_4>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Thumper_4);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Thumper_4);
                var @this = Unsafe.As<CCitadel_Ability_Thumper_4>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tier2Boss_LaserBeam":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tier2Boss_LaserBeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tier2Boss_LaserBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tier2Boss_LaserBeam);
                var @this = Unsafe.As<CCitadel_Ability_Tier2Boss_LaserBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tier2Boss_RocketBarrage":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tier2Boss_RocketBarrage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tier2Boss_RocketBarrage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tier2Boss_RocketBarrage);
                var @this = Unsafe.As<CCitadel_Ability_Tier2Boss_RocketBarrage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tier2Boss_Stomp":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tier2Boss_Stomp>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tier2Boss_Stomp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tier2Boss_Stomp);
                var @this = Unsafe.As<CCitadel_Ability_Tier2Boss_Stomp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tier3Boss_DamagePulse":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tier3Boss_DamagePulse>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tier3Boss_DamagePulse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tier3Boss_DamagePulse);
                var @this = Unsafe.As<CCitadel_Ability_Tier3Boss_DamagePulse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tier3Boss_LaserBeam":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tier3Boss_LaserBeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tier3Boss_LaserBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tier3Boss_LaserBeam);
                var @this = Unsafe.As<CCitadel_Ability_Tier3Boss_LaserBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_Breach":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_Breach>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_Breach);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_Breach);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_Breach>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_CrimsonCannon":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_CrimsonCannon>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_CrimsonCannon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_CrimsonCannon);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_CrimsonCannon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_DyingStar":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_DyingStar>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_DyingStar);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_DyingStar);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_DyingStar>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_HeatSinks":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_HeatSinks>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_HeatSinks);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_HeatSinks);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_HeatSinks>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_HeatSinks_Inherent":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_HeatSinks_Inherent>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_HeatSinks_Inherent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_HeatSinks_Inherent);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_HeatSinks_Inherent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_HotShot":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_HotShot>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_HotShot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_HotShot);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_HotShot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Tokamak_Radiance":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Tokamak_Radiance>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Tokamak_Radiance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Tokamak_Radiance);
                var @this = Unsafe.As<CCitadel_Ability_Tokamak_Radiance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Trappers_Bolo":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Trappers_Bolo>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Trappers_Bolo);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Trappers_Bolo);
                var @this = Unsafe.As<CCitadel_Ability_Trappers_Bolo>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TriggerTower":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TriggerTower>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TriggerTower);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TriggerTower);
                var @this = Unsafe.As<CCitadel_Ability_TriggerTower>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TrooperBossGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TrooperBossGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TrooperBossGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TrooperBossGrenade);
                var @this = Unsafe.As<CCitadel_Ability_TrooperBossGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TrooperGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TrooperGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TrooperGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TrooperGrenade);
                var @this = Unsafe.As<CCitadel_Ability_TrooperGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TrooperNeutralGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TrooperNeutralGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TrooperNeutralGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TrooperNeutralGrenade);
                var @this = Unsafe.As<CCitadel_Ability_TrooperNeutralGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TrooperZipLine":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TrooperZipLine>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TrooperZipLine);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TrooperZipLine);
                var @this = Unsafe.As<CCitadel_Ability_TrooperZipLine>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_TurretClone":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_TurretClone>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_TurretClone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_TurretClone);
                var @this = Unsafe.As<CCitadel_Ability_TurretClone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_UltCombo":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_UltCombo>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_UltCombo);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_UltCombo);
                var @this = Unsafe.As<CCitadel_Ability_UltCombo>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Uppercut":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Uppercut>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Uppercut);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Uppercut);
                var @this = Unsafe.As<CCitadel_Ability_Uppercut>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Vandal_Ability03":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Vandal_Ability03>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Vandal_Ability03);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Vandal_Ability03);
                var @this = Unsafe.As<CCitadel_Ability_Vandal_Ability03>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Vandal_Pillar":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Vandal_Pillar>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Vandal_Pillar);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Vandal_Pillar);
                var @this = Unsafe.As<CCitadel_Ability_Vandal_Pillar>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_VandalOverflow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_VandalOverflow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_VandalOverflow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_VandalOverflow);
                var @this = Unsafe.As<CCitadel_Ability_VandalOverflow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_VandalSurge":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_VandalSurge>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_VandalSurge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_VandalSurge);
                var @this = Unsafe.As<CCitadel_Ability_VandalSurge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Viper_Ability04":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Viper_Ability04>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Viper_Ability04);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Viper_Ability04);
                var @this = Unsafe.As<CCitadel_Ability_Viper_Ability04>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Viper_DebuffDagger":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Viper_DebuffDagger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Viper_DebuffDagger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Viper_DebuffDagger);
                var @this = Unsafe.As<CCitadel_Ability_Viper_DebuffDagger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ViperHookblade":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ViperHookblade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ViperHookblade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ViperHookblade);
                var @this = Unsafe.As<CCitadel_Ability_ViperHookblade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ViperVenom":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ViperVenom>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ViperVenom);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ViperVenom);
                var @this = Unsafe.As<CCitadel_Ability_ViperVenom>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Viscous_Telepunch":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Viscous_Telepunch>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Viscous_Telepunch);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Viscous_Telepunch);
                var @this = Unsafe.As<CCitadel_Ability_Viscous_Telepunch>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ViscousWeapon_Alt":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ViscousWeapon_Alt>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ViscousWeapon_Alt);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ViscousWeapon_Alt);
                var @this = Unsafe.As<CCitadel_Ability_ViscousWeapon_Alt>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_VoidSphere":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_VoidSphere>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_VoidSphere);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_VoidSphere);
                var @this = Unsafe.As<CCitadel_Ability_VoidSphere>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Weapon_BossTier2":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Weapon_BossTier2>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Weapon_BossTier2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Weapon_BossTier2);
                var @this = Unsafe.As<CCitadel_Ability_Weapon_BossTier2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Weapon_BossTier3":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Weapon_BossTier3>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Weapon_BossTier3);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Weapon_BossTier3);
                var @this = Unsafe.As<CCitadel_Ability_Weapon_BossTier3>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_WingBlast":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_WingBlast>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_WingBlast);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_WingBlast);
                var @this = Unsafe.As<CCitadel_Ability_WingBlast>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Wraith_RapidFire":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Wraith_RapidFire>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Wraith_RapidFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Wraith_RapidFire);
                var @this = Unsafe.As<CCitadel_Ability_Wraith_RapidFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Wrecker_Salvage":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Wrecker_Salvage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Wrecker_Salvage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Wrecker_Salvage);
                var @this = Unsafe.As<CCitadel_Ability_Wrecker_Salvage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Wrecker_Ultimate":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Wrecker_Ultimate>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Wrecker_Ultimate);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Wrecker_Ultimate);
                var @this = Unsafe.As<CCitadel_Ability_Wrecker_Ultimate>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_WreckerScrapBlast":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_WreckerScrapBlast>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_WreckerScrapBlast);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_WreckerScrapBlast);
                var @this = Unsafe.As<CCitadel_Ability_WreckerScrapBlast>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_WreckerTeleport":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_WreckerTeleport>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_WreckerTeleport);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_WreckerTeleport);
                var @this = Unsafe.As<CCitadel_Ability_WreckerTeleport>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_WreckingBall":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_WreckingBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_WreckingBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_WreckingBall);
                var @this = Unsafe.As<CCitadel_Ability_WreckingBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_WreckingBallThrow":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_WreckingBallThrow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_WreckingBallThrow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_WreckingBallThrow);
                var @this = Unsafe.As<CCitadel_Ability_WreckingBallThrow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_Yakuza_Shakedown":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_Yakuza_Shakedown>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_Yakuza_Shakedown);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_Yakuza_Shakedown);
                var @this = Unsafe.As<CCitadel_Ability_Yakuza_Shakedown>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ZipLine":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ZipLine>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ZipLine);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ZipLine);
                var @this = Unsafe.As<CCitadel_Ability_ZipLine>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ability_ZipLine_Boost":
        {
            var innerDecoder = GetDecoder<CCitadel_Ability_ZipLine_Boost>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ability_ZipLine_Boost);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ability_ZipLine_Boost);
                var @this = Unsafe.As<CCitadel_Ability_ZipLine_Boost>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_AbilityLifeSteal":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_AbilityLifeSteal>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_AbilityLifeSteal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_AbilityLifeSteal);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_AbilityLifeSteal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_AblativeCoat":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_AblativeCoat>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_AblativeCoat);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_AblativeCoat);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_AblativeCoat>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_ActiveBulletShield":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_ActiveBulletShield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_ActiveBulletShield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_ActiveBulletShield);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_ActiveBulletShield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_BulletArmorReductionAura":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_BulletArmorReductionAura>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_BulletArmorReductionAura);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_BulletArmorReductionAura);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_BulletArmorReductionAura>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_CloakingDevice":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_CloakingDevice>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_CloakingDevice);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_CloakingDevice);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_CloakingDevice>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_CloakingDeviceActive":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_CloakingDeviceActive>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_CloakingDeviceActive);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_CloakingDeviceActive);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_CloakingDeviceActive>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_Colossus":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_Colossus>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_Colossus);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_Colossus);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_Colossus>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_DamageRecycler":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_DamageRecycler>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_DamageRecycler);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_DamageRecycler);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_DamageRecycler>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_DebuffReducer":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_DebuffReducer>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_DebuffReducer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_DebuffReducer);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_DebuffReducer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_DoubleJump":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_DoubleJump>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_DoubleJump);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_DoubleJump);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_DoubleJump>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_Frenzy":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_Frenzy>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_Frenzy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_Frenzy);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_Frenzy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_HealOnLevel":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_HealOnLevel>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_HealOnLevel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_HealOnLevel);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_HealOnLevel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_HighImpactArmor":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_HighImpactArmor>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_HighImpactArmor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_HighImpactArmor);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_HighImpactArmor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_MetalSkin":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_MetalSkin>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_MetalSkin);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_MetalSkin);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_MetalSkin>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_PersonalRejuvenator":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_PersonalRejuvenator>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_PersonalRejuvenator);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_PersonalRejuvenator);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_PersonalRejuvenator>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_RegeneratingBulletShield":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_RegeneratingBulletShield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_RegeneratingBulletShield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_RegeneratingBulletShield);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_RegeneratingBulletShield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_RegenerativeArmor":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_RegenerativeArmor>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_RegenerativeArmor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_RegenerativeArmor);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_RegenerativeArmor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_ReturnFire":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_ReturnFire>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_ReturnFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_ReturnFire);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_ReturnFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_SlowImmunity":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_SlowImmunity>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_SlowImmunity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_SlowImmunity);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_SlowImmunity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_SpellShield":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_SpellShield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_SpellShield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_SpellShield);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_SpellShield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_Stimpak":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_Stimpak>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_Stimpak);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_Stimpak);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_Stimpak>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_ArmorUpgrade_VexBarrier":
        {
            var innerDecoder = GetDecoder<CCitadel_ArmorUpgrade_VexBarrier>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_ArmorUpgrade_VexBarrier);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_ArmorUpgrade_VexBarrier);
                var @this = Unsafe.As<CCitadel_ArmorUpgrade_VexBarrier>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Bounce_Pad":
        {
            var innerDecoder = GetDecoder<CCitadel_Bounce_Pad>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Bounce_Pad);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Bounce_Pad);
                var @this = Unsafe.As<CCitadel_Bounce_Pad>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_BreakableProp":
        {
            var innerDecoder = GetDecoder<CCitadel_BreakableProp>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_BreakableProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_BreakableProp);
                var @this = Unsafe.As<CCitadel_BreakableProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_BreakablePropGoldPickup":
        {
            var innerDecoder = GetDecoder<CCitadel_BreakablePropGoldPickup>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_BreakablePropGoldPickup);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_BreakablePropGoldPickup);
                var @this = Unsafe.As<CCitadel_BreakablePropGoldPickup>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_BreakablePropHealthPickup":
        {
            var innerDecoder = GetDecoder<CCitadel_BreakablePropHealthPickup>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_BreakablePropHealthPickup);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_BreakablePropHealthPickup);
                var @this = Unsafe.As<CCitadel_BreakablePropHealthPickup>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_BreakablePropModifierPickup":
        {
            var innerDecoder = GetDecoder<CCitadel_BreakablePropModifierPickup>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_BreakablePropModifierPickup);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_BreakablePropModifierPickup);
                var @this = Unsafe.As<CCitadel_BreakablePropModifierPickup>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_BreakablePropPickup":
        {
            var innerDecoder = GetDecoder<CCitadel_BreakablePropPickup>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_BreakablePropPickup);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_BreakablePropPickup);
                var @this = Unsafe.As<CCitadel_BreakablePropPickup>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_CatAnimating":
        {
            var innerDecoder = GetDecoder<CCitadel_CatAnimating>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_CatAnimating);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_CatAnimating);
                var @this = Unsafe.As<CCitadel_CatAnimating>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_DeployablePreview":
        {
            var innerDecoder = GetDecoder<CCitadel_DeployablePreview>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_DeployablePreview);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_DeployablePreview);
                var @this = Unsafe.As<CCitadel_DeployablePreview>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Destroyable_Building":
        {
            var innerDecoder = GetDecoder<CCitadel_Destroyable_Building>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Destroyable_Building);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Destroyable_Building);
                var @this = Unsafe.As<CCitadel_Destroyable_Building>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_DynamicProp":
        {
            var innerDecoder = GetDecoder<CCitadel_DynamicProp>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_DynamicProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_DynamicProp);
                var @this = Unsafe.As<CCitadel_DynamicProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_FissureWall":
        {
            var innerDecoder = GetDecoder<CCitadel_FissureWall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_FissureWall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_FissureWall);
                var @this = Unsafe.As<CCitadel_FissureWall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_GrandFinaleStage":
        {
            var innerDecoder = GetDecoder<CCitadel_GrandFinaleStage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_GrandFinaleStage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_GrandFinaleStage);
                var @this = Unsafe.As<CCitadel_GrandFinaleStage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_HeroTestOrbSpawner":
        {
            var innerDecoder = GetDecoder<CCitadel_HeroTestOrbSpawner>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_HeroTestOrbSpawner);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_HeroTestOrbSpawner);
                var @this = Unsafe.As<CCitadel_HeroTestOrbSpawner>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ice_Dome_Blocker":
        {
            var innerDecoder = GetDecoder<CCitadel_Ice_Dome_Blocker>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ice_Dome_Blocker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ice_Dome_Blocker);
                var @this = Unsafe.As<CCitadel_Ice_Dome_Blocker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Ice_Path_Shard_Physics":
        {
            var innerDecoder = GetDecoder<CCitadel_Ice_Path_Shard_Physics>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Ice_Path_Shard_Physics);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Ice_Path_Shard_Physics);
                var @this = Unsafe.As<CCitadel_Ice_Path_Shard_Physics>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item":
        {
            var innerDecoder = GetDecoder<CCitadel_Item>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item);
                var @this = Unsafe.As<CCitadel_Item>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_ActiveReload":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_ActiveReload>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_ActiveReload);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_ActiveReload);
                var @this = Unsafe.As<CCitadel_Item_ActiveReload>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_AOE_Tech_Shield":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_AOE_Tech_Shield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_AOE_Tech_Shield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_AOE_Tech_Shield);
                var @this = Unsafe.As<CCitadel_Item_AOE_Tech_Shield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_AOERoot":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_AOERoot>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_AOERoot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_AOERoot);
                var @this = Unsafe.As<CCitadel_Item_AOERoot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Aura_Base":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Aura_Base>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Aura_Base);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Aura_Base);
                var @this = Unsafe.As<CCitadel_Item_Aura_Base>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_BaseProjectileAOEModifier":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_BaseProjectileAOEModifier>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_BaseProjectileAOEModifier);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_BaseProjectileAOEModifier);
                var @this = Unsafe.As<CCitadel_Item_BaseProjectileAOEModifier>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Bubble":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Bubble>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Bubble);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Bubble);
                var @this = Unsafe.As<CCitadel_Item_Bubble>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Camouflage":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Camouflage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Camouflage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Camouflage);
                var @this = Unsafe.As<CCitadel_Item_Camouflage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Charge_Mastery":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Charge_Mastery>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Charge_Mastery);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Charge_Mastery);
                var @this = Unsafe.As<CCitadel_Item_Charge_Mastery>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_CheatDeath":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_CheatDeath>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_CheatDeath);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_CheatDeath);
                var @this = Unsafe.As<CCitadel_Item_CheatDeath>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_ColdFront":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_ColdFront>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_ColdFront);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_ColdFront);
                var @this = Unsafe.As<CCitadel_Item_ColdFront>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_ComboBreaker":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_ComboBreaker>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_ComboBreaker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_ComboBreaker);
                var @this = Unsafe.As<CCitadel_Item_ComboBreaker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Containment":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Containment>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Containment);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Containment);
                var @this = Unsafe.As<CCitadel_Item_Containment>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Disarm":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Disarm>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Disarm);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Disarm);
                var @this = Unsafe.As<CCitadel_Item_Disarm>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_DivinersKevlar":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_DivinersKevlar>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_DivinersKevlar);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_DivinersKevlar);
                var @this = Unsafe.As<CCitadel_Item_DivinersKevlar>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_DPS_Aura":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_DPS_Aura>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_DPS_Aura);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_DPS_Aura);
                var @this = Unsafe.As<CCitadel_Item_DPS_Aura>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Empty":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Empty>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Empty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Empty);
                var @this = Unsafe.As<CCitadel_Item_Empty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_HealthRegenAura":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_HealthRegenAura>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_HealthRegenAura);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_HealthRegenAura);
                var @this = Unsafe.As<CCitadel_Item_HealthRegenAura>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Intensifying_Clip":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Intensifying_Clip>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Intensifying_Clip);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Intensifying_Clip);
                var @this = Unsafe.As<CCitadel_Item_Intensifying_Clip>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_ModDisruptor":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_ModDisruptor>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_ModDisruptor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_ModDisruptor);
                var @this = Unsafe.As<CCitadel_Item_ModDisruptor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_PhantomStrike":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_PhantomStrike>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_PhantomStrike);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_PhantomStrike);
                var @this = Unsafe.As<CCitadel_Item_PhantomStrike>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_PowerShard":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_PowerShard>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_PowerShard);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_PowerShard);
                var @this = Unsafe.As<CCitadel_Item_PowerShard>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_QuickSilver":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_QuickSilver>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_QuickSilver);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_QuickSilver);
                var @this = Unsafe.As<CCitadel_Item_QuickSilver>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Refresher":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Refresher>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Refresher);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Refresher);
                var @this = Unsafe.As<CCitadel_Item_Refresher>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_RejuvTrackingProjectile":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_RejuvTrackingProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_RejuvTrackingProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_RejuvTrackingProjectile);
                var @this = Unsafe.As<CCitadel_Item_RejuvTrackingProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_RescueBeam":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_RescueBeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_RescueBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_RescueBeam);
                var @this = Unsafe.As<CCitadel_Item_RescueBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Savior":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Savior>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Savior);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Savior);
                var @this = Unsafe.As<CCitadel_Item_Savior>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_SelfBuffModifier":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_SelfBuffModifier>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_SelfBuffModifier);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_SelfBuffModifier);
                var @this = Unsafe.As<CCitadel_Item_SelfBuffModifier>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_SingleTargetStun":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_SingleTargetStun>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_SingleTargetStun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_SingleTargetStun);
                var @this = Unsafe.As<CCitadel_Item_SingleTargetStun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_Stasis_Bomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_Stasis_Bomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_Stasis_Bomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_Stasis_Bomb);
                var @this = Unsafe.As<CCitadel_Item_Stasis_Bomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_TechCleave":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_TechCleave>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_TechCleave);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_TechCleave);
                var @this = Unsafe.As<CCitadel_Item_TechCleave>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_TechDamagePulse":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_TechDamagePulse>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_TechDamagePulse);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_TechDamagePulse);
                var @this = Unsafe.As<CCitadel_Item_TechDamagePulse>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_TrackingProjectileApplyModifier":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_TrackingProjectileApplyModifier>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_TrackingProjectileApplyModifier);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_TrackingProjectileApplyModifier);
                var @this = Unsafe.As<CCitadel_Item_TrackingProjectileApplyModifier>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Item_WarpStone":
        {
            var innerDecoder = GetDecoder<CCitadel_Item_WarpStone>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Item_WarpStone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Item_WarpStone);
                var @this = Unsafe.As<CCitadel_Item_WarpStone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_MobileResupply":
        {
            var innerDecoder = GetDecoder<CCitadel_MobileResupply>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_MobileResupply);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_MobileResupply);
                var @this = Unsafe.As<CCitadel_MobileResupply>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Nano_Predatory_Statue":
        {
            var innerDecoder = GetDecoder<CCitadel_Nano_Predatory_Statue>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Nano_Predatory_Statue);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Nano_Predatory_Statue);
                var @this = Unsafe.As<CCitadel_Nano_Predatory_Statue>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_PestilenceDroneDispenser":
        {
            var innerDecoder = GetDecoder<CCitadel_PestilenceDroneDispenser>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_PestilenceDroneDispenser);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_PestilenceDroneDispenser);
                var @this = Unsafe.As<CCitadel_PestilenceDroneDispenser>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_PickupItemSpawner":
        {
            var innerDecoder = GetDecoder<CCitadel_PickupItemSpawner>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_PickupItemSpawner);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_PickupItemSpawner);
                var @this = Unsafe.As<CCitadel_PickupItemSpawner>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Archer_ChargedShot":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Archer_ChargedShot>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Archer_ChargedShot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Archer_ChargedShot);
                var @this = Unsafe.As<CCitadel_Projectile_Archer_ChargedShot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Bebop_Hook":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Bebop_Hook>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Bebop_Hook);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Bebop_Hook);
                var @this = Unsafe.As<CCitadel_Projectile_Bebop_Hook>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_BloodBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_BloodBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_BloodBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_BloodBomb);
                var @this = Unsafe.As<CCitadel_Projectile_BloodBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Cyclone":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Cyclone>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Cyclone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Cyclone);
                var @this = Unsafe.As<CCitadel_Projectile_Cyclone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_DustStorm":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_DustStorm>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_DustStorm);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_DustStorm);
                var @this = Unsafe.As<CCitadel_Projectile_DustStorm>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Guided_Arrow":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Guided_Arrow>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Guided_Arrow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Guided_Arrow);
                var @this = Unsafe.As<CCitadel_Projectile_Guided_Arrow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_HookBlade":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_HookBlade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_HookBlade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_HookBlade);
                var @this = Unsafe.As<CCitadel_Projectile_HookBlade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Petrify":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Petrify>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Petrify);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Petrify);
                var @this = Unsafe.As<CCitadel_Projectile_Petrify>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Pillar":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Pillar>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Pillar);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Pillar);
                var @this = Unsafe.As<CCitadel_Projectile_Pillar>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_RocketLauncher_Rocket":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_RocketLauncher_Rocket>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_RocketLauncher_Rocket);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_RocketLauncher_Rocket);
                var @this = Unsafe.As<CCitadel_Projectile_RocketLauncher_Rocket>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_SettingSun":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_SettingSun>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_SettingSun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_SettingSun);
                var @this = Unsafe.As<CCitadel_Projectile_SettingSun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Tier2Boss_RocketBarrage":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Tier2Boss_RocketBarrage>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Tier2Boss_RocketBarrage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Tier2Boss_RocketBarrage);
                var @this = Unsafe.As<CCitadel_Projectile_Tier2Boss_RocketBarrage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Viscous_GooGrenade":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Viscous_GooGrenade>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Viscous_GooGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Viscous_GooGrenade);
                var @this = Unsafe.As<CCitadel_Projectile_Viscous_GooGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_Wrecker_Teleport":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_Wrecker_Teleport>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_Wrecker_Teleport);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_Wrecker_Teleport);
                var @this = Unsafe.As<CCitadel_Projectile_Wrecker_Teleport>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Projectile_WreckingBall":
        {
            var innerDecoder = GetDecoder<CCitadel_Projectile_WreckingBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Projectile_WreckingBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Projectile_WreckingBall);
                var @this = Unsafe.As<CCitadel_Projectile_WreckingBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_RestorativeGooCube":
        {
            var innerDecoder = GetDecoder<CCitadel_RestorativeGooCube>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_RestorativeGooCube);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_RestorativeGooCube);
                var @this = Unsafe.As<CCitadel_RestorativeGooCube>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Shield":
        {
            var innerDecoder = GetDecoder<CCitadel_Shield>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Shield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Shield);
                var @this = Unsafe.As<CCitadel_Shield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_TechUpgrade_Infuser":
        {
            var innerDecoder = GetDecoder<CCitadel_TechUpgrade_Infuser>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_TechUpgrade_Infuser);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_TechUpgrade_Infuser);
                var @this = Unsafe.As<CCitadel_TechUpgrade_Infuser>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_TechUpgrade_SuperAcolyteGloves":
        {
            var innerDecoder = GetDecoder<CCitadel_TechUpgrade_SuperAcolyteGloves>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_TechUpgrade_SuperAcolyteGloves);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_TechUpgrade_SuperAcolyteGloves);
                var @this = Unsafe.As<CCitadel_TechUpgrade_SuperAcolyteGloves>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_AerialAssault":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_AerialAssault>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_AerialAssault);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_AerialAssault);
                var @this = Unsafe.As<CCitadel_Upgrade_AerialAssault>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_AmmoScavenger":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_AmmoScavenger>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_AmmoScavenger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_AmmoScavenger);
                var @this = Unsafe.As<CCitadel_Upgrade_AmmoScavenger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_MagicCarpet":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_MagicCarpet>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_MagicCarpet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_MagicCarpet);
                var @this = Unsafe.As<CCitadel_Upgrade_MagicCarpet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_OverdriveClip":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_OverdriveClip>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_OverdriveClip);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_OverdriveClip);
                var @this = Unsafe.As<CCitadel_Upgrade_OverdriveClip>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_StabilizingTripod":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_StabilizingTripod>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_StabilizingTripod);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_StabilizingTripod);
                var @this = Unsafe.As<CCitadel_Upgrade_StabilizingTripod>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_Upgrade_WeaponPowerForHealth":
        {
            var innerDecoder = GetDecoder<CCitadel_Upgrade_WeaponPowerForHealth>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_Upgrade_WeaponPowerForHealth);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_Upgrade_WeaponPowerForHealth);
                var @this = Unsafe.As<CCitadel_Upgrade_WeaponPowerForHealth>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_UtilityUpgrade_AOESmokeBomb":
        {
            var innerDecoder = GetDecoder<CCitadel_UtilityUpgrade_AOESmokeBomb>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_UtilityUpgrade_AOESmokeBomb);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_UtilityUpgrade_AOESmokeBomb);
                var @this = Unsafe.As<CCitadel_UtilityUpgrade_AOESmokeBomb>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_UtilityUpgrade_DebuffImmunity":
        {
            var innerDecoder = GetDecoder<CCitadel_UtilityUpgrade_DebuffImmunity>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_UtilityUpgrade_DebuffImmunity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_UtilityUpgrade_DebuffImmunity);
                var @this = Unsafe.As<CCitadel_UtilityUpgrade_DebuffImmunity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_UtilityUpgrade_HealthNova":
        {
            var innerDecoder = GetDecoder<CCitadel_UtilityUpgrade_HealthNova>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_UtilityUpgrade_HealthNova);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_UtilityUpgrade_HealthNova);
                var @this = Unsafe.As<CCitadel_UtilityUpgrade_HealthNova>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_UtilityUpgrade_RocketBooster":
        {
            var innerDecoder = GetDecoder<CCitadel_UtilityUpgrade_RocketBooster>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_UtilityUpgrade_RocketBooster);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_UtilityUpgrade_RocketBooster);
                var @this = Unsafe.As<CCitadel_UtilityUpgrade_RocketBooster>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_UtilityUpgrade_RocketBoots":
        {
            var innerDecoder = GetDecoder<CCitadel_UtilityUpgrade_RocketBoots>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_UtilityUpgrade_RocketBoots);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_UtilityUpgrade_RocketBoots);
                var @this = Unsafe.As<CCitadel_UtilityUpgrade_RocketBoots>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_BansheeSlugs":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_BansheeSlugs>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_BansheeSlugs);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_BansheeSlugs);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_BansheeSlugs>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_BurstFire":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_BurstFire>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_BurstFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_BurstFire);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_BurstFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_FireRateAura":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_FireRateAura>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_FireRateAura);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_FireRateAura);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_FireRateAura>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_GlassCannon":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_GlassCannon>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_GlassCannon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_GlassCannon);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_GlassCannon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_Headhunter":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_Headhunter>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_Headhunter);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_Headhunter);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_Headhunter>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_HeadshotBooster":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_HeadshotBooster>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_HeadshotBooster);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_HeadshotBooster);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_HeadshotBooster>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_InstantReload":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_InstantReload>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_InstantReload);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_InstantReload);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_InstantReload>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_Ricochet":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_Ricochet>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_Ricochet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_Ricochet);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_Ricochet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_SiphonBullets":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_SiphonBullets>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_SiphonBullets);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_SiphonBullets);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_SiphonBullets>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_SurgingPower":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_SurgingPower>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_SurgingPower);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_SurgingPower);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_SurgingPower>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadel_WeaponUpgrade_WeaponEater":
        {
            var innerDecoder = GetDecoder<CCitadel_WeaponUpgrade_WeaponEater>(new SerializerKey(className, 0));
            classType = typeof(CCitadel_WeaponUpgrade_WeaponEater);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadel_WeaponUpgrade_WeaponEater);
                var @this = Unsafe.As<CCitadel_WeaponUpgrade_WeaponEater>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelAbilityComponent":
        {
            var innerDecoder = GetDecoder<CCitadelAbilityComponent>(new SerializerKey(className, 0));
            classType = typeof(CCitadelAbilityComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelAbilityComponent);
                var @this = Unsafe.As<CCitadelAbilityComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelAnimatingModelEntity":
        {
            var innerDecoder = GetDecoder<CCitadelAnimatingModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CCitadelAnimatingModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelAnimatingModelEntity);
                var @this = Unsafe.As<CCitadelAnimatingModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelAutoScaledTime":
        {
            var innerDecoder = GetDecoder<CCitadelAutoScaledTime>(new SerializerKey(className, 0));
            classType = typeof(CCitadelAutoScaledTime);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelAutoScaledTime);
                var @this = Unsafe.As<CCitadelAutoScaledTime>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseAbility);
                var @this = Unsafe.As<CCitadelBaseAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseAbilityServerOnly":
        {
            var innerDecoder = GetDecoder<CCitadelBaseAbilityServerOnly>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseAbilityServerOnly);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseAbilityServerOnly);
                var @this = Unsafe.As<CCitadelBaseAbilityServerOnly>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseDashCastAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseDashCastAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseDashCastAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseDashCastAbility);
                var @this = Unsafe.As<CCitadelBaseDashCastAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseLockonAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseLockonAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseLockonAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseLockonAbility);
                var @this = Unsafe.As<CCitadelBaseLockonAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseShivAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseShivAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseShivAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseShivAbility);
                var @this = Unsafe.As<CCitadelBaseShivAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseTriggerAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseTriggerAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseTriggerAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseTriggerAbility);
                var @this = Unsafe.As<CCitadelBaseTriggerAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBaseYamatoAbility":
        {
            var innerDecoder = GetDecoder<CCitadelBaseYamatoAbility>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBaseYamatoAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBaseYamatoAbility);
                var @this = Unsafe.As<CCitadelBaseYamatoAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBoomerangProjectile":
        {
            var innerDecoder = GetDecoder<CCitadelBoomerangProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBoomerangProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBoomerangProjectile);
                var @this = Unsafe.As<CCitadelBoomerangProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelBulletTimeWarp":
        {
            var innerDecoder = GetDecoder<CCitadelBulletTimeWarp>(new SerializerKey(className, 0));
            classType = typeof(CCitadelBulletTimeWarp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelBulletTimeWarp);
                var @this = Unsafe.As<CCitadelBulletTimeWarp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelCatapultTrigger":
        {
            var innerDecoder = GetDecoder<CCitadelCatapultTrigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadelCatapultTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelCatapultTrigger);
                var @this = Unsafe.As<CCitadelCatapultTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelClimbRopeTrigger":
        {
            var innerDecoder = GetDecoder<CCitadelClimbRopeTrigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadelClimbRopeTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelClimbRopeTrigger);
                var @this = Unsafe.As<CCitadelClimbRopeTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelControlPointTrigger":
        {
            var innerDecoder = GetDecoder<CCitadelControlPointTrigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadelControlPointTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelControlPointTrigger);
                var @this = Unsafe.As<CCitadelControlPointTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelGameRules":
        {
            var innerDecoder = GetDecoder<CCitadelGameRules>(new SerializerKey(className, 0));
            classType = typeof(CCitadelGameRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelGameRules);
                var @this = Unsafe.As<CCitadelGameRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelGameRulesProxy":
        {
            var innerDecoder = GetDecoder<CCitadelGameRulesProxy>(new SerializerKey(className, 0));
            classType = typeof(CCitadelGameRulesProxy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelGameRulesProxy);
                var @this = Unsafe.As<CCitadelGameRulesProxy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelHeroComponent":
        {
            var innerDecoder = GetDecoder<CCitadelHeroComponent>(new SerializerKey(className, 0));
            classType = typeof(CCitadelHeroComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelHeroComponent);
                var @this = Unsafe.As<CCitadelHeroComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelHornetStingProjectile":
        {
            var innerDecoder = GetDecoder<CCitadelHornetStingProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadelHornetStingProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelHornetStingProjectile);
                var @this = Unsafe.As<CCitadelHornetStingProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelIdolReturnTrigger":
        {
            var innerDecoder = GetDecoder<CCitadelIdolReturnTrigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadelIdolReturnTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelIdolReturnTrigger);
                var @this = Unsafe.As<CCitadelIdolReturnTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelItemPickup":
        {
            var innerDecoder = GetDecoder<CCitadelItemPickup>(new SerializerKey(className, 0));
            classType = typeof(CCitadelItemPickup);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelItemPickup);
                var @this = Unsafe.As<CCitadelItemPickup>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelItemPickupIdol":
        {
            var innerDecoder = GetDecoder<CCitadelItemPickupIdol>(new SerializerKey(className, 0));
            classType = typeof(CCitadelItemPickupIdol);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelItemPickupIdol);
                var @this = Unsafe.As<CCitadelItemPickupIdol>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelItemPickupRejuv":
        {
            var innerDecoder = GetDecoder<CCitadelItemPickupRejuv>(new SerializerKey(className, 0));
            classType = typeof(CCitadelItemPickupRejuv);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelItemPickupRejuv);
                var @this = Unsafe.As<CCitadelItemPickupRejuv>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelItemPickupRejuvHeroTest":
        {
            var innerDecoder = GetDecoder<CCitadelItemPickupRejuvHeroTest>(new SerializerKey(className, 0));
            classType = typeof(CCitadelItemPickupRejuvHeroTest);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelItemPickupRejuvHeroTest);
                var @this = Unsafe.As<CCitadelItemPickupRejuvHeroTest>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelMinimapBoundary":
        {
            var innerDecoder = GetDecoder<CCitadelMinimapBoundary>(new SerializerKey(className, 0));
            classType = typeof(CCitadelMinimapBoundary);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelMinimapBoundary);
                var @this = Unsafe.As<CCitadelMinimapBoundary>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelMinimapComponent":
        {
            var innerDecoder = GetDecoder<CCitadelMinimapComponent>(new SerializerKey(className, 0));
            classType = typeof(CCitadelMinimapComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelMinimapComponent);
                var @this = Unsafe.As<CCitadelMinimapComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelModelEntity":
        {
            var innerDecoder = GetDecoder<CCitadelModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CCitadelModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelModelEntity);
                var @this = Unsafe.As<CCitadelModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelObserver_MovementServices":
        {
            var innerDecoder = GetDecoder<CCitadelObserver_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CCitadelObserver_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelObserver_MovementServices);
                var @this = Unsafe.As<CCitadelObserver_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelObserverPawn":
        {
            var innerDecoder = GetDecoder<CCitadelObserverPawn>(new SerializerKey(className, 0));
            classType = typeof(CCitadelObserverPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelObserverPawn);
                var @this = Unsafe.As<CCitadelObserverPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPayload":
        {
            var innerDecoder = GetDecoder<CCitadelPayload>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPayload);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPayload);
                var @this = Unsafe.As<CCitadelPayload>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayer_CameraServices":
        {
            var innerDecoder = GetDecoder<CCitadelPlayer_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayer_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_CameraServices);
                var @this = Unsafe.As<CCitadelPlayer_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayer_MovementServices":
        {
            var innerDecoder = GetDecoder<CCitadelPlayer_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayer_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_MovementServices);
                var @this = Unsafe.As<CCitadelPlayer_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayer_ObserverServices":
        {
            var innerDecoder = GetDecoder<CCitadelPlayer_ObserverServices>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayer_ObserverServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayer_ObserverServices);
                var @this = Unsafe.As<CCitadelPlayer_ObserverServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayerBotNPCBrain":
        {
            var innerDecoder = GetDecoder<CCitadelPlayerBotNPCBrain>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayerBotNPCBrain);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayerBotNPCBrain);
                var @this = Unsafe.As<CCitadelPlayerBotNPCBrain>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayerClipComponent":
        {
            var innerDecoder = GetDecoder<CCitadelPlayerClipComponent>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayerClipComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayerClipComponent);
                var @this = Unsafe.As<CCitadelPlayerClipComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayerController":
        {
            var innerDecoder = GetDecoder<CCitadelPlayerController>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayerController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayerController);
                var @this = Unsafe.As<CCitadelPlayerController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayerPawn":
        {
            var innerDecoder = GetDecoder<CCitadelPlayerPawn>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayerPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayerPawn);
                var @this = Unsafe.As<CCitadelPlayerPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPlayerPawnBase":
        {
            var innerDecoder = GetDecoder<CCitadelPlayerPawnBase>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPlayerPawnBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPlayerPawnBase);
                var @this = Unsafe.As<CCitadelPlayerPawnBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPositionHomingProjectile":
        {
            var innerDecoder = GetDecoder<CCitadelPositionHomingProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPositionHomingProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPositionHomingProjectile);
                var @this = Unsafe.As<CCitadelPositionHomingProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelPreviewPlayerController":
        {
            var innerDecoder = GetDecoder<CCitadelPreviewPlayerController>(new SerializerKey(className, 0));
            classType = typeof(CCitadelPreviewPlayerController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelPreviewPlayerController);
                var @this = Unsafe.As<CCitadelPreviewPlayerController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelProjectile":
        {
            var innerDecoder = GetDecoder<CCitadelProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadelProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelProjectile);
                var @this = Unsafe.As<CCitadelProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelProjectile_ImmobilizeTrap":
        {
            var innerDecoder = GetDecoder<CCitadelProjectile_ImmobilizeTrap>(new SerializerKey(className, 0));
            classType = typeof(CCitadelProjectile_ImmobilizeTrap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelProjectile_ImmobilizeTrap);
                var @this = Unsafe.As<CCitadelProjectile_ImmobilizeTrap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelRegenComponent":
        {
            var innerDecoder = GetDecoder<CCitadelRegenComponent>(new SerializerKey(className, 0));
            classType = typeof(CCitadelRegenComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelRegenComponent);
                var @this = Unsafe.As<CCitadelRegenComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelSoundOpvarSetOBB":
        {
            var innerDecoder = GetDecoder<CCitadelSoundOpvarSetOBB>(new SerializerKey(className, 0));
            classType = typeof(CCitadelSoundOpvarSetOBB);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelSoundOpvarSetOBB);
                var @this = Unsafe.As<CCitadelSoundOpvarSetOBB>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelSpawnBlocker":
        {
            var innerDecoder = GetDecoder<CCitadelSpawnBlocker>(new SerializerKey(className, 0));
            classType = typeof(CCitadelSpawnBlocker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelSpawnBlocker);
                var @this = Unsafe.As<CCitadelSpawnBlocker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelSpectateDirectedCamera":
        {
            var innerDecoder = GetDecoder<CCitadelSpectateDirectedCamera>(new SerializerKey(className, 0));
            classType = typeof(CCitadelSpectateDirectedCamera);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelSpectateDirectedCamera);
                var @this = Unsafe.As<CCitadelSpectateDirectedCamera>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelSpectateNode":
        {
            var innerDecoder = GetDecoder<CCitadelSpectateNode>(new SerializerKey(className, 0));
            classType = typeof(CCitadelSpectateNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelSpectateNode);
                var @this = Unsafe.As<CCitadelSpectateNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelTeam":
        {
            var innerDecoder = GetDecoder<CCitadelTeam>(new SerializerKey(className, 0));
            classType = typeof(CCitadelTeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelTeam);
                var @this = Unsafe.As<CCitadelTeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelTeleportTrigger":
        {
            var innerDecoder = GetDecoder<CCitadelTeleportTrigger>(new SerializerKey(className, 0));
            classType = typeof(CCitadelTeleportTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelTeleportTrigger);
                var @this = Unsafe.As<CCitadelTeleportTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelTrackedProjectile":
        {
            var innerDecoder = GetDecoder<CCitadelTrackedProjectile>(new SerializerKey(className, 0));
            classType = typeof(CCitadelTrackedProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelTrackedProjectile);
                var @this = Unsafe.As<CCitadelTrackedProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelTrooperMinimap":
        {
            var innerDecoder = GetDecoder<CCitadelTrooperMinimap>(new SerializerKey(className, 0));
            classType = typeof(CCitadelTrooperMinimap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelTrooperMinimap);
                var @this = Unsafe.As<CCitadelTrooperMinimap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelViscousBall":
        {
            var innerDecoder = GetDecoder<CCitadelViscousBall>(new SerializerKey(className, 0));
            classType = typeof(CCitadelViscousBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelViscousBall);
                var @this = Unsafe.As<CCitadelViscousBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelZipLineNode":
        {
            var innerDecoder = GetDecoder<CCitadelZipLineNode>(new SerializerKey(className, 0));
            classType = typeof(CCitadelZipLineNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelZipLineNode);
                var @this = Unsafe.As<CCitadelZipLineNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCitadelZiplinePath":
        {
            var innerDecoder = GetDecoder<CCitadelZiplinePath>(new SerializerKey(className, 0));
            classType = typeof(CCitadelZiplinePath);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCitadelZiplinePath);
                var @this = Unsafe.As<CCitadelZiplinePath>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCollisionProperty":
        {
            var innerDecoder = GetDecoder<CCollisionProperty>(new SerializerKey(className, 0));
            classType = typeof(CCollisionProperty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCollisionProperty);
                var @this = Unsafe.As<CCollisionProperty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CColorCorrection":
        {
            var innerDecoder = GetDecoder<CColorCorrection>(new SerializerKey(className, 0));
            classType = typeof(CColorCorrection);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CColorCorrection);
                var @this = Unsafe.As<CColorCorrection>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CColorCorrectionVolume":
        {
            var innerDecoder = GetDecoder<CColorCorrectionVolume>(new SerializerKey(className, 0));
            classType = typeof(CColorCorrectionVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CColorCorrectionVolume);
                var @this = Unsafe.As<CColorCorrectionVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CConditionalCollidable":
        {
            var innerDecoder = GetDecoder<CConditionalCollidable>(new SerializerKey(className, 0));
            classType = typeof(CConditionalCollidable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CConditionalCollidable);
                var @this = Unsafe.As<CConditionalCollidable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDynamicLight":
        {
            var innerDecoder = GetDecoder<CDynamicLight>(new SerializerKey(className, 0));
            classType = typeof(CDynamicLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDynamicLight);
                var @this = Unsafe.As<CDynamicLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDynamicProp":
        {
            var innerDecoder = GetDecoder<CDynamicProp>(new SerializerKey(className, 0));
            classType = typeof(CDynamicProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDynamicProp);
                var @this = Unsafe.As<CDynamicProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconEntity":
        {
            var innerDecoder = GetDecoder<CEconEntity>(new SerializerKey(className, 0));
            classType = typeof(CEconEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconEntity);
                var @this = Unsafe.As<CEconEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconItemAttribute":
        {
            var innerDecoder = GetDecoder<CEconItemAttribute>(new SerializerKey(className, 0));
            classType = typeof(CEconItemAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconItemAttribute);
                var @this = Unsafe.As<CEconItemAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconItemView":
        {
            var innerDecoder = GetDecoder<CEconItemView>(new SerializerKey(className, 0));
            classType = typeof(CEconItemView);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconItemView);
                var @this = Unsafe.As<CEconItemView>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconWearable":
        {
            var innerDecoder = GetDecoder<CEconWearable>(new SerializerKey(className, 0));
            classType = typeof(CEconWearable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconWearable);
                var @this = Unsafe.As<CEconWearable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityComponent":
        {
            var innerDecoder = GetDecoder<CEntityComponent>(new SerializerKey(className, 0));
            classType = typeof(CEntityComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityComponent);
                var @this = Unsafe.As<CEntityComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityDissolve":
        {
            var innerDecoder = GetDecoder<CEntityDissolve>(new SerializerKey(className, 0));
            classType = typeof(CEntityDissolve);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityDissolve);
                var @this = Unsafe.As<CEntityDissolve>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityFlame":
        {
            var innerDecoder = GetDecoder<CEntityFlame>(new SerializerKey(className, 0));
            classType = typeof(CEntityFlame);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityFlame);
                var @this = Unsafe.As<CEntityFlame>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityIdentity":
        {
            var innerDecoder = GetDecoder<CEntityIdentity>(new SerializerKey(className, 0));
            classType = typeof(CEntityIdentity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityIdentity);
                var @this = Unsafe.As<CEntityIdentity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCombinedLightProbeVolume":
        {
            var innerDecoder = GetDecoder<CEnvCombinedLightProbeVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvCombinedLightProbeVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCombinedLightProbeVolume);
                var @this = Unsafe.As<CEnvCombinedLightProbeVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCubemap":
        {
            var innerDecoder = GetDecoder<CEnvCubemap>(new SerializerKey(className, 0));
            classType = typeof(CEnvCubemap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCubemap);
                var @this = Unsafe.As<CEnvCubemap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCubemapFog":
        {
            var innerDecoder = GetDecoder<CEnvCubemapFog>(new SerializerKey(className, 0));
            classType = typeof(CEnvCubemapFog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCubemapFog);
                var @this = Unsafe.As<CEnvCubemapFog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvDecal":
        {
            var innerDecoder = GetDecoder<CEnvDecal>(new SerializerKey(className, 0));
            classType = typeof(CEnvDecal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvDecal);
                var @this = Unsafe.As<CEnvDecal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvDetailController":
        {
            var innerDecoder = GetDecoder<CEnvDetailController>(new SerializerKey(className, 0));
            classType = typeof(CEnvDetailController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvDetailController);
                var @this = Unsafe.As<CEnvDetailController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvLightProbeVolume":
        {
            var innerDecoder = GetDecoder<CEnvLightProbeVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvLightProbeVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvLightProbeVolume);
                var @this = Unsafe.As<CEnvLightProbeVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvParticleGlow":
        {
            var innerDecoder = GetDecoder<CEnvParticleGlow>(new SerializerKey(className, 0));
            classType = typeof(CEnvParticleGlow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvParticleGlow);
                var @this = Unsafe.As<CEnvParticleGlow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvProjectedTexture":
        {
            var innerDecoder = GetDecoder<CEnvProjectedTexture>(new SerializerKey(className, 0));
            classType = typeof(CEnvProjectedTexture);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvProjectedTexture);
                var @this = Unsafe.As<CEnvProjectedTexture>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvScreenOverlay":
        {
            var innerDecoder = GetDecoder<CEnvScreenOverlay>(new SerializerKey(className, 0));
            classType = typeof(CEnvScreenOverlay);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvScreenOverlay);
                var @this = Unsafe.As<CEnvScreenOverlay>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvSky":
        {
            var innerDecoder = GetDecoder<CEnvSky>(new SerializerKey(className, 0));
            classType = typeof(CEnvSky);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvSky);
                var @this = Unsafe.As<CEnvSky>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvSoundscape":
        {
            var innerDecoder = GetDecoder<CEnvSoundscape>(new SerializerKey(className, 0));
            classType = typeof(CEnvSoundscape);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvSoundscape);
                var @this = Unsafe.As<CEnvSoundscape>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvVolumetricFogController":
        {
            var innerDecoder = GetDecoder<CEnvVolumetricFogController>(new SerializerKey(className, 0));
            classType = typeof(CEnvVolumetricFogController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvVolumetricFogController);
                var @this = Unsafe.As<CEnvVolumetricFogController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvVolumetricFogVolume":
        {
            var innerDecoder = GetDecoder<CEnvVolumetricFogVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvVolumetricFogVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvVolumetricFogVolume);
                var @this = Unsafe.As<CEnvVolumetricFogVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvWind":
        {
            var innerDecoder = GetDecoder<CEnvWind>(new SerializerKey(className, 0));
            classType = typeof(CEnvWind);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvWind);
                var @this = Unsafe.As<CEnvWind>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvWindShared":
        {
            var innerDecoder = GetDecoder<CEnvWindShared>(new SerializerKey(className, 0));
            classType = typeof(CEnvWindShared);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvWindShared);
                var @this = Unsafe.As<CEnvWindShared>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFireSmoke":
        {
            var innerDecoder = GetDecoder<CFireSmoke>(new SerializerKey(className, 0));
            classType = typeof(CFireSmoke);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFireSmoke);
                var @this = Unsafe.As<CFireSmoke>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFish":
        {
            var innerDecoder = GetDecoder<CFish>(new SerializerKey(className, 0));
            classType = typeof(CFish);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFish);
                var @this = Unsafe.As<CFish>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFogController":
        {
            var innerDecoder = GetDecoder<CFogController>(new SerializerKey(className, 0));
            classType = typeof(CFogController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFogController);
                var @this = Unsafe.As<CFogController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncBrush":
        {
            var innerDecoder = GetDecoder<CFuncBrush>(new SerializerKey(className, 0));
            classType = typeof(CFuncBrush);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncBrush);
                var @this = Unsafe.As<CFuncBrush>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncElectrifiedVolume":
        {
            var innerDecoder = GetDecoder<CFuncElectrifiedVolume>(new SerializerKey(className, 0));
            classType = typeof(CFuncElectrifiedVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncElectrifiedVolume);
                var @this = Unsafe.As<CFuncElectrifiedVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncLadder":
        {
            var innerDecoder = GetDecoder<CFuncLadder>(new SerializerKey(className, 0));
            classType = typeof(CFuncLadder);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncLadder);
                var @this = Unsafe.As<CFuncLadder>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncMonitor":
        {
            var innerDecoder = GetDecoder<CFuncMonitor>(new SerializerKey(className, 0));
            classType = typeof(CFuncMonitor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncMonitor);
                var @this = Unsafe.As<CFuncMonitor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncMoveLinear":
        {
            var innerDecoder = GetDecoder<CFuncMoveLinear>(new SerializerKey(className, 0));
            classType = typeof(CFuncMoveLinear);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncMoveLinear);
                var @this = Unsafe.As<CFuncMoveLinear>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncMover":
        {
            var innerDecoder = GetDecoder<CFuncMover>(new SerializerKey(className, 0));
            classType = typeof(CFuncMover);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncMover);
                var @this = Unsafe.As<CFuncMover>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncRotating":
        {
            var innerDecoder = GetDecoder<CFuncRotating>(new SerializerKey(className, 0));
            classType = typeof(CFuncRotating);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncRotating);
                var @this = Unsafe.As<CFuncRotating>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncTrackTrain":
        {
            var innerDecoder = GetDecoder<CFuncTrackTrain>(new SerializerKey(className, 0));
            classType = typeof(CFuncTrackTrain);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncTrackTrain);
                var @this = Unsafe.As<CFuncTrackTrain>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameRules":
        {
            var innerDecoder = GetDecoder<CGameRules>(new SerializerKey(className, 0));
            classType = typeof(CGameRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameRules);
                var @this = Unsafe.As<CGameRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameRulesProxy":
        {
            var innerDecoder = GetDecoder<CGameRulesProxy>(new SerializerKey(className, 0));
            classType = typeof(CGameRulesProxy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameRulesProxy);
                var @this = Unsafe.As<CGameRulesProxy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameSceneNode":
        {
            var innerDecoder = GetDecoder<CGameSceneNode>(new SerializerKey(className, 0));
            classType = typeof(CGameSceneNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameSceneNode);
                var @this = Unsafe.As<CGameSceneNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGlowProperty":
        {
            var innerDecoder = GetDecoder<CGlowProperty>(new SerializerKey(className, 0));
            classType = typeof(CGlowProperty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGlowProperty);
                var @this = Unsafe.As<CGlowProperty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGradientFog":
        {
            var innerDecoder = GetDecoder<CGradientFog>(new SerializerKey(className, 0));
            classType = typeof(CGradientFog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGradientFog);
                var @this = Unsafe.As<CGradientFog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHandleTest":
        {
            var innerDecoder = GetDecoder<CHandleTest>(new SerializerKey(className, 0));
            classType = typeof(CHandleTest);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHandleTest);
                var @this = Unsafe.As<CHandleTest>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHitboxComponent":
        {
            var innerDecoder = GetDecoder<CHitboxComponent>(new SerializerKey(className, 0));
            classType = typeof(CHitboxComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHitboxComponent);
                var @this = Unsafe.As<CHitboxComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoLadderDismount":
        {
            var innerDecoder = GetDecoder<CInfoLadderDismount>(new SerializerKey(className, 0));
            classType = typeof(CInfoLadderDismount);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoLadderDismount);
                var @this = Unsafe.As<CInfoLadderDismount>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoOffscreenPanoramaTexture":
        {
            var innerDecoder = GetDecoder<CInfoOffscreenPanoramaTexture>(new SerializerKey(className, 0));
            classType = typeof(CInfoOffscreenPanoramaTexture);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoOffscreenPanoramaTexture);
                var @this = Unsafe.As<CInfoOffscreenPanoramaTexture>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoVisibilityBox":
        {
            var innerDecoder = GetDecoder<CInfoVisibilityBox>(new SerializerKey(className, 0));
            classType = typeof(CInfoVisibilityBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoVisibilityBox);
                var @this = Unsafe.As<CInfoVisibilityBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoWorldLayer":
        {
            var innerDecoder = GetDecoder<CInfoWorldLayer>(new SerializerKey(className, 0));
            classType = typeof(CInfoWorldLayer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoWorldLayer);
                var @this = Unsafe.As<CInfoWorldLayer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInWorldKeyBindPanel":
        {
            var innerDecoder = GetDecoder<CInWorldKeyBindPanel>(new SerializerKey(className, 0));
            classType = typeof(CInWorldKeyBindPanel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInWorldKeyBindPanel);
                var @this = Unsafe.As<CInWorldKeyBindPanel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem":
        {
            var innerDecoder = GetDecoder<CItem>(new SerializerKey(className, 0));
            classType = typeof(CItem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem);
                var @this = Unsafe.As<CItem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem_FleetfootBoots":
        {
            var innerDecoder = GetDecoder<CItem_FleetfootBoots>(new SerializerKey(className, 0));
            classType = typeof(CItem_FleetfootBoots);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem_FleetfootBoots);
                var @this = Unsafe.As<CItem_FleetfootBoots>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem_RestorativeLocket":
        {
            var innerDecoder = GetDecoder<CItem_RestorativeLocket>(new SerializerKey(className, 0));
            classType = typeof(CItem_RestorativeLocket);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem_RestorativeLocket);
                var @this = Unsafe.As<CItem_RestorativeLocket>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem_WitheringWhip":
        {
            var innerDecoder = GetDecoder<CItem_WitheringWhip>(new SerializerKey(className, 0));
            classType = typeof(CItem_WitheringWhip);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem_WitheringWhip);
                var @this = Unsafe.As<CItem_WitheringWhip>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemCrate":
        {
            var innerDecoder = GetDecoder<CItemCrate>(new SerializerKey(className, 0));
            classType = typeof(CItemCrate);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemCrate);
                var @this = Unsafe.As<CItemCrate>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemExplosiveBarrel":
        {
            var innerDecoder = GetDecoder<CItemExplosiveBarrel>(new SerializerKey(className, 0));
            classType = typeof(CItemExplosiveBarrel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemExplosiveBarrel);
                var @this = Unsafe.As<CItemExplosiveBarrel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemFlare":
        {
            var innerDecoder = GetDecoder<CItemFlare>(new SerializerKey(className, 0));
            classType = typeof(CItemFlare);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemFlare);
                var @this = Unsafe.As<CItemFlare>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemGeneric":
        {
            var innerDecoder = GetDecoder<CItemGeneric>(new SerializerKey(className, 0));
            classType = typeof(CItemGeneric);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemGeneric);
                var @this = Unsafe.As<CItemGeneric>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemParachute":
        {
            var innerDecoder = GetDecoder<CItemParachute>(new SerializerKey(className, 0));
            classType = typeof(CItemParachute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemParachute);
                var @this = Unsafe.As<CItemParachute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemXP":
        {
            var innerDecoder = GetDecoder<CItemXP>(new SerializerKey(className, 0));
            classType = typeof(CItemXP);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemXP);
                var @this = Unsafe.As<CItemXP>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLaneNode":
        {
            var innerDecoder = GetDecoder<CLaneNode>(new SerializerKey(className, 0));
            classType = typeof(CLaneNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLaneNode);
                var @this = Unsafe.As<CLaneNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightCapsuleEntity":
        {
            var innerDecoder = GetDecoder<CLightCapsuleEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightCapsuleEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightCapsuleEntity);
                var @this = Unsafe.As<CLightCapsuleEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightComponent":
        {
            var innerDecoder = GetDecoder<CLightComponent>(new SerializerKey(className, 0));
            classType = typeof(CLightComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightComponent);
                var @this = Unsafe.As<CLightComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightDirectionalEntity":
        {
            var innerDecoder = GetDecoder<CLightDirectionalEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightDirectionalEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightDirectionalEntity);
                var @this = Unsafe.As<CLightDirectionalEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightEntity":
        {
            var innerDecoder = GetDecoder<CLightEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightEntity);
                var @this = Unsafe.As<CLightEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightEnvironmentEntity":
        {
            var innerDecoder = GetDecoder<CLightEnvironmentEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightEnvironmentEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightEnvironmentEntity);
                var @this = Unsafe.As<CLightEnvironmentEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightGlow":
        {
            var innerDecoder = GetDecoder<CLightGlow>(new SerializerKey(className, 0));
            classType = typeof(CLightGlow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightGlow);
                var @this = Unsafe.As<CLightGlow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightOrthoEntity":
        {
            var innerDecoder = GetDecoder<CLightOrthoEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightOrthoEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightOrthoEntity);
                var @this = Unsafe.As<CLightOrthoEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightSpotEntity":
        {
            var innerDecoder = GetDecoder<CLightSpotEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightSpotEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightSpotEntity);
                var @this = Unsafe.As<CLightSpotEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMiniMapMarker":
        {
            var innerDecoder = GetDecoder<CMiniMapMarker>(new SerializerKey(className, 0));
            classType = typeof(CMiniMapMarker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMiniMapMarker);
                var @this = Unsafe.As<CMiniMapMarker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CModelPointEntity":
        {
            var innerDecoder = GetDecoder<CModelPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CModelPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CModelPointEntity);
                var @this = Unsafe.As<CModelPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CModelState":
        {
            var innerDecoder = GetDecoder<CModelState>(new SerializerKey(className, 0));
            classType = typeof(CModelState);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CModelState);
                var @this = Unsafe.As<CModelState>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CModifierProperty":
        {
            var innerDecoder = GetDecoder<CModifierProperty>(new SerializerKey(className, 0));
            classType = typeof(CModifierProperty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CModifierProperty);
                var @this = Unsafe.As<CModifierProperty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMultiplayRules":
        {
            var innerDecoder = GetDecoder<CMultiplayRules>(new SerializerKey(className, 0));
            classType = typeof(CMultiplayRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMultiplayRules);
                var @this = Unsafe.As<CMultiplayRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkOriginCellCoordQuantizedVector":
        {
            var innerDecoder = GetDecoder<CNetworkOriginCellCoordQuantizedVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkOriginCellCoordQuantizedVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkOriginCellCoordQuantizedVector);
                var @this = Unsafe.As<CNetworkOriginCellCoordQuantizedVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkOriginQuantizedVector":
        {
            var innerDecoder = GetDecoder<CNetworkOriginQuantizedVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkOriginQuantizedVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkOriginQuantizedVector);
                var @this = Unsafe.As<CNetworkOriginQuantizedVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkVelocityVector":
        {
            var innerDecoder = GetDecoder<CNetworkVelocityVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkVelocityVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkVelocityVector);
                var @this = Unsafe.As<CNetworkVelocityVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkViewOffsetVector":
        {
            var innerDecoder = GetDecoder<CNetworkViewOffsetVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkViewOffsetVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkViewOffsetVector);
                var @this = Unsafe.As<CNetworkViewOffsetVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_BaseDefenseSentry":
        {
            var innerDecoder = GetDecoder<CNPC_BaseDefenseSentry>(new SerializerKey(className, 0));
            classType = typeof(CNPC_BaseDefenseSentry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_BaseDefenseSentry);
                var @this = Unsafe.As<CNPC_BaseDefenseSentry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_Boss_Tier2":
        {
            var innerDecoder = GetDecoder<CNPC_Boss_Tier2>(new SerializerKey(className, 0));
            classType = typeof(CNPC_Boss_Tier2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_Boss_Tier2);
                var @this = Unsafe.As<CNPC_Boss_Tier2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_Boss_Tier3":
        {
            var innerDecoder = GetDecoder<CNPC_Boss_Tier3>(new SerializerKey(className, 0));
            classType = typeof(CNPC_Boss_Tier3);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_Boss_Tier3);
                var @this = Unsafe.As<CNPC_Boss_Tier3>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_CarpetBombDrone":
        {
            var innerDecoder = GetDecoder<CNPC_CarpetBombDrone>(new SerializerKey(className, 0));
            classType = typeof(CNPC_CarpetBombDrone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_CarpetBombDrone);
                var @this = Unsafe.As<CNPC_CarpetBombDrone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_FieldSentry":
        {
            var innerDecoder = GetDecoder<CNPC_FieldSentry>(new SerializerKey(className, 0));
            classType = typeof(CNPC_FieldSentry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_FieldSentry);
                var @this = Unsafe.As<CNPC_FieldSentry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_FlyingDrone":
        {
            var innerDecoder = GetDecoder<CNPC_FlyingDrone>(new SerializerKey(className, 0));
            classType = typeof(CNPC_FlyingDrone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_FlyingDrone);
                var @this = Unsafe.As<CNPC_FlyingDrone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_HeroCloneTrooper":
        {
            var innerDecoder = GetDecoder<CNPC_HeroCloneTrooper>(new SerializerKey(className, 0));
            classType = typeof(CNPC_HeroCloneTrooper);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_HeroCloneTrooper);
                var @this = Unsafe.As<CNPC_HeroCloneTrooper>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_HeroDecoy":
        {
            var innerDecoder = GetDecoder<CNPC_HeroDecoy>(new SerializerKey(className, 0));
            classType = typeof(CNPC_HeroDecoy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_HeroDecoy);
                var @this = Unsafe.As<CNPC_HeroDecoy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_MidBoss":
        {
            var innerDecoder = GetDecoder<CNPC_MidBoss>(new SerializerKey(className, 0));
            classType = typeof(CNPC_MidBoss);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_MidBoss);
                var @this = Unsafe.As<CNPC_MidBoss>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_MidBossHeroTest":
        {
            var innerDecoder = GetDecoder<CNPC_MidBossHeroTest>(new SerializerKey(className, 0));
            classType = typeof(CNPC_MidBossHeroTest);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_MidBossHeroTest);
                var @this = Unsafe.As<CNPC_MidBossHeroTest>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_MortarSentry":
        {
            var innerDecoder = GetDecoder<CNPC_MortarSentry>(new SerializerKey(className, 0));
            classType = typeof(CNPC_MortarSentry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_MortarSentry);
                var @this = Unsafe.As<CNPC_MortarSentry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_NanoRollermine":
        {
            var innerDecoder = GetDecoder<CNPC_NanoRollermine>(new SerializerKey(className, 0));
            classType = typeof(CNPC_NanoRollermine);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_NanoRollermine);
                var @this = Unsafe.As<CNPC_NanoRollermine>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_PestilenceDrone":
        {
            var innerDecoder = GetDecoder<CNPC_PestilenceDrone>(new SerializerKey(className, 0));
            classType = typeof(CNPC_PestilenceDrone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_PestilenceDrone);
                var @this = Unsafe.As<CNPC_PestilenceDrone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_ShieldedSentry":
        {
            var innerDecoder = GetDecoder<CNPC_ShieldedSentry>(new SerializerKey(className, 0));
            classType = typeof(CNPC_ShieldedSentry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_ShieldedSentry);
                var @this = Unsafe.As<CNPC_ShieldedSentry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_SimpleAnimatingAI":
        {
            var innerDecoder = GetDecoder<CNPC_SimpleAnimatingAI>(new SerializerKey(className, 0));
            classType = typeof(CNPC_SimpleAnimatingAI);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_SimpleAnimatingAI);
                var @this = Unsafe.As<CNPC_SimpleAnimatingAI>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_SurveillanceDrone":
        {
            var innerDecoder = GetDecoder<CNPC_SurveillanceDrone>(new SerializerKey(className, 0));
            classType = typeof(CNPC_SurveillanceDrone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_SurveillanceDrone);
                var @this = Unsafe.As<CNPC_SurveillanceDrone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_TeslaCoil":
        {
            var innerDecoder = GetDecoder<CNPC_TeslaCoil>(new SerializerKey(className, 0));
            classType = typeof(CNPC_TeslaCoil);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_TeslaCoil);
                var @this = Unsafe.As<CNPC_TeslaCoil>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_Trooper":
        {
            var innerDecoder = GetDecoder<CNPC_Trooper>(new SerializerKey(className, 0));
            classType = typeof(CNPC_Trooper);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_Trooper);
                var @this = Unsafe.As<CNPC_Trooper>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_TrooperBarrackBoss":
        {
            var innerDecoder = GetDecoder<CNPC_TrooperBarrackBoss>(new SerializerKey(className, 0));
            classType = typeof(CNPC_TrooperBarrackBoss);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_TrooperBarrackBoss);
                var @this = Unsafe.As<CNPC_TrooperBarrackBoss>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_TrooperBoss":
        {
            var innerDecoder = GetDecoder<CNPC_TrooperBoss>(new SerializerKey(className, 0));
            classType = typeof(CNPC_TrooperBoss);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_TrooperBoss);
                var @this = Unsafe.As<CNPC_TrooperBoss>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_TrooperNeutral":
        {
            var innerDecoder = GetDecoder<CNPC_TrooperNeutral>(new SerializerKey(className, 0));
            classType = typeof(CNPC_TrooperNeutral);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_TrooperNeutral);
                var @this = Unsafe.As<CNPC_TrooperNeutral>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_TrooperNeutralNodeMover":
        {
            var innerDecoder = GetDecoder<CNPC_TrooperNeutralNodeMover>(new SerializerKey(className, 0));
            classType = typeof(CNPC_TrooperNeutralNodeMover);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_TrooperNeutralNodeMover);
                var @this = Unsafe.As<CNPC_TrooperNeutralNodeMover>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNPC_YakuzaGangster":
        {
            var innerDecoder = GetDecoder<CNPC_YakuzaGangster>(new SerializerKey(className, 0));
            classType = typeof(CNPC_YakuzaGangster);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNPC_YakuzaGangster);
                var @this = Unsafe.As<CNPC_YakuzaGangster>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "COmniLight":
        {
            var innerDecoder = GetDecoder<COmniLight>(new SerializerKey(className, 0));
            classType = typeof(COmniLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is COmniLight);
                var @this = Unsafe.As<COmniLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CParticleSystem":
        {
            var innerDecoder = GetDecoder<CParticleSystem>(new SerializerKey(className, 0));
            classType = typeof(CParticleSystem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CParticleSystem);
                var @this = Unsafe.As<CParticleSystem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPathParticleRope":
        {
            var innerDecoder = GetDecoder<CPathParticleRope>(new SerializerKey(className, 0));
            classType = typeof(CPathParticleRope);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPathParticleRope);
                var @this = Unsafe.As<CPathParticleRope>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPathSimple":
        {
            var innerDecoder = GetDecoder<CPathSimple>(new SerializerKey(className, 0));
            classType = typeof(CPathSimple);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPathSimple);
                var @this = Unsafe.As<CPathSimple>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysBox":
        {
            var innerDecoder = GetDecoder<CPhysBox>(new SerializerKey(className, 0));
            classType = typeof(CPhysBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysBox);
                var @this = Unsafe.As<CPhysBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysicsProp":
        {
            var innerDecoder = GetDecoder<CPhysicsProp>(new SerializerKey(className, 0));
            classType = typeof(CPhysicsProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysicsProp);
                var @this = Unsafe.As<CPhysicsProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysMagnet":
        {
            var innerDecoder = GetDecoder<CPhysMagnet>(new SerializerKey(className, 0));
            classType = typeof(CPhysMagnet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysMagnet);
                var @this = Unsafe.As<CPhysMagnet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_AutoaimServices":
        {
            var innerDecoder = GetDecoder<CPlayer_AutoaimServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_AutoaimServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_AutoaimServices);
                var @this = Unsafe.As<CPlayer_AutoaimServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_CameraServices":
        {
            var innerDecoder = GetDecoder<CPlayer_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_CameraServices);
                var @this = Unsafe.As<CPlayer_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_FlashlightServices":
        {
            var innerDecoder = GetDecoder<CPlayer_FlashlightServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_FlashlightServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_FlashlightServices);
                var @this = Unsafe.As<CPlayer_FlashlightServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_ItemServices":
        {
            var innerDecoder = GetDecoder<CPlayer_ItemServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_ItemServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_ItemServices);
                var @this = Unsafe.As<CPlayer_ItemServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_MovementServices":
        {
            var innerDecoder = GetDecoder<CPlayer_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices);
                var @this = Unsafe.As<CPlayer_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_MovementServices_Humanoid":
        {
            var innerDecoder = GetDecoder<CPlayer_MovementServices_Humanoid>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_MovementServices_Humanoid);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices_Humanoid);
                var @this = Unsafe.As<CPlayer_MovementServices_Humanoid>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_ObserverServices":
        {
            var innerDecoder = GetDecoder<CPlayer_ObserverServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_ObserverServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_ObserverServices);
                var @this = Unsafe.As<CPlayer_ObserverServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_UseServices":
        {
            var innerDecoder = GetDecoder<CPlayer_UseServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_UseServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_UseServices);
                var @this = Unsafe.As<CPlayer_UseServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_WaterServices":
        {
            var innerDecoder = GetDecoder<CPlayer_WaterServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_WaterServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_WaterServices);
                var @this = Unsafe.As<CPlayer_WaterServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_WeaponServices":
        {
            var innerDecoder = GetDecoder<CPlayer_WeaponServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_WeaponServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_WeaponServices);
                var @this = Unsafe.As<CPlayer_WeaponServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerPawnComponent":
        {
            var innerDecoder = GetDecoder<CPlayerPawnComponent>(new SerializerKey(className, 0));
            classType = typeof(CPlayerPawnComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerPawnComponent);
                var @this = Unsafe.As<CPlayerPawnComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerVisibility":
        {
            var innerDecoder = GetDecoder<CPlayerVisibility>(new SerializerKey(className, 0));
            classType = typeof(CPlayerVisibility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerVisibility);
                var @this = Unsafe.As<CPlayerVisibility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointCamera":
        {
            var innerDecoder = GetDecoder<CPointCamera>(new SerializerKey(className, 0));
            classType = typeof(CPointCamera);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointCamera);
                var @this = Unsafe.As<CPointCamera>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIDialog":
        {
            var innerDecoder = GetDecoder<CPointClientUIDialog>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIDialog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIDialog);
                var @this = Unsafe.As<CPointClientUIDialog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIWorldPanel":
        {
            var innerDecoder = GetDecoder<CPointClientUIWorldPanel>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIWorldPanel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIWorldPanel);
                var @this = Unsafe.As<CPointClientUIWorldPanel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIWorldTextPanel":
        {
            var innerDecoder = GetDecoder<CPointClientUIWorldTextPanel>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIWorldTextPanel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIWorldTextPanel);
                var @this = Unsafe.As<CPointClientUIWorldTextPanel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointCommentaryNode":
        {
            var innerDecoder = GetDecoder<CPointCommentaryNode>(new SerializerKey(className, 0));
            classType = typeof(CPointCommentaryNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointCommentaryNode);
                var @this = Unsafe.As<CPointCommentaryNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointEntity":
        {
            var innerDecoder = GetDecoder<CPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointEntity);
                var @this = Unsafe.As<CPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointOrient":
        {
            var innerDecoder = GetDecoder<CPointOrient>(new SerializerKey(className, 0));
            classType = typeof(CPointOrient);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointOrient);
                var @this = Unsafe.As<CPointOrient>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointValueRemapper":
        {
            var innerDecoder = GetDecoder<CPointValueRemapper>(new SerializerKey(className, 0));
            classType = typeof(CPointValueRemapper);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointValueRemapper);
                var @this = Unsafe.As<CPointValueRemapper>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointWorldText":
        {
            var innerDecoder = GetDecoder<CPointWorldText>(new SerializerKey(className, 0));
            classType = typeof(CPointWorldText);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointWorldText);
                var @this = Unsafe.As<CPointWorldText>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPostProcessingVolume":
        {
            var innerDecoder = GetDecoder<CPostProcessingVolume>(new SerializerKey(className, 0));
            classType = typeof(CPostProcessingVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPostProcessingVolume);
                var @this = Unsafe.As<CPostProcessingVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPrecipitation":
        {
            var innerDecoder = GetDecoder<CPrecipitation>(new SerializerKey(className, 0));
            classType = typeof(CPrecipitation);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPrecipitation);
                var @this = Unsafe.As<CPrecipitation>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPrecipitationBlocker":
        {
            var innerDecoder = GetDecoder<CPrecipitationBlocker>(new SerializerKey(className, 0));
            classType = typeof(CPrecipitationBlocker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPrecipitationBlocker);
                var @this = Unsafe.As<CPrecipitationBlocker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Mirage_Tornado":
        {
            var innerDecoder = GetDecoder<CProjectile_Mirage_Tornado>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Mirage_Tornado);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Mirage_Tornado);
                var @this = Unsafe.As<CProjectile_Mirage_Tornado>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Perched_Predator":
        {
            var innerDecoder = GetDecoder<CProjectile_Perched_Predator>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Perched_Predator);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Perched_Predator);
                var @this = Unsafe.As<CProjectile_Perched_Predator>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Rolling_FireBall":
        {
            var innerDecoder = GetDecoder<CProjectile_Rolling_FireBall>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Rolling_FireBall);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Rolling_FireBall);
                var @this = Unsafe.As<CProjectile_Rolling_FireBall>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Rutger_Rocket":
        {
            var innerDecoder = GetDecoder<CProjectile_Rutger_Rocket>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Rutger_Rocket);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Rutger_Rocket);
                var @this = Unsafe.As<CProjectile_Rutger_Rocket>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Stomp_Projectile":
        {
            var innerDecoder = GetDecoder<CProjectile_Stomp_Projectile>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Stomp_Projectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Stomp_Projectile);
                var @this = Unsafe.As<CProjectile_Stomp_Projectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Synth_Barrage":
        {
            var innerDecoder = GetDecoder<CProjectile_Synth_Barrage>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Synth_Barrage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Synth_Barrage);
                var @this = Unsafe.As<CProjectile_Synth_Barrage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CProjectile_Synth_PlasmaFlux":
        {
            var innerDecoder = GetDecoder<CProjectile_Synth_PlasmaFlux>(new SerializerKey(className, 0));
            classType = typeof(CProjectile_Synth_PlasmaFlux);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CProjectile_Synth_PlasmaFlux);
                var @this = Unsafe.As<CProjectile_Synth_PlasmaFlux>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPropAnimatingBreakable":
        {
            var innerDecoder = GetDecoder<CPropAnimatingBreakable>(new SerializerKey(className, 0));
            classType = typeof(CPropAnimatingBreakable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPropAnimatingBreakable);
                var @this = Unsafe.As<CPropAnimatingBreakable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPropDataComponent":
        {
            var innerDecoder = GetDecoder<CPropDataComponent>(new SerializerKey(className, 0));
            classType = typeof(CPropDataComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPropDataComponent);
                var @this = Unsafe.As<CPropDataComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPropDoorRotating":
        {
            var innerDecoder = GetDecoder<CPropDoorRotating>(new SerializerKey(className, 0));
            classType = typeof(CPropDoorRotating);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPropDoorRotating);
                var @this = Unsafe.As<CPropDoorRotating>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollManager":
        {
            var innerDecoder = GetDecoder<CRagdollManager>(new SerializerKey(className, 0));
            classType = typeof(CRagdollManager);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollManager);
                var @this = Unsafe.As<CRagdollManager>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollProp":
        {
            var innerDecoder = GetDecoder<CRagdollProp>(new SerializerKey(className, 0));
            classType = typeof(CRagdollProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollProp);
                var @this = Unsafe.As<CRagdollProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollPropAttached":
        {
            var innerDecoder = GetDecoder<CRagdollPropAttached>(new SerializerKey(className, 0));
            classType = typeof(CRagdollPropAttached);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollPropAttached);
                var @this = Unsafe.As<CRagdollPropAttached>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRectLight":
        {
            var innerDecoder = GetDecoder<CRectLight>(new SerializerKey(className, 0));
            classType = typeof(CRectLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRectLight);
                var @this = Unsafe.As<CRectLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRenderComponent":
        {
            var innerDecoder = GetDecoder<CRenderComponent>(new SerializerKey(className, 0));
            classType = typeof(CRenderComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRenderComponent);
                var @this = Unsafe.As<CRenderComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRopeKeyframe":
        {
            var innerDecoder = GetDecoder<CRopeKeyframe>(new SerializerKey(className, 0));
            classType = typeof(CRopeKeyframe);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRopeKeyframe);
                var @this = Unsafe.As<CRopeKeyframe>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSceneEntity":
        {
            var innerDecoder = GetDecoder<CSceneEntity>(new SerializerKey(className, 0));
            classType = typeof(CSceneEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSceneEntity);
                var @this = Unsafe.As<CSceneEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CScriptComponent":
        {
            var innerDecoder = GetDecoder<CScriptComponent>(new SerializerKey(className, 0));
            classType = typeof(CScriptComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CScriptComponent);
                var @this = Unsafe.As<CScriptComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CShatterGlassShardPhysics":
        {
            var innerDecoder = GetDecoder<CShatterGlassShardPhysics>(new SerializerKey(className, 0));
            classType = typeof(CShatterGlassShardPhysics);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CShatterGlassShardPhysics);
                var @this = Unsafe.As<CShatterGlassShardPhysics>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkeletonAnimationController":
        {
            var innerDecoder = GetDecoder<CSkeletonAnimationController>(new SerializerKey(className, 0));
            classType = typeof(CSkeletonAnimationController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkeletonAnimationController);
                var @this = Unsafe.As<CSkeletonAnimationController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkeletonInstance":
        {
            var innerDecoder = GetDecoder<CSkeletonInstance>(new SerializerKey(className, 0));
            classType = typeof(CSkeletonInstance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkeletonInstance);
                var @this = Unsafe.As<CSkeletonInstance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkyCamera":
        {
            var innerDecoder = GetDecoder<CSkyCamera>(new SerializerKey(className, 0));
            classType = typeof(CSkyCamera);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkyCamera);
                var @this = Unsafe.As<CSkyCamera>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntityBase":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntityBase>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntityBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntityBase);
                var @this = Unsafe.As<CSoundAreaEntityBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntityOrientedBox":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntityOrientedBox>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntityOrientedBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntityOrientedBox);
                var @this = Unsafe.As<CSoundAreaEntityOrientedBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntitySphere":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntitySphere>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntitySphere);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntitySphere);
                var @this = Unsafe.As<CSoundAreaEntitySphere>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundEventAABBEntity":
        {
            var innerDecoder = GetDecoder<CSoundEventAABBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundEventAABBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundEventAABBEntity);
                var @this = Unsafe.As<CSoundEventAABBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundEventEntity":
        {
            var innerDecoder = GetDecoder<CSoundEventEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundEventEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundEventEntity);
                var @this = Unsafe.As<CSoundEventEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundEventOBBEntity":
        {
            var innerDecoder = GetDecoder<CSoundEventOBBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundEventOBBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundEventOBBEntity);
                var @this = Unsafe.As<CSoundEventOBBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundEventPathCornerEntity":
        {
            var innerDecoder = GetDecoder<CSoundEventPathCornerEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundEventPathCornerEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundEventPathCornerEntity);
                var @this = Unsafe.As<CSoundEventPathCornerEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundEventSphereEntity":
        {
            var innerDecoder = GetDecoder<CSoundEventSphereEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundEventSphereEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundEventSphereEntity);
                var @this = Unsafe.As<CSoundEventSphereEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetAABBEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetAABBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetAABBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetAABBEntity);
                var @this = Unsafe.As<CSoundOpvarSetAABBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetAutoRoomEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetAutoRoomEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetAutoRoomEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetAutoRoomEntity);
                var @this = Unsafe.As<CSoundOpvarSetAutoRoomEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetOBBEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetOBBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetOBBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetOBBEntity);
                var @this = Unsafe.As<CSoundOpvarSetOBBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetOBBWindEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetOBBWindEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetOBBWindEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetOBBWindEntity);
                var @this = Unsafe.As<CSoundOpvarSetOBBWindEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPathCornerEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPathCornerEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPathCornerEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPathCornerEntity);
                var @this = Unsafe.As<CSoundOpvarSetPathCornerEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPointBase":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPointBase>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPointBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPointBase);
                var @this = Unsafe.As<CSoundOpvarSetPointBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPointEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPointEntity);
                var @this = Unsafe.As<CSoundOpvarSetPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSpotlightEnd":
        {
            var innerDecoder = GetDecoder<CSpotlightEnd>(new SerializerKey(className, 0));
            classType = typeof(CSpotlightEnd);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSpotlightEnd);
                var @this = Unsafe.As<CSpotlightEnd>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSprite":
        {
            var innerDecoder = GetDecoder<CSprite>(new SerializerKey(className, 0));
            classType = typeof(CSprite);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSprite);
                var @this = Unsafe.As<CSprite>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSpriteOriented":
        {
            var innerDecoder = GetDecoder<CSpriteOriented>(new SerializerKey(className, 0));
            classType = typeof(CSpriteOriented);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSpriteOriented);
                var @this = Unsafe.As<CSpriteOriented>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSun":
        {
            var innerDecoder = GetDecoder<CSun>(new SerializerKey(className, 0));
            classType = typeof(CSun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSun);
                var @this = Unsafe.As<CSun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTeam":
        {
            var innerDecoder = GetDecoder<CTeam>(new SerializerKey(className, 0));
            classType = typeof(CTeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTeam);
                var @this = Unsafe.As<CTeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTeamplayRules":
        {
            var innerDecoder = GetDecoder<CTeamplayRules>(new SerializerKey(className, 0));
            classType = typeof(CTeamplayRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTeamplayRules);
                var @this = Unsafe.As<CTeamplayRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTeamRelativeParticleSystem":
        {
            var innerDecoder = GetDecoder<CTeamRelativeParticleSystem>(new SerializerKey(className, 0));
            classType = typeof(CTeamRelativeParticleSystem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTeamRelativeParticleSystem);
                var @this = Unsafe.As<CTeamRelativeParticleSystem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTextureBasedAnimatable":
        {
            var innerDecoder = GetDecoder<CTextureBasedAnimatable>(new SerializerKey(className, 0));
            classType = typeof(CTextureBasedAnimatable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTextureBasedAnimatable);
                var @this = Unsafe.As<CTextureBasedAnimatable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTier3BossAbility":
        {
            var innerDecoder = GetDecoder<CTier3BossAbility>(new SerializerKey(className, 0));
            classType = typeof(CTier3BossAbility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTier3BossAbility);
                var @this = Unsafe.As<CTier3BossAbility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTonemapController2":
        {
            var innerDecoder = GetDecoder<CTonemapController2>(new SerializerKey(className, 0));
            classType = typeof(CTonemapController2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTonemapController2);
                var @this = Unsafe.As<CTonemapController2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerItemShop":
        {
            var innerDecoder = GetDecoder<CTriggerItemShop>(new SerializerKey(className, 0));
            classType = typeof(CTriggerItemShop);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerItemShop);
                var @this = Unsafe.As<CTriggerItemShop>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerModifier":
        {
            var innerDecoder = GetDecoder<CTriggerModifier>(new SerializerKey(className, 0));
            classType = typeof(CTriggerModifier);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerModifier);
                var @this = Unsafe.As<CTriggerModifier>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerMultiple":
        {
            var innerDecoder = GetDecoder<CTriggerMultiple>(new SerializerKey(className, 0));
            classType = typeof(CTriggerMultiple);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerMultiple);
                var @this = Unsafe.As<CTriggerMultiple>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerPhysics":
        {
            var innerDecoder = GetDecoder<CTriggerPhysics>(new SerializerKey(className, 0));
            classType = typeof(CTriggerPhysics);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerPhysics);
                var @this = Unsafe.As<CTriggerPhysics>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerVolume":
        {
            var innerDecoder = GetDecoder<CTriggerVolume>(new SerializerKey(className, 0));
            classType = typeof(CTriggerVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerVolume);
                var @this = Unsafe.As<CTriggerVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWaterBullet":
        {
            var innerDecoder = GetDecoder<CWaterBullet>(new SerializerKey(className, 0));
            classType = typeof(CWaterBullet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWaterBullet);
                var @this = Unsafe.As<CWaterBullet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWorld":
        {
            var innerDecoder = GetDecoder<CWorld>(new SerializerKey(className, 0));
            classType = typeof(CWorld);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWorld);
                var @this = Unsafe.As<CWorld>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "DynamicAbilityValues_t":
        {
            var innerDecoder = GetDecoder<DynamicAbilityValues>(new SerializerKey(className, 0));
            classType = typeof(DynamicAbilityValues);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is DynamicAbilityValues);
                var @this = Unsafe.As<DynamicAbilityValues>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "EntityRenderAttribute_t":
        {
            var innerDecoder = GetDecoder<EntityRenderAttribute>(new SerializerKey(className, 0));
            classType = typeof(EntityRenderAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is EntityRenderAttribute);
                var @this = Unsafe.As<EntityRenderAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "fogparams_t":
        {
            var innerDecoder = GetDecoder<FogParams>(new SerializerKey(className, 0));
            classType = typeof(FogParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is FogParams);
                var @this = Unsafe.As<FogParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "fogplayerparams_t":
        {
            var innerDecoder = GetDecoder<FogPlayerParams>(new SerializerKey(className, 0));
            classType = typeof(FogPlayerParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is FogPlayerParams);
                var @this = Unsafe.As<FogPlayerParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "FullSellPriceAbilityUpgrades_t":
        {
            var innerDecoder = GetDecoder<FullSellPriceAbilityUpgrades>(new SerializerKey(className, 0));
            classType = typeof(FullSellPriceAbilityUpgrades);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is FullSellPriceAbilityUpgrades);
                var @this = Unsafe.As<FullSellPriceAbilityUpgrades>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ice_path_shard_model_desc_t":
        {
            var innerDecoder = GetDecoder<ice_path_shard_model_desc>(new SerializerKey(className, 0));
            classType = typeof(ice_path_shard_model_desc);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ice_path_shard_model_desc);
                var @this = Unsafe.As<ice_path_shard_model_desc>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "IEconItemInterface":
        {
            var innerDecoder = GetDecoder<IEconItemInterface>(new SerializerKey(className, 0));
            classType = typeof(IEconItemInterface);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is IEconItemInterface);
                var @this = Unsafe.As<IEconItemInterface>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCModel":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCModel>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCModel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCModel);
                var @this = Unsafe.As<InfoForResourceTypeCModel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCPostProcessingResource":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCPostProcessingResource>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCPostProcessingResource);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCPostProcessingResource);
                var @this = Unsafe.As<InfoForResourceTypeCPostProcessingResource>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCTextureBase":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCTextureBase>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCTextureBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCTextureBase);
                var @this = Unsafe.As<InfoForResourceTypeCTextureBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeIMaterial2":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeIMaterial2>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeIMaterial2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeIMaterial2);
                var @this = Unsafe.As<InfoForResourceTypeIMaterial2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeIParticleSystemDefinition":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeIParticleSystemDefinition>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeIParticleSystemDefinition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeIParticleSystemDefinition);
                var @this = Unsafe.As<InfoForResourceTypeIParticleSystemDefinition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ISkeletonAnimationController":
        {
            var innerDecoder = GetDecoder<ISkeletonAnimationController>(new SerializerKey(className, 0));
            classType = typeof(ISkeletonAnimationController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ISkeletonAnimationController);
                var @this = Unsafe.As<ISkeletonAnimationController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ItemImbuementPair_t":
        {
            var innerDecoder = GetDecoder<ItemImbuementPair>(new SerializerKey(className, 0));
            classType = typeof(ItemImbuementPair);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ItemImbuementPair);
                var @this = Unsafe.As<ItemImbuementPair>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "LockonTarget_t":
        {
            var innerDecoder = GetDecoder<LockonTarget>(new SerializerKey(className, 0));
            classType = typeof(LockonTarget);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is LockonTarget);
                var @this = Unsafe.As<LockonTarget>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "PhysicsRagdollPose_t":
        {
            var innerDecoder = GetDecoder<PhysicsRagdollPose>(new SerializerKey(className, 0));
            classType = typeof(PhysicsRagdollPose);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is PhysicsRagdollPose);
                var @this = Unsafe.As<PhysicsRagdollPose>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "PlayerDataGlobal_t":
        {
            var innerDecoder = GetDecoder<PlayerDataGlobal>(new SerializerKey(className, 0));
            classType = typeof(PlayerDataGlobal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is PlayerDataGlobal);
                var @this = Unsafe.As<PlayerDataGlobal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "shard_model_desc_t":
        {
            var innerDecoder = GetDecoder<SharedModelDesc>(new SerializerKey(className, 0));
            classType = typeof(SharedModelDesc);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is SharedModelDesc);
                var @this = Unsafe.As<SharedModelDesc>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "sky3dparams_t":
        {
            var innerDecoder = GetDecoder<Sky3DParams>(new SerializerKey(className, 0));
            classType = typeof(Sky3DParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is Sky3DParams);
                var @this = Unsafe.As<Sky3DParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "SoundeventPathCornerPairNetworked_t":
        {
            var innerDecoder = GetDecoder<SoundeventPathCornerPairNetworked>(new SerializerKey(className, 0));
            classType = typeof(SoundeventPathCornerPairNetworked);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is SoundeventPathCornerPairNetworked);
                var @this = Unsafe.As<SoundeventPathCornerPairNetworked>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "StatViewerModifierValues_t":
        {
            var innerDecoder = GetDecoder<StatViewerModifierValues>(new SerializerKey(className, 0));
            classType = typeof(StatViewerModifierValues);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is StatViewerModifierValues);
                var @this = Unsafe.As<StatViewerModifierValues>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "STeamFOWEntity":
        {
            var innerDecoder = GetDecoder<STeamFOWEntity>(new SerializerKey(className, 0));
            classType = typeof(STeamFOWEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is STeamFOWEntity);
                var @this = Unsafe.As<STeamFOWEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "STrooperFOWEntity":
        {
            var innerDecoder = GetDecoder<STrooperFOWEntity>(new SerializerKey(className, 0));
            classType = typeof(STrooperFOWEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is STrooperFOWEntity);
                var @this = Unsafe.As<STrooperFOWEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ViewAngleServerChange_t":
        {
            var innerDecoder = GetDecoder<ViewAngleServerChange>(new SerializerKey(className, 0));
            classType = typeof(ViewAngleServerChange);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ViewAngleServerChange);
                var @this = Unsafe.As<ViewAngleServerChange>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "VPhysicsCollisionAttribute_t":
        {
            var innerDecoder = GetDecoder<VPhysicsCollisionAttribute>(new SerializerKey(className, 0));
            classType = typeof(VPhysicsCollisionAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is VPhysicsCollisionAttribute);
                var @this = Unsafe.As<VPhysicsCollisionAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "WeakPoint_t":
        {
            var innerDecoder = GetDecoder<WeakPoint>(new SerializerKey(className, 0));
            classType = typeof(WeakPoint);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is WeakPoint);
                var @this = Unsafe.As<WeakPoint>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        default:
            classType = null;
            decoder = null;
            return false;
        }
    }

    protected override SendNodeDecoderFactory<T> GetFactory<T>()
    {
        if (typeof(T) == typeof(AbilityResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<AbilityResource>(AbilityResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(AudioParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<AudioParams>(AudioParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Fathom_ReefdwellerHarpoon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Fathom_ReefdwellerHarpoon>(CAbility_Fathom_ReefdwellerHarpoon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Mirage_SandPhantom))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Mirage_SandPhantom>(CAbility_Mirage_SandPhantom.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Mirage_Tornado))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Mirage_Tornado>(CAbility_Mirage_Tornado.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Rutger_CheatDeath))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Rutger_CheatDeath>(CAbility_Rutger_CheatDeath.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Rutger_ForceField))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Rutger_ForceField>(CAbility_Rutger_ForceField.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Rutger_RocketLauncher))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Rutger_RocketLauncher>(CAbility_Rutger_RocketLauncher.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_Affliction))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_Affliction>(CAbility_Synth_Affliction.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_Barrage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_Barrage>(CAbility_Synth_Barrage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_Blitz))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_Blitz>(CAbility_Synth_Blitz.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_Grasp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_Grasp>(CAbility_Synth_Grasp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_PlasmaFlux))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_PlasmaFlux>(CAbility_Synth_PlasmaFlux.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAbility_Synth_Pulse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAbility_Synth_Pulse>(CAbility_Synth_Pulse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAI_BaseNPC))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAI_BaseNPC>(CAI_BaseNPC.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAI_CitadelNPC))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAI_CitadelNPC>(CAI_CitadelNPC.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAnimGraph2TestProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAnimGraph2TestProp>(CAnimGraph2TestProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAnimGraphNetworkedVariables))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAnimGraphNetworkedVariables>(CAnimGraphNetworkedVariables.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAssignedLaneParticle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAssignedLaneParticle>(CAssignedLaneParticle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeContainer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeContainer>(CAttributeContainer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeList))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeList>(CAttributeList.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeManager>(CAttributeManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBarnLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBarnLight>(CBarnLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraph>(CBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraphController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraphController>(CBaseAnimGraphController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseButton))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseButton>(CBaseButton.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseClientUIEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseClientUIEntity>(CBaseClientUIEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCombatCharacter))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCombatCharacter>(CBaseCombatCharacter.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseDoor>(CBaseDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseEntity>(CBaseEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFire>(CBaseFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFlex))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFlex>(CBaseFlex.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseModelEntity>(CBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerController>(CBasePlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerPawn>(CBasePlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerWeapon>(CBasePlayerWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseProp>(CBaseProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePropDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePropDoor>(CBasePropDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseToggle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseToggle>(CBaseToggle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseTrigger>(CBaseTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBeam>(CBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponent>(CBodyComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseAnimGraph>(CBodyComponentBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseModelEntity>(CBodyComponentBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentPoint))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentPoint>(CBodyComponentPoint.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentSkeletonInstance>(CBodyComponentSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakable>(CBreakable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakableProp>(CBreakableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Afterburn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Afterburn>(CCitadel_Ability_Afterburn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Astro_Rifle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Astro_Rifle>(CCitadel_Ability_Astro_Rifle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Astro_Shotgun_Toggle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Astro_Shotgun_Toggle>(CCitadel_Ability_Astro_Shotgun_Toggle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_BaseHeldItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_BaseHeldItem>(CCitadel_Ability_BaseHeldItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bebop_LaserBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bebop_LaserBeam>(CCitadel_Ability_Bebop_LaserBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_BloodBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_BloodBomb>(CCitadel_Ability_BloodBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bomber_Ability02))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bomber_Ability02>(CCitadel_Ability_Bomber_Ability02.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bomber_Ability03))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bomber_Ability03>(CCitadel_Ability_Bomber_Ability03.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bomber_ULT))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bomber_ULT>(CCitadel_Ability_Bomber_ULT.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bounce_Pad))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bounce_Pad>(CCitadel_Ability_Bounce_Pad.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bull_Charge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bull_Charge>(CCitadel_Ability_Bull_Charge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bull_Heal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bull_Heal>(CCitadel_Ability_Bull_Heal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Bull_Leap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Bull_Leap>(CCitadel_Ability_Bull_Leap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_BulletFlurry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_BulletFlurry>(CCitadel_Ability_BulletFlurry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Burrow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Burrow>(CCitadel_Ability_Burrow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Cadence_Anthem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Cadence_Anthem>(CCitadel_Ability_Cadence_Anthem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Cadence_Crescendo))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Cadence_Crescendo>(CCitadel_Ability_Cadence_Crescendo.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Cadence_GrandFinale))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Cadence_GrandFinale>(CCitadel_Ability_Cadence_GrandFinale.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Cadence_Lullaby))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Cadence_Lullaby>(CCitadel_Ability_Cadence_Lullaby.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Cadence_SilenceContraptions))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Cadence_SilenceContraptions>(CCitadel_Ability_Cadence_SilenceContraptions.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_CardToss))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_CardToss>(CCitadel_Ability_CardToss.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Charged_Bomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Charged_Bomb>(CCitadel_Ability_Charged_Bomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ChargedShot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ChargedShot>(CCitadel_Ability_ChargedShot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ChargedTackle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ChargedTackle>(CCitadel_Ability_ChargedTackle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Chrono_KineticCarbine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Chrono_KineticCarbine>(CCitadel_Ability_Chrono_KineticCarbine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Chrono_PulseGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Chrono_PulseGrenade>(CCitadel_Ability_Chrono_PulseGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Chrono_TimeWall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Chrono_TimeWall>(CCitadel_Ability_Chrono_TimeWall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ChronoSwap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ChronoSwap>(CCitadel_Ability_ChronoSwap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Climb_Rope))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Climb_Rope>(CCitadel_Ability_Climb_Rope.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Crackshot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Crackshot>(CCitadel_Ability_Crackshot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_CrowdControl))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_CrowdControl>(CCitadel_Ability_CrowdControl.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Dash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Dash>(CCitadel_Ability_Dash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_DeathTax))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_DeathTax>(CCitadel_Ability_DeathTax.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Disruptive_Charge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Disruptive_Charge>(CCitadel_Ability_Disruptive_Charge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Dust_Storm))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Dust_Storm>(CCitadel_Ability_Dust_Storm.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Empty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Empty>(CCitadel_Ability_Empty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ExplosiveBarrel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ExplosiveBarrel>(CCitadel_Ability_ExplosiveBarrel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Fathom_Breach))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Fathom_Breach>(CCitadel_Ability_Fathom_Breach.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Fathom_ScaldingSpray))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Fathom_ScaldingSpray>(CCitadel_Ability_Fathom_ScaldingSpray.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Fealty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Fealty>(CCitadel_Ability_Fealty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_FireBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_FireBomb>(CCitadel_Ability_FireBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_FissureWall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_FissureWall>(CCitadel_Ability_FissureWall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_FlameDash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_FlameDash>(CCitadel_Ability_FlameDash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_FlyingStrike))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_FlyingStrike>(CCitadel_Ability_FlyingStrike.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GangActivity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GangActivity>(CCitadel_Ability_GangActivity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GangActivity_Cancel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GangActivity_Cancel>(CCitadel_Ability_GangActivity_Cancel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GenericPerson_1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GenericPerson_1>(CCitadel_Ability_GenericPerson_1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GenericPerson_2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GenericPerson_2>(CCitadel_Ability_GenericPerson_2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GenericPerson_3))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GenericPerson_3>(CCitadel_Ability_GenericPerson_3.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GenericPerson_4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GenericPerson_4>(CCitadel_Ability_GenericPerson_4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Ghost_BloodShards))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Ghost_BloodShards>(CCitadel_Ability_Ghost_BloodShards.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GoldenIdol))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GoldenIdol>(CCitadel_Ability_GoldenIdol.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GooBowlingBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GooBowlingBall>(CCitadel_Ability_GooBowlingBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GooGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GooGrenade>(CCitadel_Ability_GooGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Gravity_Lasso))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Gravity_Lasso>(CCitadel_Ability_Gravity_Lasso.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_GuidedArrow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_GuidedArrow>(CCitadel_Ability_GuidedArrow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HatTrick))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HatTrick>(CCitadel_Ability_HatTrick.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Haze_StackingDamage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Haze_StackingDamage>(CCitadel_Ability_Haze_StackingDamage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HealingSlash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HealingSlash>(CCitadel_Ability_HealingSlash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HealthSwap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HealthSwap>(CCitadel_Ability_HealthSwap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HighAlert))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HighAlert>(CCitadel_Ability_HighAlert.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HoldMelee))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HoldMelee>(CCitadel_Ability_HoldMelee.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Hook))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Hook>(CCitadel_Ability_Hook.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Hornet_Chain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Hornet_Chain>(CCitadel_Ability_Hornet_Chain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Hornet_Snipe))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Hornet_Snipe>(CCitadel_Ability_Hornet_Snipe.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HornetLeap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HornetLeap>(CCitadel_Ability_HornetLeap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HornetMark))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HornetMark>(CCitadel_Ability_HornetMark.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_HornetSting))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_HornetSting>(CCitadel_Ability_HornetSting.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_IceBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_IceBeam>(CCitadel_Ability_IceBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_IceDome))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_IceDome>(CCitadel_Ability_IceDome.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_IceGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_IceGrenade>(CCitadel_Ability_IceGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_IcePath))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_IcePath>(CCitadel_Ability_IcePath.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ImmobilizeTrap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ImmobilizeTrap>(CCitadel_Ability_ImmobilizeTrap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_IncendiaryProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_IncendiaryProjectile>(CCitadel_Ability_IncendiaryProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_InfinitySlash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_InfinitySlash>(CCitadel_Ability_InfinitySlash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Intimidate))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Intimidate>(CCitadel_Ability_Intimidate.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Jump))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Jump>(CCitadel_Ability_Jump.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Kobun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Kobun>(CCitadel_Ability_Kobun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Lash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Lash>(CCitadel_Ability_Lash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Lash_Flog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Lash_Flog>(CCitadel_Ability_Lash_Flog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Lash_Ultimate))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Lash_Ultimate>(CCitadel_Ability_Lash_Ultimate.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_LashDownStrike))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_LashDownStrike>(CCitadel_Ability_LashDownStrike.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_LifeDrain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_LifeDrain>(CCitadel_Ability_LifeDrain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_LightningBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_LightningBall>(CCitadel_Ability_LightningBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_LockDown))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_LockDown>(CCitadel_Ability_LockDown.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_MageWalk))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_MageWalk>(CCitadel_Ability_MageWalk.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Magician_AnimalCurse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Magician_AnimalCurse>(CCitadel_Ability_Magician_AnimalCurse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Magician_MagicBolt))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Magician_MagicBolt>(CCitadel_Ability_Magician_MagicBolt.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Magician_ShadowClone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Magician_ShadowClone>(CCitadel_Ability_Magician_ShadowClone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Mantle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Mantle>(CCitadel_Ability_Mantle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_MedicHeal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_MedicHeal>(CCitadel_Ability_MedicHeal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Melee_Base))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Melee_Base>(CCitadel_Ability_Melee_Base.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_MeleeParry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_MeleeParry>(CCitadel_Ability_MeleeParry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Mirage_FireBeetles))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Mirage_FireBeetles>(CCitadel_Ability_Mirage_FireBeetles.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Mirage_Teleport))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Mirage_Teleport>(CCitadel_Ability_Mirage_Teleport.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_MobileResupply))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_MobileResupply>(CCitadel_Ability_MobileResupply.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Nano_Pounce))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Nano_Pounce>(CCitadel_Ability_Nano_Pounce.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Nano_Pounce_Instant))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Nano_Pounce_Instant>(CCitadel_Ability_Nano_Pounce_Instant.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Nano_Shadow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Nano_Shadow>(CCitadel_Ability_Nano_Shadow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Nikuman))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Nikuman>(CCitadel_Ability_Nikuman.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PassiveBeefy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PassiveBeefy>(CCitadel_Ability_PassiveBeefy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Perched_Predator))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Perched_Predator>(CCitadel_Ability_Perched_Predator.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PoisonBullets))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PoisonBullets>(CCitadel_Ability_PoisonBullets.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PowerJump))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PowerJump>(CCitadel_Ability_PowerJump.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PowerSlash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PowerSlash>(CCitadel_Ability_PowerSlash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PowerSurge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PowerSurge>(CCitadel_Ability_PowerSurge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PrimaryWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PrimaryWeapon>(CCitadel_Ability_PrimaryWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PrimaryWeapon_BeamWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PrimaryWeapon_BeamWeapon>(CCitadel_Ability_PrimaryWeapon_BeamWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PrimaryWeapon_Bebop))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PrimaryWeapon_Bebop>(CCitadel_Ability_PrimaryWeapon_Bebop.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PrimaryWeapon_Cadence))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PrimaryWeapon_Cadence>(CCitadel_Ability_PrimaryWeapon_Cadence.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PrimaryWeapon_Empty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PrimaryWeapon_Empty>(CCitadel_Ability_PrimaryWeapon_Empty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ProjectMind))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ProjectMind>(CCitadel_Ability_ProjectMind.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Protection_Racket))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Protection_Racket>(CCitadel_Ability_Protection_Racket.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ProximityRitual))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ProximityRitual>(CCitadel_Ability_ProximityRitual.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PsychicDagger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PsychicDagger>(CCitadel_Ability_PsychicDagger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PsychicLift))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PsychicLift>(CCitadel_Ability_PsychicLift.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_PsychicPulse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_PsychicPulse>(CCitadel_Ability_PsychicPulse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Puddle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Puddle>(CCitadel_Ability_Puddle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_RapidFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_RapidFire>(CCitadel_Ability_RapidFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_RestorativeGoo))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_RestorativeGoo>(CCitadel_Ability_RestorativeGoo.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_RiotProtocol))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_RiotProtocol>(CCitadel_Ability_RiotProtocol.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_RocketBarrage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_RocketBarrage>(CCitadel_Ability_RocketBarrage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_RocketLauncher))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_RocketLauncher>(CCitadel_Ability_RocketLauncher.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Rolling_FireBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Rolling_FireBall>(CCitadel_Ability_Rolling_FireBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Running_Decoy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Running_Decoy>(CCitadel_Ability_Running_Decoy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Rutger_Pulse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Rutger_Pulse>(CCitadel_Ability_Rutger_Pulse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SelfVacuum))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SelfVacuum>(CCitadel_Ability_SelfVacuum.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SettingSun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SettingSun>(CCitadel_Ability_SettingSun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shakedown_Target))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shakedown_Target>(CCitadel_Ability_Shakedown_Target.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shield>(CCitadel_Ability_Shield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShieldedSentry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShieldedSentry>(CCitadel_Ability_ShieldedSentry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShieldGuy_Ability01))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShieldGuy_Ability01>(CCitadel_Ability_ShieldGuy_Ability01.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShieldGuy_Ability02))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShieldGuy_Ability02>(CCitadel_Ability_ShieldGuy_Ability02.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShieldGuy_Ability03))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShieldGuy_Ability03>(CCitadel_Ability_ShieldGuy_Ability03.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShieldGuy_Ability04))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShieldGuy_Ability04>(CCitadel_Ability_ShieldGuy_Ability04.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shiv_Defer_Damage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shiv_Defer_Damage>(CCitadel_Ability_Shiv_Defer_Damage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shiv_KillingBlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shiv_KillingBlow>(CCitadel_Ability_Shiv_KillingBlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShivDagger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShivDagger>(CCitadel_Ability_ShivDagger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShivDash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShivDash>(CCitadel_Ability_ShivDash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ShivWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ShivWeapon>(CCitadel_Ability_ShivWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shotgun_Astro))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shotgun_Astro>(CCitadel_Ability_Shotgun_Astro.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Shotgun_Astro_Backwards))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Shotgun_Astro_Backwards>(CCitadel_Ability_Shotgun_Astro_Backwards.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SleepBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SleepBomb>(CCitadel_Ability_SleepBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SleepDagger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SleepDagger>(CCitadel_Ability_SleepDagger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Slide))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Slide>(CCitadel_Ability_Slide.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SmokeBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SmokeBomb>(CCitadel_Ability_SmokeBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SnakeDash))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SnakeDash>(CCitadel_Ability_SnakeDash.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Spinning_Blade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Spinning_Blade>(CCitadel_Ability_Spinning_Blade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Sprint))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Sprint>(CCitadel_Ability_Sprint.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_StaticCharge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_StaticCharge>(CCitadel_Ability_StaticCharge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_StickyBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_StickyBomb>(CCitadel_Ability_StickyBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Stomp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Stomp>(CCitadel_Ability_Stomp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_StormCloud))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_StormCloud>(CCitadel_Ability_StormCloud.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SummonGangster))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SummonGangster>(CCitadel_Ability_SummonGangster.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SuperNeutralCharge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SuperNeutralCharge>(CCitadel_Ability_SuperNeutralCharge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SuperNeutralIncendiary))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SuperNeutralIncendiary>(CCitadel_Ability_SuperNeutralIncendiary.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_SuperNeutralShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_SuperNeutralShield>(CCitadel_Ability_SuperNeutralShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TangoTether))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TangoTether>(CCitadel_Ability_TangoTether.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TangoTether_Trigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TangoTether_Trigger>(CCitadel_Ability_TangoTether_Trigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Targetdummy_1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Targetdummy_1>(CCitadel_Ability_Targetdummy_1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Targetdummy_2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Targetdummy_2>(CCitadel_Ability_Targetdummy_2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Targetdummy_3))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Targetdummy_3>(CCitadel_Ability_Targetdummy_3.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Targetdummy_4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Targetdummy_4>(CCitadel_Ability_Targetdummy_4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Targetdummy_Inherent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Targetdummy_Inherent>(CCitadel_Ability_Targetdummy_Inherent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TargetPractice))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TargetPractice>(CCitadel_Ability_TargetPractice.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Teleport))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Teleport>(CCitadel_Ability_Teleport.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TeleportToGangster))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TeleportToGangster>(CCitadel_Ability_TeleportToGangster.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tenacity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tenacity>(CCitadel_Ability_Tenacity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tengu_AirLift))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tengu_AirLift>(CCitadel_Ability_Tengu_AirLift.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tengu_StoneForm))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tengu_StoneForm>(CCitadel_Ability_Tengu_StoneForm.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tengu_Urn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tengu_Urn>(CCitadel_Ability_Tengu_Urn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ThrowSand))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ThrowSand>(CCitadel_Ability_ThrowSand.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Thumper_1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Thumper_1>(CCitadel_Ability_Thumper_1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Thumper_2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Thumper_2>(CCitadel_Ability_Thumper_2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Thumper_3))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Thumper_3>(CCitadel_Ability_Thumper_3.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Thumper_4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Thumper_4>(CCitadel_Ability_Thumper_4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tier2Boss_LaserBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tier2Boss_LaserBeam>(CCitadel_Ability_Tier2Boss_LaserBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tier2Boss_RocketBarrage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tier2Boss_RocketBarrage>(CCitadel_Ability_Tier2Boss_RocketBarrage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tier2Boss_Stomp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tier2Boss_Stomp>(CCitadel_Ability_Tier2Boss_Stomp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tier3Boss_DamagePulse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tier3Boss_DamagePulse>(CCitadel_Ability_Tier3Boss_DamagePulse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tier3Boss_LaserBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tier3Boss_LaserBeam>(CCitadel_Ability_Tier3Boss_LaserBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_Breach))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_Breach>(CCitadel_Ability_Tokamak_Breach.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_CrimsonCannon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_CrimsonCannon>(CCitadel_Ability_Tokamak_CrimsonCannon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_DyingStar))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_DyingStar>(CCitadel_Ability_Tokamak_DyingStar.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_HeatSinks))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_HeatSinks>(CCitadel_Ability_Tokamak_HeatSinks.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_HeatSinks_Inherent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_HeatSinks_Inherent>(CCitadel_Ability_Tokamak_HeatSinks_Inherent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_HotShot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_HotShot>(CCitadel_Ability_Tokamak_HotShot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Tokamak_Radiance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Tokamak_Radiance>(CCitadel_Ability_Tokamak_Radiance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Trappers_Bolo))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Trappers_Bolo>(CCitadel_Ability_Trappers_Bolo.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TriggerTower))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TriggerTower>(CCitadel_Ability_TriggerTower.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TrooperBossGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TrooperBossGrenade>(CCitadel_Ability_TrooperBossGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TrooperGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TrooperGrenade>(CCitadel_Ability_TrooperGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TrooperNeutralGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TrooperNeutralGrenade>(CCitadel_Ability_TrooperNeutralGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TrooperZipLine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TrooperZipLine>(CCitadel_Ability_TrooperZipLine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_TurretClone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_TurretClone>(CCitadel_Ability_TurretClone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_UltCombo))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_UltCombo>(CCitadel_Ability_UltCombo.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Uppercut))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Uppercut>(CCitadel_Ability_Uppercut.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Vandal_Ability03))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Vandal_Ability03>(CCitadel_Ability_Vandal_Ability03.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Vandal_Pillar))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Vandal_Pillar>(CCitadel_Ability_Vandal_Pillar.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_VandalOverflow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_VandalOverflow>(CCitadel_Ability_VandalOverflow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_VandalSurge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_VandalSurge>(CCitadel_Ability_VandalSurge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Viper_Ability04))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Viper_Ability04>(CCitadel_Ability_Viper_Ability04.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Viper_DebuffDagger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Viper_DebuffDagger>(CCitadel_Ability_Viper_DebuffDagger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ViperHookblade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ViperHookblade>(CCitadel_Ability_ViperHookblade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ViperVenom))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ViperVenom>(CCitadel_Ability_ViperVenom.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Viscous_Telepunch))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Viscous_Telepunch>(CCitadel_Ability_Viscous_Telepunch.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ViscousWeapon_Alt))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ViscousWeapon_Alt>(CCitadel_Ability_ViscousWeapon_Alt.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_VoidSphere))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_VoidSphere>(CCitadel_Ability_VoidSphere.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Weapon_BossTier2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Weapon_BossTier2>(CCitadel_Ability_Weapon_BossTier2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Weapon_BossTier3))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Weapon_BossTier3>(CCitadel_Ability_Weapon_BossTier3.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_WingBlast))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_WingBlast>(CCitadel_Ability_WingBlast.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Wraith_RapidFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Wraith_RapidFire>(CCitadel_Ability_Wraith_RapidFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Wrecker_Salvage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Wrecker_Salvage>(CCitadel_Ability_Wrecker_Salvage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Wrecker_Ultimate))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Wrecker_Ultimate>(CCitadel_Ability_Wrecker_Ultimate.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_WreckerScrapBlast))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_WreckerScrapBlast>(CCitadel_Ability_WreckerScrapBlast.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_WreckerTeleport))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_WreckerTeleport>(CCitadel_Ability_WreckerTeleport.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_WreckingBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_WreckingBall>(CCitadel_Ability_WreckingBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_WreckingBallThrow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_WreckingBallThrow>(CCitadel_Ability_WreckingBallThrow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_Yakuza_Shakedown))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_Yakuza_Shakedown>(CCitadel_Ability_Yakuza_Shakedown.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ZipLine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ZipLine>(CCitadel_Ability_ZipLine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ability_ZipLine_Boost))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ability_ZipLine_Boost>(CCitadel_Ability_ZipLine_Boost.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_AbilityLifeSteal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_AbilityLifeSteal>(CCitadel_ArmorUpgrade_AbilityLifeSteal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_AblativeCoat))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_AblativeCoat>(CCitadel_ArmorUpgrade_AblativeCoat.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_ActiveBulletShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_ActiveBulletShield>(CCitadel_ArmorUpgrade_ActiveBulletShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_BulletArmorReductionAura))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_BulletArmorReductionAura>(CCitadel_ArmorUpgrade_BulletArmorReductionAura.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_CloakingDevice))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_CloakingDevice>(CCitadel_ArmorUpgrade_CloakingDevice.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_CloakingDeviceActive))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_CloakingDeviceActive>(CCitadel_ArmorUpgrade_CloakingDeviceActive.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_Colossus))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_Colossus>(CCitadel_ArmorUpgrade_Colossus.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_DamageRecycler))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_DamageRecycler>(CCitadel_ArmorUpgrade_DamageRecycler.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_DebuffReducer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_DebuffReducer>(CCitadel_ArmorUpgrade_DebuffReducer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_DoubleJump))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_DoubleJump>(CCitadel_ArmorUpgrade_DoubleJump.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_Frenzy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_Frenzy>(CCitadel_ArmorUpgrade_Frenzy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_HealOnLevel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_HealOnLevel>(CCitadel_ArmorUpgrade_HealOnLevel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_HighImpactArmor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_HighImpactArmor>(CCitadel_ArmorUpgrade_HighImpactArmor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_MetalSkin))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_MetalSkin>(CCitadel_ArmorUpgrade_MetalSkin.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_PersonalRejuvenator))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_PersonalRejuvenator>(CCitadel_ArmorUpgrade_PersonalRejuvenator.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_RegeneratingBulletShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_RegeneratingBulletShield>(CCitadel_ArmorUpgrade_RegeneratingBulletShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_RegenerativeArmor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_RegenerativeArmor>(CCitadel_ArmorUpgrade_RegenerativeArmor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_ReturnFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_ReturnFire>(CCitadel_ArmorUpgrade_ReturnFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_SlowImmunity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_SlowImmunity>(CCitadel_ArmorUpgrade_SlowImmunity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_SpellShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_SpellShield>(CCitadel_ArmorUpgrade_SpellShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_Stimpak))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_Stimpak>(CCitadel_ArmorUpgrade_Stimpak.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_ArmorUpgrade_VexBarrier))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_ArmorUpgrade_VexBarrier>(CCitadel_ArmorUpgrade_VexBarrier.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Bounce_Pad))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Bounce_Pad>(CCitadel_Bounce_Pad.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_BreakableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_BreakableProp>(CCitadel_BreakableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_BreakablePropGoldPickup))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_BreakablePropGoldPickup>(CCitadel_BreakablePropGoldPickup.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_BreakablePropHealthPickup))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_BreakablePropHealthPickup>(CCitadel_BreakablePropHealthPickup.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_BreakablePropModifierPickup))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_BreakablePropModifierPickup>(CCitadel_BreakablePropModifierPickup.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_BreakablePropPickup))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_BreakablePropPickup>(CCitadel_BreakablePropPickup.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_CatAnimating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_CatAnimating>(CCitadel_CatAnimating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_DeployablePreview))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_DeployablePreview>(CCitadel_DeployablePreview.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Destroyable_Building))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Destroyable_Building>(CCitadel_Destroyable_Building.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_DynamicProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_DynamicProp>(CCitadel_DynamicProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_FissureWall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_FissureWall>(CCitadel_FissureWall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_GrandFinaleStage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_GrandFinaleStage>(CCitadel_GrandFinaleStage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_HeroTestOrbSpawner))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_HeroTestOrbSpawner>(CCitadel_HeroTestOrbSpawner.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ice_Dome_Blocker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ice_Dome_Blocker>(CCitadel_Ice_Dome_Blocker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Ice_Path_Shard_Physics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Ice_Path_Shard_Physics>(CCitadel_Ice_Path_Shard_Physics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item>(CCitadel_Item.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_ActiveReload))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_ActiveReload>(CCitadel_Item_ActiveReload.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_AOE_Tech_Shield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_AOE_Tech_Shield>(CCitadel_Item_AOE_Tech_Shield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_AOERoot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_AOERoot>(CCitadel_Item_AOERoot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Aura_Base))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Aura_Base>(CCitadel_Item_Aura_Base.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_BaseProjectileAOEModifier))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_BaseProjectileAOEModifier>(CCitadel_Item_BaseProjectileAOEModifier.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Bubble))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Bubble>(CCitadel_Item_Bubble.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Camouflage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Camouflage>(CCitadel_Item_Camouflage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Charge_Mastery))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Charge_Mastery>(CCitadel_Item_Charge_Mastery.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_CheatDeath))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_CheatDeath>(CCitadel_Item_CheatDeath.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_ColdFront))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_ColdFront>(CCitadel_Item_ColdFront.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_ComboBreaker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_ComboBreaker>(CCitadel_Item_ComboBreaker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Containment))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Containment>(CCitadel_Item_Containment.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Disarm))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Disarm>(CCitadel_Item_Disarm.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_DivinersKevlar))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_DivinersKevlar>(CCitadel_Item_DivinersKevlar.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_DPS_Aura))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_DPS_Aura>(CCitadel_Item_DPS_Aura.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Empty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Empty>(CCitadel_Item_Empty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_HealthRegenAura))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_HealthRegenAura>(CCitadel_Item_HealthRegenAura.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Intensifying_Clip))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Intensifying_Clip>(CCitadel_Item_Intensifying_Clip.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_ModDisruptor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_ModDisruptor>(CCitadel_Item_ModDisruptor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_PhantomStrike))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_PhantomStrike>(CCitadel_Item_PhantomStrike.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_PowerShard))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_PowerShard>(CCitadel_Item_PowerShard.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_QuickSilver))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_QuickSilver>(CCitadel_Item_QuickSilver.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Refresher))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Refresher>(CCitadel_Item_Refresher.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_RejuvTrackingProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_RejuvTrackingProjectile>(CCitadel_Item_RejuvTrackingProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_RescueBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_RescueBeam>(CCitadel_Item_RescueBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Savior))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Savior>(CCitadel_Item_Savior.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_SelfBuffModifier))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_SelfBuffModifier>(CCitadel_Item_SelfBuffModifier.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_SingleTargetStun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_SingleTargetStun>(CCitadel_Item_SingleTargetStun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_Stasis_Bomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_Stasis_Bomb>(CCitadel_Item_Stasis_Bomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_TechCleave))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_TechCleave>(CCitadel_Item_TechCleave.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_TechDamagePulse))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_TechDamagePulse>(CCitadel_Item_TechDamagePulse.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_TrackingProjectileApplyModifier))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_TrackingProjectileApplyModifier>(CCitadel_Item_TrackingProjectileApplyModifier.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Item_WarpStone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Item_WarpStone>(CCitadel_Item_WarpStone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_MobileResupply))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_MobileResupply>(CCitadel_MobileResupply.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Nano_Predatory_Statue))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Nano_Predatory_Statue>(CCitadel_Nano_Predatory_Statue.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_PestilenceDroneDispenser))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_PestilenceDroneDispenser>(CCitadel_PestilenceDroneDispenser.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_PickupItemSpawner))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_PickupItemSpawner>(CCitadel_PickupItemSpawner.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Archer_ChargedShot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Archer_ChargedShot>(CCitadel_Projectile_Archer_ChargedShot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Bebop_Hook))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Bebop_Hook>(CCitadel_Projectile_Bebop_Hook.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_BloodBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_BloodBomb>(CCitadel_Projectile_BloodBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Cyclone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Cyclone>(CCitadel_Projectile_Cyclone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_DustStorm))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_DustStorm>(CCitadel_Projectile_DustStorm.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Guided_Arrow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Guided_Arrow>(CCitadel_Projectile_Guided_Arrow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_HookBlade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_HookBlade>(CCitadel_Projectile_HookBlade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Petrify))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Petrify>(CCitadel_Projectile_Petrify.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Pillar))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Pillar>(CCitadel_Projectile_Pillar.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_RocketLauncher_Rocket))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_RocketLauncher_Rocket>(CCitadel_Projectile_RocketLauncher_Rocket.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_SettingSun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_SettingSun>(CCitadel_Projectile_SettingSun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Tier2Boss_RocketBarrage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Tier2Boss_RocketBarrage>(CCitadel_Projectile_Tier2Boss_RocketBarrage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Viscous_GooGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Viscous_GooGrenade>(CCitadel_Projectile_Viscous_GooGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_Wrecker_Teleport))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_Wrecker_Teleport>(CCitadel_Projectile_Wrecker_Teleport.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Projectile_WreckingBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Projectile_WreckingBall>(CCitadel_Projectile_WreckingBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_RestorativeGooCube))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_RestorativeGooCube>(CCitadel_RestorativeGooCube.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Shield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Shield>(CCitadel_Shield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_TechUpgrade_Infuser))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_TechUpgrade_Infuser>(CCitadel_TechUpgrade_Infuser.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_TechUpgrade_SuperAcolyteGloves))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_TechUpgrade_SuperAcolyteGloves>(CCitadel_TechUpgrade_SuperAcolyteGloves.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_AerialAssault))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_AerialAssault>(CCitadel_Upgrade_AerialAssault.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_AmmoScavenger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_AmmoScavenger>(CCitadel_Upgrade_AmmoScavenger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_MagicCarpet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_MagicCarpet>(CCitadel_Upgrade_MagicCarpet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_OverdriveClip))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_OverdriveClip>(CCitadel_Upgrade_OverdriveClip.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_StabilizingTripod))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_StabilizingTripod>(CCitadel_Upgrade_StabilizingTripod.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_Upgrade_WeaponPowerForHealth))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_Upgrade_WeaponPowerForHealth>(CCitadel_Upgrade_WeaponPowerForHealth.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_UtilityUpgrade_AOESmokeBomb))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_UtilityUpgrade_AOESmokeBomb>(CCitadel_UtilityUpgrade_AOESmokeBomb.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_UtilityUpgrade_DebuffImmunity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_UtilityUpgrade_DebuffImmunity>(CCitadel_UtilityUpgrade_DebuffImmunity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_UtilityUpgrade_HealthNova))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_UtilityUpgrade_HealthNova>(CCitadel_UtilityUpgrade_HealthNova.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_UtilityUpgrade_RocketBooster))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_UtilityUpgrade_RocketBooster>(CCitadel_UtilityUpgrade_RocketBooster.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_UtilityUpgrade_RocketBoots))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_UtilityUpgrade_RocketBoots>(CCitadel_UtilityUpgrade_RocketBoots.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_BansheeSlugs))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_BansheeSlugs>(CCitadel_WeaponUpgrade_BansheeSlugs.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_BurstFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_BurstFire>(CCitadel_WeaponUpgrade_BurstFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_FireRateAura))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_FireRateAura>(CCitadel_WeaponUpgrade_FireRateAura.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_GlassCannon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_GlassCannon>(CCitadel_WeaponUpgrade_GlassCannon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_Headhunter))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_Headhunter>(CCitadel_WeaponUpgrade_Headhunter.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_HeadshotBooster))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_HeadshotBooster>(CCitadel_WeaponUpgrade_HeadshotBooster.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_InstantReload))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_InstantReload>(CCitadel_WeaponUpgrade_InstantReload.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_Ricochet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_Ricochet>(CCitadel_WeaponUpgrade_Ricochet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_SiphonBullets))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_SiphonBullets>(CCitadel_WeaponUpgrade_SiphonBullets.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_SurgingPower))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_SurgingPower>(CCitadel_WeaponUpgrade_SurgingPower.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadel_WeaponUpgrade_WeaponEater))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadel_WeaponUpgrade_WeaponEater>(CCitadel_WeaponUpgrade_WeaponEater.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelAbilityComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelAbilityComponent>(CCitadelAbilityComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelAnimatingModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelAnimatingModelEntity>(CCitadelAnimatingModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelAutoScaledTime))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelAutoScaledTime>(CCitadelAutoScaledTime.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseAbility>(CCitadelBaseAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseAbilityServerOnly))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseAbilityServerOnly>(CCitadelBaseAbilityServerOnly.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseDashCastAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseDashCastAbility>(CCitadelBaseDashCastAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseLockonAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseLockonAbility>(CCitadelBaseLockonAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseShivAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseShivAbility>(CCitadelBaseShivAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseTriggerAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseTriggerAbility>(CCitadelBaseTriggerAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBaseYamatoAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBaseYamatoAbility>(CCitadelBaseYamatoAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBoomerangProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBoomerangProjectile>(CCitadelBoomerangProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelBulletTimeWarp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelBulletTimeWarp>(CCitadelBulletTimeWarp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelCatapultTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelCatapultTrigger>(CCitadelCatapultTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelClimbRopeTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelClimbRopeTrigger>(CCitadelClimbRopeTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelControlPointTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelControlPointTrigger>(CCitadelControlPointTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelGameRules>(CCitadelGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelGameRulesProxy>(CCitadelGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelHeroComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelHeroComponent>(CCitadelHeroComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelHornetStingProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelHornetStingProjectile>(CCitadelHornetStingProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelIdolReturnTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelIdolReturnTrigger>(CCitadelIdolReturnTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelItemPickup))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelItemPickup>(CCitadelItemPickup.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelItemPickupIdol))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelItemPickupIdol>(CCitadelItemPickupIdol.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelItemPickupRejuv))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelItemPickupRejuv>(CCitadelItemPickupRejuv.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelItemPickupRejuvHeroTest))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelItemPickupRejuvHeroTest>(CCitadelItemPickupRejuvHeroTest.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelMinimapBoundary))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelMinimapBoundary>(CCitadelMinimapBoundary.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelMinimapComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelMinimapComponent>(CCitadelMinimapComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelModelEntity>(CCitadelModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelObserver_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelObserver_MovementServices>(CCitadelObserver_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelObserverPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelObserverPawn>(CCitadelObserverPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPayload))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPayload>(CCitadelPayload.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayer_CameraServices>(CCitadelPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayer_MovementServices>(CCitadelPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayer_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayer_ObserverServices>(CCitadelPlayer_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayerBotNPCBrain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayerBotNPCBrain>(CCitadelPlayerBotNPCBrain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayerClipComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayerClipComponent>(CCitadelPlayerClipComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayerController>(CCitadelPlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayerPawn>(CCitadelPlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPlayerPawnBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPlayerPawnBase>(CCitadelPlayerPawnBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPositionHomingProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPositionHomingProjectile>(CCitadelPositionHomingProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelPreviewPlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelPreviewPlayerController>(CCitadelPreviewPlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelProjectile>(CCitadelProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelProjectile_ImmobilizeTrap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelProjectile_ImmobilizeTrap>(CCitadelProjectile_ImmobilizeTrap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelRegenComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelRegenComponent>(CCitadelRegenComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelSoundOpvarSetOBB))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelSoundOpvarSetOBB>(CCitadelSoundOpvarSetOBB.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelSpawnBlocker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelSpawnBlocker>(CCitadelSpawnBlocker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelSpectateDirectedCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelSpectateDirectedCamera>(CCitadelSpectateDirectedCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelSpectateNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelSpectateNode>(CCitadelSpectateNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelTeam>(CCitadelTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelTeleportTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelTeleportTrigger>(CCitadelTeleportTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelTrackedProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelTrackedProjectile>(CCitadelTrackedProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelTrooperMinimap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelTrooperMinimap>(CCitadelTrooperMinimap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelViscousBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelViscousBall>(CCitadelViscousBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelZipLineNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelZipLineNode>(CCitadelZipLineNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCitadelZiplinePath))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCitadelZiplinePath>(CCitadelZiplinePath.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCollisionProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCollisionProperty>(CCollisionProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrection))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrection>(CColorCorrection.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrectionVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrectionVolume>(CColorCorrectionVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CConditionalCollidable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CConditionalCollidable>(CConditionalCollidable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicLight>(CDynamicLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicProp>(CDynamicProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconEntity>(CEconEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemAttribute>(CEconItemAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemView))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemView>(CEconItemView.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconWearable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconWearable>(CEconWearable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityComponent>(CEntityComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityDissolve))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityDissolve>(CEntityDissolve.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityFlame))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityFlame>(CEntityFlame.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityIdentity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityIdentity>(CEntityIdentity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCombinedLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCombinedLightProbeVolume>(CEnvCombinedLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemap>(CEnvCubemap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemapFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemapFog>(CEnvCubemapFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDecal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDecal>(CEnvDecal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDetailController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDetailController>(CEnvDetailController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvLightProbeVolume>(CEnvLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvParticleGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvParticleGlow>(CEnvParticleGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvProjectedTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvProjectedTexture>(CEnvProjectedTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvScreenOverlay))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvScreenOverlay>(CEnvScreenOverlay.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvSky))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvSky>(CEnvSky.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvSoundscape))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvSoundscape>(CEnvSoundscape.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogController>(CEnvVolumetricFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogVolume>(CEnvVolumetricFogVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWind))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWind>(CEnvWind.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWindShared))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWindShared>(CEnvWindShared.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFireSmoke))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFireSmoke>(CFireSmoke.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFish))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFish>(CFish.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFogController>(CFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncBrush))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncBrush>(CFuncBrush.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncElectrifiedVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncElectrifiedVolume>(CFuncElectrifiedVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncLadder))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncLadder>(CFuncLadder.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMonitor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMonitor>(CFuncMonitor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMoveLinear))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMoveLinear>(CFuncMoveLinear.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMover))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMover>(CFuncMover.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncRotating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncRotating>(CFuncRotating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncTrackTrain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncTrackTrain>(CFuncTrackTrain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRules>(CGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRulesProxy>(CGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameSceneNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameSceneNode>(CGameSceneNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGlowProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGlowProperty>(CGlowProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGradientFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGradientFog>(CGradientFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHandleTest))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHandleTest>(CHandleTest.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHitboxComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHitboxComponent>(CHitboxComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoLadderDismount))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoLadderDismount>(CInfoLadderDismount.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoOffscreenPanoramaTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoOffscreenPanoramaTexture>(CInfoOffscreenPanoramaTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoVisibilityBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoVisibilityBox>(CInfoVisibilityBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoWorldLayer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoWorldLayer>(CInfoWorldLayer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInWorldKeyBindPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInWorldKeyBindPanel>(CInWorldKeyBindPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem>(CItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem_FleetfootBoots))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem_FleetfootBoots>(CItem_FleetfootBoots.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem_RestorativeLocket))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem_RestorativeLocket>(CItem_RestorativeLocket.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem_WitheringWhip))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem_WitheringWhip>(CItem_WitheringWhip.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemCrate))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemCrate>(CItemCrate.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemExplosiveBarrel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemExplosiveBarrel>(CItemExplosiveBarrel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemFlare))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemFlare>(CItemFlare.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemGeneric))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemGeneric>(CItemGeneric.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemParachute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemParachute>(CItemParachute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemXP))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemXP>(CItemXP.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLaneNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLaneNode>(CLaneNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightCapsuleEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightCapsuleEntity>(CLightCapsuleEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightComponent>(CLightComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightDirectionalEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightDirectionalEntity>(CLightDirectionalEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEntity>(CLightEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEnvironmentEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEnvironmentEntity>(CLightEnvironmentEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightGlow>(CLightGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightOrthoEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightOrthoEntity>(CLightOrthoEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightSpotEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightSpotEntity>(CLightSpotEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMiniMapMarker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMiniMapMarker>(CMiniMapMarker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelPointEntity>(CModelPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelState))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelState>(CModelState.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModifierProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModifierProperty>(CModifierProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMultiplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMultiplayRules>(CMultiplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkOriginCellCoordQuantizedVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkOriginCellCoordQuantizedVector>(CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkOriginQuantizedVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkOriginQuantizedVector>(CNetworkOriginQuantizedVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkVelocityVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkVelocityVector>(CNetworkVelocityVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkViewOffsetVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkViewOffsetVector>(CNetworkViewOffsetVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_BaseDefenseSentry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_BaseDefenseSentry>(CNPC_BaseDefenseSentry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_Boss_Tier2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_Boss_Tier2>(CNPC_Boss_Tier2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_Boss_Tier3))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_Boss_Tier3>(CNPC_Boss_Tier3.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_CarpetBombDrone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_CarpetBombDrone>(CNPC_CarpetBombDrone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_FieldSentry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_FieldSentry>(CNPC_FieldSentry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_FlyingDrone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_FlyingDrone>(CNPC_FlyingDrone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_HeroCloneTrooper))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_HeroCloneTrooper>(CNPC_HeroCloneTrooper.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_HeroDecoy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_HeroDecoy>(CNPC_HeroDecoy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_MidBoss))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_MidBoss>(CNPC_MidBoss.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_MidBossHeroTest))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_MidBossHeroTest>(CNPC_MidBossHeroTest.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_MortarSentry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_MortarSentry>(CNPC_MortarSentry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_NanoRollermine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_NanoRollermine>(CNPC_NanoRollermine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_PestilenceDrone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_PestilenceDrone>(CNPC_PestilenceDrone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_ShieldedSentry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_ShieldedSentry>(CNPC_ShieldedSentry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_SimpleAnimatingAI))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_SimpleAnimatingAI>(CNPC_SimpleAnimatingAI.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_SurveillanceDrone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_SurveillanceDrone>(CNPC_SurveillanceDrone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_TeslaCoil))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_TeslaCoil>(CNPC_TeslaCoil.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_Trooper))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_Trooper>(CNPC_Trooper.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_TrooperBarrackBoss))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_TrooperBarrackBoss>(CNPC_TrooperBarrackBoss.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_TrooperBoss))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_TrooperBoss>(CNPC_TrooperBoss.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_TrooperNeutral))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_TrooperNeutral>(CNPC_TrooperNeutral.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_TrooperNeutralNodeMover))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_TrooperNeutralNodeMover>(CNPC_TrooperNeutralNodeMover.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNPC_YakuzaGangster))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNPC_YakuzaGangster>(CNPC_YakuzaGangster.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(COmniLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<COmniLight>(COmniLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CParticleSystem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CParticleSystem>(CParticleSystem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPathParticleRope))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPathParticleRope>(CPathParticleRope.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPathSimple))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPathSimple>(CPathSimple.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysBox>(CPhysBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysicsProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysicsProp>(CPhysicsProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysMagnet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysMagnet>(CPhysMagnet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_AutoaimServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_AutoaimServices>(CPlayer_AutoaimServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_CameraServices>(CPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_FlashlightServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_FlashlightServices>(CPlayer_FlashlightServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ItemServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ItemServices>(CPlayer_ItemServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices>(CPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices_Humanoid))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices_Humanoid>(CPlayer_MovementServices_Humanoid.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ObserverServices>(CPlayer_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_UseServices>(CPlayer_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WaterServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WaterServices>(CPlayer_WaterServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WeaponServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WeaponServices>(CPlayer_WeaponServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerPawnComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerPawnComponent>(CPlayerPawnComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerVisibility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerVisibility>(CPlayerVisibility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCamera>(CPointCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIDialog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIDialog>(CPointClientUIDialog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldPanel>(CPointClientUIWorldPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldTextPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldTextPanel>(CPointClientUIWorldTextPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCommentaryNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCommentaryNode>(CPointCommentaryNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointEntity>(CPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointOrient))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointOrient>(CPointOrient.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointValueRemapper))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointValueRemapper>(CPointValueRemapper.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointWorldText))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointWorldText>(CPointWorldText.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPostProcessingVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPostProcessingVolume>(CPostProcessingVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitation))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitation>(CPrecipitation.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitationBlocker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitationBlocker>(CPrecipitationBlocker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Mirage_Tornado))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Mirage_Tornado>(CProjectile_Mirage_Tornado.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Perched_Predator))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Perched_Predator>(CProjectile_Perched_Predator.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Rolling_FireBall))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Rolling_FireBall>(CProjectile_Rolling_FireBall.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Rutger_Rocket))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Rutger_Rocket>(CProjectile_Rutger_Rocket.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Stomp_Projectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Stomp_Projectile>(CProjectile_Stomp_Projectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Synth_Barrage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Synth_Barrage>(CProjectile_Synth_Barrage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CProjectile_Synth_PlasmaFlux))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CProjectile_Synth_PlasmaFlux>(CProjectile_Synth_PlasmaFlux.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPropAnimatingBreakable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPropAnimatingBreakable>(CPropAnimatingBreakable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPropDataComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPropDataComponent>(CPropDataComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPropDoorRotating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPropDoorRotating>(CPropDoorRotating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollManager>(CRagdollManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollProp>(CRagdollProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollPropAttached))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollPropAttached>(CRagdollPropAttached.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRectLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRectLight>(CRectLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRenderComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRenderComponent>(CRenderComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRopeKeyframe))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRopeKeyframe>(CRopeKeyframe.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSceneEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSceneEntity>(CSceneEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CScriptComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CScriptComponent>(CScriptComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CShatterGlassShardPhysics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CShatterGlassShardPhysics>(CShatterGlassShardPhysics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonAnimationController>(CSkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonInstance>(CSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkyCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkyCamera>(CSkyCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityBase>(CSoundAreaEntityBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityOrientedBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityOrientedBox>(CSoundAreaEntityOrientedBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntitySphere))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntitySphere>(CSoundAreaEntitySphere.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundEventAABBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundEventAABBEntity>(CSoundEventAABBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundEventEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundEventEntity>(CSoundEventEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundEventOBBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundEventOBBEntity>(CSoundEventOBBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundEventPathCornerEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundEventPathCornerEntity>(CSoundEventPathCornerEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundEventSphereEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundEventSphereEntity>(CSoundEventSphereEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetAABBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetAABBEntity>(CSoundOpvarSetAABBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetAutoRoomEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetAutoRoomEntity>(CSoundOpvarSetAutoRoomEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBEntity>(CSoundOpvarSetOBBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBWindEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBWindEntity>(CSoundOpvarSetOBBWindEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPathCornerEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPathCornerEntity>(CSoundOpvarSetPathCornerEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointBase>(CSoundOpvarSetPointBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointEntity>(CSoundOpvarSetPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpotlightEnd))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpotlightEnd>(CSpotlightEnd.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSprite))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSprite>(CSprite.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpriteOriented))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpriteOriented>(CSpriteOriented.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSun>(CSun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeam>(CTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeamplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeamplayRules>(CTeamplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeamRelativeParticleSystem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeamRelativeParticleSystem>(CTeamRelativeParticleSystem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTextureBasedAnimatable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTextureBasedAnimatable>(CTextureBasedAnimatable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTier3BossAbility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTier3BossAbility>(CTier3BossAbility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTonemapController2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTonemapController2>(CTonemapController2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerItemShop))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerItemShop>(CTriggerItemShop.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerModifier))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerModifier>(CTriggerModifier.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerMultiple))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerMultiple>(CTriggerMultiple.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerPhysics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerPhysics>(CTriggerPhysics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerVolume>(CTriggerVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWaterBullet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWaterBullet>(CWaterBullet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWorld))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWorld>(CWorld.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(DynamicAbilityValues))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<DynamicAbilityValues>(DynamicAbilityValues.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(EntityRenderAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<EntityRenderAttribute>(EntityRenderAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(FogParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<FogParams>(FogParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(FogPlayerParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<FogPlayerParams>(FogPlayerParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(FullSellPriceAbilityUpgrades))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<FullSellPriceAbilityUpgrades>(FullSellPriceAbilityUpgrades.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ice_path_shard_model_desc))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ice_path_shard_model_desc>(ice_path_shard_model_desc.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(IEconItemInterface))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<IEconItemInterface>(IEconItemInterface.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCModel>(InfoForResourceTypeCModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCPostProcessingResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCPostProcessingResource>(InfoForResourceTypeCPostProcessingResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCTextureBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCTextureBase>(InfoForResourceTypeCTextureBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIMaterial2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIMaterial2>(InfoForResourceTypeIMaterial2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIParticleSystemDefinition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIParticleSystemDefinition>(InfoForResourceTypeIParticleSystemDefinition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ISkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ISkeletonAnimationController>(ISkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ItemImbuementPair))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ItemImbuementPair>(ItemImbuementPair.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(LockonTarget))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<LockonTarget>(LockonTarget.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(PhysicsRagdollPose))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<PhysicsRagdollPose>(PhysicsRagdollPose.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(PlayerDataGlobal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<PlayerDataGlobal>(PlayerDataGlobal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(SharedModelDesc))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<SharedModelDesc>(SharedModelDesc.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(Sky3DParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<Sky3DParams>(Sky3DParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(SoundeventPathCornerPairNetworked))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<SoundeventPathCornerPairNetworked>(SoundeventPathCornerPairNetworked.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(StatViewerModifierValues))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<StatViewerModifierValues>(StatViewerModifierValues.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(STeamFOWEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<STeamFOWEntity>(STeamFOWEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(STrooperFOWEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<STrooperFOWEntity>(STrooperFOWEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ViewAngleServerChange))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ViewAngleServerChange>(ViewAngleServerChange.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(VPhysicsCollisionAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<VPhysicsCollisionAttribute>(VPhysicsCollisionAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(WeakPoint))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<WeakPoint>(WeakPoint.CreateFieldDecoder);
        }

        throw new NotImplementedException($"Unknown send node class: {typeof(T)}");
    }
}

internal static class DeadlockEntityFactories
{
    public static readonly IReadOnlyDictionary<string, EntityFactory<DeadlockDemoParser>> All = new Dictionary<string, EntityFactory<DeadlockDemoParser>>
    {
        {"CAbility_Fathom_ReefdwellerHarpoon", (context, decoder) => new CAbility_Fathom_ReefdwellerHarpoon(context, decoder)},
        {"CAbility_Mirage_SandPhantom", (context, decoder) => new CAbility_Mirage_SandPhantom(context, decoder)},
        {"CAbility_Mirage_Tornado", (context, decoder) => new CAbility_Mirage_Tornado(context, decoder)},
        {"CAbility_Rutger_CheatDeath", (context, decoder) => new CAbility_Rutger_CheatDeath(context, decoder)},
        {"CAbility_Rutger_ForceField", (context, decoder) => new CAbility_Rutger_ForceField(context, decoder)},
        {"CAbility_Rutger_RocketLauncher", (context, decoder) => new CAbility_Rutger_RocketLauncher(context, decoder)},
        {"CAbility_Synth_Affliction", (context, decoder) => new CAbility_Synth_Affliction(context, decoder)},
        {"CAbility_Synth_Barrage", (context, decoder) => new CAbility_Synth_Barrage(context, decoder)},
        {"CAbility_Synth_Blitz", (context, decoder) => new CAbility_Synth_Blitz(context, decoder)},
        {"CAbility_Synth_Grasp", (context, decoder) => new CAbility_Synth_Grasp(context, decoder)},
        {"CAbility_Synth_PlasmaFlux", (context, decoder) => new CAbility_Synth_PlasmaFlux(context, decoder)},
        {"CAbility_Synth_Pulse", (context, decoder) => new CAbility_Synth_Pulse(context, decoder)},
        {"CAI_BaseNPC", (context, decoder) => new CAI_BaseNPC(context, decoder)},
        {"CAI_CitadelNPC", (context, decoder) => new CAI_CitadelNPC(context, decoder)},
        {"CAnimGraph2TestProp", (context, decoder) => new CAnimGraph2TestProp(context, decoder)},
        {"CAssignedLaneParticle", (context, decoder) => new CAssignedLaneParticle(context, decoder)},
        {"CBarnLight", (context, decoder) => new CBarnLight(context, decoder)},
        {"CBaseAnimGraph", (context, decoder) => new CBaseAnimGraph(context, decoder)},
        {"CBaseButton", (context, decoder) => new CBaseButton(context, decoder)},
        {"CBaseClientUIEntity", (context, decoder) => new CBaseClientUIEntity(context, decoder)},
        {"CBaseCombatCharacter", (context, decoder) => new CBaseCombatCharacter(context, decoder)},
        {"CBaseDoor", (context, decoder) => new CBaseDoor(context, decoder)},
        {"CBaseEntity", (context, decoder) => new CBaseEntity(context, decoder)},
        {"CBaseFire", (context, decoder) => new CBaseFire(context, decoder)},
        {"CBaseFlex", (context, decoder) => new CBaseFlex(context, decoder)},
        {"CBaseModelEntity", (context, decoder) => new CBaseModelEntity(context, decoder)},
        {"CBasePlayerController", (context, decoder) => new CBasePlayerController(context, decoder)},
        {"CBasePlayerPawn", (context, decoder) => new CBasePlayerPawn(context, decoder)},
        {"CBasePlayerWeapon", (context, decoder) => new CBasePlayerWeapon(context, decoder)},
        {"CBaseProp", (context, decoder) => new CBaseProp(context, decoder)},
        {"CBasePropDoor", (context, decoder) => new CBasePropDoor(context, decoder)},
        {"CBaseToggle", (context, decoder) => new CBaseToggle(context, decoder)},
        {"CBaseTrigger", (context, decoder) => new CBaseTrigger(context, decoder)},
        {"CBeam", (context, decoder) => new CBeam(context, decoder)},
        {"CBreakable", (context, decoder) => new CBreakable(context, decoder)},
        {"CBreakableProp", (context, decoder) => new CBreakableProp(context, decoder)},
        {"CCitadel_Ability_Afterburn", (context, decoder) => new CCitadel_Ability_Afterburn(context, decoder)},
        {"CCitadel_Ability_Astro_Rifle", (context, decoder) => new CCitadel_Ability_Astro_Rifle(context, decoder)},
        {"CCitadel_Ability_Astro_Shotgun_Toggle", (context, decoder) => new CCitadel_Ability_Astro_Shotgun_Toggle(context, decoder)},
        {"CCitadel_Ability_BaseHeldItem", (context, decoder) => new CCitadel_Ability_BaseHeldItem(context, decoder)},
        {"CCitadel_Ability_Bebop_LaserBeam", (context, decoder) => new CCitadel_Ability_Bebop_LaserBeam(context, decoder)},
        {"CCitadel_Ability_BloodBomb", (context, decoder) => new CCitadel_Ability_BloodBomb(context, decoder)},
        {"CCitadel_Ability_Bomber_Ability02", (context, decoder) => new CCitadel_Ability_Bomber_Ability02(context, decoder)},
        {"CCitadel_Ability_Bomber_Ability03", (context, decoder) => new CCitadel_Ability_Bomber_Ability03(context, decoder)},
        {"CCitadel_Ability_Bomber_ULT", (context, decoder) => new CCitadel_Ability_Bomber_ULT(context, decoder)},
        {"CCitadel_Ability_Bounce_Pad", (context, decoder) => new CCitadel_Ability_Bounce_Pad(context, decoder)},
        {"CCitadel_Ability_Bull_Charge", (context, decoder) => new CCitadel_Ability_Bull_Charge(context, decoder)},
        {"CCitadel_Ability_Bull_Heal", (context, decoder) => new CCitadel_Ability_Bull_Heal(context, decoder)},
        {"CCitadel_Ability_Bull_Leap", (context, decoder) => new CCitadel_Ability_Bull_Leap(context, decoder)},
        {"CCitadel_Ability_BulletFlurry", (context, decoder) => new CCitadel_Ability_BulletFlurry(context, decoder)},
        {"CCitadel_Ability_Burrow", (context, decoder) => new CCitadel_Ability_Burrow(context, decoder)},
        {"CCitadel_Ability_Cadence_Anthem", (context, decoder) => new CCitadel_Ability_Cadence_Anthem(context, decoder)},
        {"CCitadel_Ability_Cadence_Crescendo", (context, decoder) => new CCitadel_Ability_Cadence_Crescendo(context, decoder)},
        {"CCitadel_Ability_Cadence_GrandFinale", (context, decoder) => new CCitadel_Ability_Cadence_GrandFinale(context, decoder)},
        {"CCitadel_Ability_Cadence_Lullaby", (context, decoder) => new CCitadel_Ability_Cadence_Lullaby(context, decoder)},
        {"CCitadel_Ability_Cadence_SilenceContraptions", (context, decoder) => new CCitadel_Ability_Cadence_SilenceContraptions(context, decoder)},
        {"CCitadel_Ability_CardToss", (context, decoder) => new CCitadel_Ability_CardToss(context, decoder)},
        {"CCitadel_Ability_Charged_Bomb", (context, decoder) => new CCitadel_Ability_Charged_Bomb(context, decoder)},
        {"CCitadel_Ability_ChargedShot", (context, decoder) => new CCitadel_Ability_ChargedShot(context, decoder)},
        {"CCitadel_Ability_ChargedTackle", (context, decoder) => new CCitadel_Ability_ChargedTackle(context, decoder)},
        {"CCitadel_Ability_Chrono_KineticCarbine", (context, decoder) => new CCitadel_Ability_Chrono_KineticCarbine(context, decoder)},
        {"CCitadel_Ability_Chrono_PulseGrenade", (context, decoder) => new CCitadel_Ability_Chrono_PulseGrenade(context, decoder)},
        {"CCitadel_Ability_Chrono_TimeWall", (context, decoder) => new CCitadel_Ability_Chrono_TimeWall(context, decoder)},
        {"CCitadel_Ability_ChronoSwap", (context, decoder) => new CCitadel_Ability_ChronoSwap(context, decoder)},
        {"CCitadel_Ability_Climb_Rope", (context, decoder) => new CCitadel_Ability_Climb_Rope(context, decoder)},
        {"CCitadel_Ability_Crackshot", (context, decoder) => new CCitadel_Ability_Crackshot(context, decoder)},
        {"CCitadel_Ability_CrowdControl", (context, decoder) => new CCitadel_Ability_CrowdControl(context, decoder)},
        {"CCitadel_Ability_Dash", (context, decoder) => new CCitadel_Ability_Dash(context, decoder)},
        {"CCitadel_Ability_DeathTax", (context, decoder) => new CCitadel_Ability_DeathTax(context, decoder)},
        {"CCitadel_Ability_Disruptive_Charge", (context, decoder) => new CCitadel_Ability_Disruptive_Charge(context, decoder)},
        {"CCitadel_Ability_Dust_Storm", (context, decoder) => new CCitadel_Ability_Dust_Storm(context, decoder)},
        {"CCitadel_Ability_Empty", (context, decoder) => new CCitadel_Ability_Empty(context, decoder)},
        {"CCitadel_Ability_ExplosiveBarrel", (context, decoder) => new CCitadel_Ability_ExplosiveBarrel(context, decoder)},
        {"CCitadel_Ability_Fathom_Breach", (context, decoder) => new CCitadel_Ability_Fathom_Breach(context, decoder)},
        {"CCitadel_Ability_Fathom_ScaldingSpray", (context, decoder) => new CCitadel_Ability_Fathom_ScaldingSpray(context, decoder)},
        {"CCitadel_Ability_Fealty", (context, decoder) => new CCitadel_Ability_Fealty(context, decoder)},
        {"CCitadel_Ability_FireBomb", (context, decoder) => new CCitadel_Ability_FireBomb(context, decoder)},
        {"CCitadel_Ability_FissureWall", (context, decoder) => new CCitadel_Ability_FissureWall(context, decoder)},
        {"CCitadel_Ability_FlameDash", (context, decoder) => new CCitadel_Ability_FlameDash(context, decoder)},
        {"CCitadel_Ability_FlyingStrike", (context, decoder) => new CCitadel_Ability_FlyingStrike(context, decoder)},
        {"CCitadel_Ability_GangActivity", (context, decoder) => new CCitadel_Ability_GangActivity(context, decoder)},
        {"CCitadel_Ability_GangActivity_Cancel", (context, decoder) => new CCitadel_Ability_GangActivity_Cancel(context, decoder)},
        {"CCitadel_Ability_GenericPerson_1", (context, decoder) => new CCitadel_Ability_GenericPerson_1(context, decoder)},
        {"CCitadel_Ability_GenericPerson_2", (context, decoder) => new CCitadel_Ability_GenericPerson_2(context, decoder)},
        {"CCitadel_Ability_GenericPerson_3", (context, decoder) => new CCitadel_Ability_GenericPerson_3(context, decoder)},
        {"CCitadel_Ability_GenericPerson_4", (context, decoder) => new CCitadel_Ability_GenericPerson_4(context, decoder)},
        {"CCitadel_Ability_Ghost_BloodShards", (context, decoder) => new CCitadel_Ability_Ghost_BloodShards(context, decoder)},
        {"CCitadel_Ability_GoldenIdol", (context, decoder) => new CCitadel_Ability_GoldenIdol(context, decoder)},
        {"CCitadel_Ability_GooBowlingBall", (context, decoder) => new CCitadel_Ability_GooBowlingBall(context, decoder)},
        {"CCitadel_Ability_GooGrenade", (context, decoder) => new CCitadel_Ability_GooGrenade(context, decoder)},
        {"CCitadel_Ability_Gravity_Lasso", (context, decoder) => new CCitadel_Ability_Gravity_Lasso(context, decoder)},
        {"CCitadel_Ability_GuidedArrow", (context, decoder) => new CCitadel_Ability_GuidedArrow(context, decoder)},
        {"CCitadel_Ability_HatTrick", (context, decoder) => new CCitadel_Ability_HatTrick(context, decoder)},
        {"CCitadel_Ability_Haze_StackingDamage", (context, decoder) => new CCitadel_Ability_Haze_StackingDamage(context, decoder)},
        {"CCitadel_Ability_HealingSlash", (context, decoder) => new CCitadel_Ability_HealingSlash(context, decoder)},
        {"CCitadel_Ability_HealthSwap", (context, decoder) => new CCitadel_Ability_HealthSwap(context, decoder)},
        {"CCitadel_Ability_HighAlert", (context, decoder) => new CCitadel_Ability_HighAlert(context, decoder)},
        {"CCitadel_Ability_HoldMelee", (context, decoder) => new CCitadel_Ability_HoldMelee(context, decoder)},
        {"CCitadel_Ability_Hook", (context, decoder) => new CCitadel_Ability_Hook(context, decoder)},
        {"CCitadel_Ability_Hornet_Chain", (context, decoder) => new CCitadel_Ability_Hornet_Chain(context, decoder)},
        {"CCitadel_Ability_Hornet_Snipe", (context, decoder) => new CCitadel_Ability_Hornet_Snipe(context, decoder)},
        {"CCitadel_Ability_HornetLeap", (context, decoder) => new CCitadel_Ability_HornetLeap(context, decoder)},
        {"CCitadel_Ability_HornetMark", (context, decoder) => new CCitadel_Ability_HornetMark(context, decoder)},
        {"CCitadel_Ability_HornetSting", (context, decoder) => new CCitadel_Ability_HornetSting(context, decoder)},
        {"CCitadel_Ability_IceBeam", (context, decoder) => new CCitadel_Ability_IceBeam(context, decoder)},
        {"CCitadel_Ability_IceDome", (context, decoder) => new CCitadel_Ability_IceDome(context, decoder)},
        {"CCitadel_Ability_IceGrenade", (context, decoder) => new CCitadel_Ability_IceGrenade(context, decoder)},
        {"CCitadel_Ability_IcePath", (context, decoder) => new CCitadel_Ability_IcePath(context, decoder)},
        {"CCitadel_Ability_ImmobilizeTrap", (context, decoder) => new CCitadel_Ability_ImmobilizeTrap(context, decoder)},
        {"CCitadel_Ability_IncendiaryProjectile", (context, decoder) => new CCitadel_Ability_IncendiaryProjectile(context, decoder)},
        {"CCitadel_Ability_InfinitySlash", (context, decoder) => new CCitadel_Ability_InfinitySlash(context, decoder)},
        {"CCitadel_Ability_Intimidate", (context, decoder) => new CCitadel_Ability_Intimidate(context, decoder)},
        {"CCitadel_Ability_Jump", (context, decoder) => new CCitadel_Ability_Jump(context, decoder)},
        {"CCitadel_Ability_Kobun", (context, decoder) => new CCitadel_Ability_Kobun(context, decoder)},
        {"CCitadel_Ability_Lash", (context, decoder) => new CCitadel_Ability_Lash(context, decoder)},
        {"CCitadel_Ability_Lash_Flog", (context, decoder) => new CCitadel_Ability_Lash_Flog(context, decoder)},
        {"CCitadel_Ability_Lash_Ultimate", (context, decoder) => new CCitadel_Ability_Lash_Ultimate(context, decoder)},
        {"CCitadel_Ability_LashDownStrike", (context, decoder) => new CCitadel_Ability_LashDownStrike(context, decoder)},
        {"CCitadel_Ability_LifeDrain", (context, decoder) => new CCitadel_Ability_LifeDrain(context, decoder)},
        {"CCitadel_Ability_LightningBall", (context, decoder) => new CCitadel_Ability_LightningBall(context, decoder)},
        {"CCitadel_Ability_LockDown", (context, decoder) => new CCitadel_Ability_LockDown(context, decoder)},
        {"CCitadel_Ability_MageWalk", (context, decoder) => new CCitadel_Ability_MageWalk(context, decoder)},
        {"CCitadel_Ability_Magician_AnimalCurse", (context, decoder) => new CCitadel_Ability_Magician_AnimalCurse(context, decoder)},
        {"CCitadel_Ability_Magician_MagicBolt", (context, decoder) => new CCitadel_Ability_Magician_MagicBolt(context, decoder)},
        {"CCitadel_Ability_Magician_ShadowClone", (context, decoder) => new CCitadel_Ability_Magician_ShadowClone(context, decoder)},
        {"CCitadel_Ability_Mantle", (context, decoder) => new CCitadel_Ability_Mantle(context, decoder)},
        {"CCitadel_Ability_MedicHeal", (context, decoder) => new CCitadel_Ability_MedicHeal(context, decoder)},
        {"CCitadel_Ability_Melee_Base", (context, decoder) => new CCitadel_Ability_Melee_Base(context, decoder)},
        {"CCitadel_Ability_MeleeParry", (context, decoder) => new CCitadel_Ability_MeleeParry(context, decoder)},
        {"CCitadel_Ability_Mirage_FireBeetles", (context, decoder) => new CCitadel_Ability_Mirage_FireBeetles(context, decoder)},
        {"CCitadel_Ability_Mirage_Teleport", (context, decoder) => new CCitadel_Ability_Mirage_Teleport(context, decoder)},
        {"CCitadel_Ability_MobileResupply", (context, decoder) => new CCitadel_Ability_MobileResupply(context, decoder)},
        {"CCitadel_Ability_Nano_Pounce", (context, decoder) => new CCitadel_Ability_Nano_Pounce(context, decoder)},
        {"CCitadel_Ability_Nano_Pounce_Instant", (context, decoder) => new CCitadel_Ability_Nano_Pounce_Instant(context, decoder)},
        {"CCitadel_Ability_Nano_Shadow", (context, decoder) => new CCitadel_Ability_Nano_Shadow(context, decoder)},
        {"CCitadel_Ability_Nikuman", (context, decoder) => new CCitadel_Ability_Nikuman(context, decoder)},
        {"CCitadel_Ability_PassiveBeefy", (context, decoder) => new CCitadel_Ability_PassiveBeefy(context, decoder)},
        {"CCitadel_Ability_Perched_Predator", (context, decoder) => new CCitadel_Ability_Perched_Predator(context, decoder)},
        {"CCitadel_Ability_PoisonBullets", (context, decoder) => new CCitadel_Ability_PoisonBullets(context, decoder)},
        {"CCitadel_Ability_PowerJump", (context, decoder) => new CCitadel_Ability_PowerJump(context, decoder)},
        {"CCitadel_Ability_PowerSlash", (context, decoder) => new CCitadel_Ability_PowerSlash(context, decoder)},
        {"CCitadel_Ability_PowerSurge", (context, decoder) => new CCitadel_Ability_PowerSurge(context, decoder)},
        {"CCitadel_Ability_PrimaryWeapon", (context, decoder) => new CCitadel_Ability_PrimaryWeapon(context, decoder)},
        {"CCitadel_Ability_PrimaryWeapon_BeamWeapon", (context, decoder) => new CCitadel_Ability_PrimaryWeapon_BeamWeapon(context, decoder)},
        {"CCitadel_Ability_PrimaryWeapon_Bebop", (context, decoder) => new CCitadel_Ability_PrimaryWeapon_Bebop(context, decoder)},
        {"CCitadel_Ability_PrimaryWeapon_Cadence", (context, decoder) => new CCitadel_Ability_PrimaryWeapon_Cadence(context, decoder)},
        {"CCitadel_Ability_PrimaryWeapon_Empty", (context, decoder) => new CCitadel_Ability_PrimaryWeapon_Empty(context, decoder)},
        {"CCitadel_Ability_ProjectMind", (context, decoder) => new CCitadel_Ability_ProjectMind(context, decoder)},
        {"CCitadel_Ability_Protection_Racket", (context, decoder) => new CCitadel_Ability_Protection_Racket(context, decoder)},
        {"CCitadel_Ability_ProximityRitual", (context, decoder) => new CCitadel_Ability_ProximityRitual(context, decoder)},
        {"CCitadel_Ability_PsychicDagger", (context, decoder) => new CCitadel_Ability_PsychicDagger(context, decoder)},
        {"CCitadel_Ability_PsychicLift", (context, decoder) => new CCitadel_Ability_PsychicLift(context, decoder)},
        {"CCitadel_Ability_PsychicPulse", (context, decoder) => new CCitadel_Ability_PsychicPulse(context, decoder)},
        {"CCitadel_Ability_Puddle", (context, decoder) => new CCitadel_Ability_Puddle(context, decoder)},
        {"CCitadel_Ability_RapidFire", (context, decoder) => new CCitadel_Ability_RapidFire(context, decoder)},
        {"CCitadel_Ability_RestorativeGoo", (context, decoder) => new CCitadel_Ability_RestorativeGoo(context, decoder)},
        {"CCitadel_Ability_RiotProtocol", (context, decoder) => new CCitadel_Ability_RiotProtocol(context, decoder)},
        {"CCitadel_Ability_RocketBarrage", (context, decoder) => new CCitadel_Ability_RocketBarrage(context, decoder)},
        {"CCitadel_Ability_RocketLauncher", (context, decoder) => new CCitadel_Ability_RocketLauncher(context, decoder)},
        {"CCitadel_Ability_Rolling_FireBall", (context, decoder) => new CCitadel_Ability_Rolling_FireBall(context, decoder)},
        {"CCitadel_Ability_Running_Decoy", (context, decoder) => new CCitadel_Ability_Running_Decoy(context, decoder)},
        {"CCitadel_Ability_Rutger_Pulse", (context, decoder) => new CCitadel_Ability_Rutger_Pulse(context, decoder)},
        {"CCitadel_Ability_SelfVacuum", (context, decoder) => new CCitadel_Ability_SelfVacuum(context, decoder)},
        {"CCitadel_Ability_SettingSun", (context, decoder) => new CCitadel_Ability_SettingSun(context, decoder)},
        {"CCitadel_Ability_Shakedown_Target", (context, decoder) => new CCitadel_Ability_Shakedown_Target(context, decoder)},
        {"CCitadel_Ability_Shield", (context, decoder) => new CCitadel_Ability_Shield(context, decoder)},
        {"CCitadel_Ability_ShieldedSentry", (context, decoder) => new CCitadel_Ability_ShieldedSentry(context, decoder)},
        {"CCitadel_Ability_ShieldGuy_Ability01", (context, decoder) => new CCitadel_Ability_ShieldGuy_Ability01(context, decoder)},
        {"CCitadel_Ability_ShieldGuy_Ability02", (context, decoder) => new CCitadel_Ability_ShieldGuy_Ability02(context, decoder)},
        {"CCitadel_Ability_ShieldGuy_Ability03", (context, decoder) => new CCitadel_Ability_ShieldGuy_Ability03(context, decoder)},
        {"CCitadel_Ability_ShieldGuy_Ability04", (context, decoder) => new CCitadel_Ability_ShieldGuy_Ability04(context, decoder)},
        {"CCitadel_Ability_Shiv_Defer_Damage", (context, decoder) => new CCitadel_Ability_Shiv_Defer_Damage(context, decoder)},
        {"CCitadel_Ability_Shiv_KillingBlow", (context, decoder) => new CCitadel_Ability_Shiv_KillingBlow(context, decoder)},
        {"CCitadel_Ability_ShivDagger", (context, decoder) => new CCitadel_Ability_ShivDagger(context, decoder)},
        {"CCitadel_Ability_ShivDash", (context, decoder) => new CCitadel_Ability_ShivDash(context, decoder)},
        {"CCitadel_Ability_ShivWeapon", (context, decoder) => new CCitadel_Ability_ShivWeapon(context, decoder)},
        {"CCitadel_Ability_Shotgun_Astro", (context, decoder) => new CCitadel_Ability_Shotgun_Astro(context, decoder)},
        {"CCitadel_Ability_Shotgun_Astro_Backwards", (context, decoder) => new CCitadel_Ability_Shotgun_Astro_Backwards(context, decoder)},
        {"CCitadel_Ability_SleepBomb", (context, decoder) => new CCitadel_Ability_SleepBomb(context, decoder)},
        {"CCitadel_Ability_SleepDagger", (context, decoder) => new CCitadel_Ability_SleepDagger(context, decoder)},
        {"CCitadel_Ability_Slide", (context, decoder) => new CCitadel_Ability_Slide(context, decoder)},
        {"CCitadel_Ability_SmokeBomb", (context, decoder) => new CCitadel_Ability_SmokeBomb(context, decoder)},
        {"CCitadel_Ability_SnakeDash", (context, decoder) => new CCitadel_Ability_SnakeDash(context, decoder)},
        {"CCitadel_Ability_Spinning_Blade", (context, decoder) => new CCitadel_Ability_Spinning_Blade(context, decoder)},
        {"CCitadel_Ability_Sprint", (context, decoder) => new CCitadel_Ability_Sprint(context, decoder)},
        {"CCitadel_Ability_StaticCharge", (context, decoder) => new CCitadel_Ability_StaticCharge(context, decoder)},
        {"CCitadel_Ability_StickyBomb", (context, decoder) => new CCitadel_Ability_StickyBomb(context, decoder)},
        {"CCitadel_Ability_Stomp", (context, decoder) => new CCitadel_Ability_Stomp(context, decoder)},
        {"CCitadel_Ability_StormCloud", (context, decoder) => new CCitadel_Ability_StormCloud(context, decoder)},
        {"CCitadel_Ability_SummonGangster", (context, decoder) => new CCitadel_Ability_SummonGangster(context, decoder)},
        {"CCitadel_Ability_SuperNeutralCharge", (context, decoder) => new CCitadel_Ability_SuperNeutralCharge(context, decoder)},
        {"CCitadel_Ability_SuperNeutralIncendiary", (context, decoder) => new CCitadel_Ability_SuperNeutralIncendiary(context, decoder)},
        {"CCitadel_Ability_SuperNeutralShield", (context, decoder) => new CCitadel_Ability_SuperNeutralShield(context, decoder)},
        {"CCitadel_Ability_TangoTether", (context, decoder) => new CCitadel_Ability_TangoTether(context, decoder)},
        {"CCitadel_Ability_TangoTether_Trigger", (context, decoder) => new CCitadel_Ability_TangoTether_Trigger(context, decoder)},
        {"CCitadel_Ability_Targetdummy_1", (context, decoder) => new CCitadel_Ability_Targetdummy_1(context, decoder)},
        {"CCitadel_Ability_Targetdummy_2", (context, decoder) => new CCitadel_Ability_Targetdummy_2(context, decoder)},
        {"CCitadel_Ability_Targetdummy_3", (context, decoder) => new CCitadel_Ability_Targetdummy_3(context, decoder)},
        {"CCitadel_Ability_Targetdummy_4", (context, decoder) => new CCitadel_Ability_Targetdummy_4(context, decoder)},
        {"CCitadel_Ability_Targetdummy_Inherent", (context, decoder) => new CCitadel_Ability_Targetdummy_Inherent(context, decoder)},
        {"CCitadel_Ability_TargetPractice", (context, decoder) => new CCitadel_Ability_TargetPractice(context, decoder)},
        {"CCitadel_Ability_Teleport", (context, decoder) => new CCitadel_Ability_Teleport(context, decoder)},
        {"CCitadel_Ability_TeleportToGangster", (context, decoder) => new CCitadel_Ability_TeleportToGangster(context, decoder)},
        {"CCitadel_Ability_Tenacity", (context, decoder) => new CCitadel_Ability_Tenacity(context, decoder)},
        {"CCitadel_Ability_Tengu_AirLift", (context, decoder) => new CCitadel_Ability_Tengu_AirLift(context, decoder)},
        {"CCitadel_Ability_Tengu_StoneForm", (context, decoder) => new CCitadel_Ability_Tengu_StoneForm(context, decoder)},
        {"CCitadel_Ability_Tengu_Urn", (context, decoder) => new CCitadel_Ability_Tengu_Urn(context, decoder)},
        {"CCitadel_Ability_ThrowSand", (context, decoder) => new CCitadel_Ability_ThrowSand(context, decoder)},
        {"CCitadel_Ability_Thumper_1", (context, decoder) => new CCitadel_Ability_Thumper_1(context, decoder)},
        {"CCitadel_Ability_Thumper_2", (context, decoder) => new CCitadel_Ability_Thumper_2(context, decoder)},
        {"CCitadel_Ability_Thumper_3", (context, decoder) => new CCitadel_Ability_Thumper_3(context, decoder)},
        {"CCitadel_Ability_Thumper_4", (context, decoder) => new CCitadel_Ability_Thumper_4(context, decoder)},
        {"CCitadel_Ability_Tier2Boss_LaserBeam", (context, decoder) => new CCitadel_Ability_Tier2Boss_LaserBeam(context, decoder)},
        {"CCitadel_Ability_Tier2Boss_RocketBarrage", (context, decoder) => new CCitadel_Ability_Tier2Boss_RocketBarrage(context, decoder)},
        {"CCitadel_Ability_Tier2Boss_Stomp", (context, decoder) => new CCitadel_Ability_Tier2Boss_Stomp(context, decoder)},
        {"CCitadel_Ability_Tier3Boss_DamagePulse", (context, decoder) => new CCitadel_Ability_Tier3Boss_DamagePulse(context, decoder)},
        {"CCitadel_Ability_Tier3Boss_LaserBeam", (context, decoder) => new CCitadel_Ability_Tier3Boss_LaserBeam(context, decoder)},
        {"CCitadel_Ability_Tokamak_Breach", (context, decoder) => new CCitadel_Ability_Tokamak_Breach(context, decoder)},
        {"CCitadel_Ability_Tokamak_CrimsonCannon", (context, decoder) => new CCitadel_Ability_Tokamak_CrimsonCannon(context, decoder)},
        {"CCitadel_Ability_Tokamak_DyingStar", (context, decoder) => new CCitadel_Ability_Tokamak_DyingStar(context, decoder)},
        {"CCitadel_Ability_Tokamak_HeatSinks", (context, decoder) => new CCitadel_Ability_Tokamak_HeatSinks(context, decoder)},
        {"CCitadel_Ability_Tokamak_HeatSinks_Inherent", (context, decoder) => new CCitadel_Ability_Tokamak_HeatSinks_Inherent(context, decoder)},
        {"CCitadel_Ability_Tokamak_HotShot", (context, decoder) => new CCitadel_Ability_Tokamak_HotShot(context, decoder)},
        {"CCitadel_Ability_Tokamak_Radiance", (context, decoder) => new CCitadel_Ability_Tokamak_Radiance(context, decoder)},
        {"CCitadel_Ability_Trappers_Bolo", (context, decoder) => new CCitadel_Ability_Trappers_Bolo(context, decoder)},
        {"CCitadel_Ability_TriggerTower", (context, decoder) => new CCitadel_Ability_TriggerTower(context, decoder)},
        {"CCitadel_Ability_TrooperBossGrenade", (context, decoder) => new CCitadel_Ability_TrooperBossGrenade(context, decoder)},
        {"CCitadel_Ability_TrooperGrenade", (context, decoder) => new CCitadel_Ability_TrooperGrenade(context, decoder)},
        {"CCitadel_Ability_TrooperNeutralGrenade", (context, decoder) => new CCitadel_Ability_TrooperNeutralGrenade(context, decoder)},
        {"CCitadel_Ability_TrooperZipLine", (context, decoder) => new CCitadel_Ability_TrooperZipLine(context, decoder)},
        {"CCitadel_Ability_TurretClone", (context, decoder) => new CCitadel_Ability_TurretClone(context, decoder)},
        {"CCitadel_Ability_UltCombo", (context, decoder) => new CCitadel_Ability_UltCombo(context, decoder)},
        {"CCitadel_Ability_Uppercut", (context, decoder) => new CCitadel_Ability_Uppercut(context, decoder)},
        {"CCitadel_Ability_Vandal_Ability03", (context, decoder) => new CCitadel_Ability_Vandal_Ability03(context, decoder)},
        {"CCitadel_Ability_Vandal_Pillar", (context, decoder) => new CCitadel_Ability_Vandal_Pillar(context, decoder)},
        {"CCitadel_Ability_VandalOverflow", (context, decoder) => new CCitadel_Ability_VandalOverflow(context, decoder)},
        {"CCitadel_Ability_VandalSurge", (context, decoder) => new CCitadel_Ability_VandalSurge(context, decoder)},
        {"CCitadel_Ability_Viper_Ability04", (context, decoder) => new CCitadel_Ability_Viper_Ability04(context, decoder)},
        {"CCitadel_Ability_Viper_DebuffDagger", (context, decoder) => new CCitadel_Ability_Viper_DebuffDagger(context, decoder)},
        {"CCitadel_Ability_ViperHookblade", (context, decoder) => new CCitadel_Ability_ViperHookblade(context, decoder)},
        {"CCitadel_Ability_ViperVenom", (context, decoder) => new CCitadel_Ability_ViperVenom(context, decoder)},
        {"CCitadel_Ability_Viscous_Telepunch", (context, decoder) => new CCitadel_Ability_Viscous_Telepunch(context, decoder)},
        {"CCitadel_Ability_ViscousWeapon_Alt", (context, decoder) => new CCitadel_Ability_ViscousWeapon_Alt(context, decoder)},
        {"CCitadel_Ability_VoidSphere", (context, decoder) => new CCitadel_Ability_VoidSphere(context, decoder)},
        {"CCitadel_Ability_Weapon_BossTier2", (context, decoder) => new CCitadel_Ability_Weapon_BossTier2(context, decoder)},
        {"CCitadel_Ability_Weapon_BossTier3", (context, decoder) => new CCitadel_Ability_Weapon_BossTier3(context, decoder)},
        {"CCitadel_Ability_WingBlast", (context, decoder) => new CCitadel_Ability_WingBlast(context, decoder)},
        {"CCitadel_Ability_Wraith_RapidFire", (context, decoder) => new CCitadel_Ability_Wraith_RapidFire(context, decoder)},
        {"CCitadel_Ability_Wrecker_Salvage", (context, decoder) => new CCitadel_Ability_Wrecker_Salvage(context, decoder)},
        {"CCitadel_Ability_Wrecker_Ultimate", (context, decoder) => new CCitadel_Ability_Wrecker_Ultimate(context, decoder)},
        {"CCitadel_Ability_WreckerScrapBlast", (context, decoder) => new CCitadel_Ability_WreckerScrapBlast(context, decoder)},
        {"CCitadel_Ability_WreckerTeleport", (context, decoder) => new CCitadel_Ability_WreckerTeleport(context, decoder)},
        {"CCitadel_Ability_WreckingBall", (context, decoder) => new CCitadel_Ability_WreckingBall(context, decoder)},
        {"CCitadel_Ability_WreckingBallThrow", (context, decoder) => new CCitadel_Ability_WreckingBallThrow(context, decoder)},
        {"CCitadel_Ability_Yakuza_Shakedown", (context, decoder) => new CCitadel_Ability_Yakuza_Shakedown(context, decoder)},
        {"CCitadel_Ability_ZipLine", (context, decoder) => new CCitadel_Ability_ZipLine(context, decoder)},
        {"CCitadel_Ability_ZipLine_Boost", (context, decoder) => new CCitadel_Ability_ZipLine_Boost(context, decoder)},
        {"CCitadel_ArmorUpgrade_AbilityLifeSteal", (context, decoder) => new CCitadel_ArmorUpgrade_AbilityLifeSteal(context, decoder)},
        {"CCitadel_ArmorUpgrade_AblativeCoat", (context, decoder) => new CCitadel_ArmorUpgrade_AblativeCoat(context, decoder)},
        {"CCitadel_ArmorUpgrade_ActiveBulletShield", (context, decoder) => new CCitadel_ArmorUpgrade_ActiveBulletShield(context, decoder)},
        {"CCitadel_ArmorUpgrade_BulletArmorReductionAura", (context, decoder) => new CCitadel_ArmorUpgrade_BulletArmorReductionAura(context, decoder)},
        {"CCitadel_ArmorUpgrade_CloakingDevice", (context, decoder) => new CCitadel_ArmorUpgrade_CloakingDevice(context, decoder)},
        {"CCitadel_ArmorUpgrade_CloakingDeviceActive", (context, decoder) => new CCitadel_ArmorUpgrade_CloakingDeviceActive(context, decoder)},
        {"CCitadel_ArmorUpgrade_Colossus", (context, decoder) => new CCitadel_ArmorUpgrade_Colossus(context, decoder)},
        {"CCitadel_ArmorUpgrade_DamageRecycler", (context, decoder) => new CCitadel_ArmorUpgrade_DamageRecycler(context, decoder)},
        {"CCitadel_ArmorUpgrade_DebuffReducer", (context, decoder) => new CCitadel_ArmorUpgrade_DebuffReducer(context, decoder)},
        {"CCitadel_ArmorUpgrade_DoubleJump", (context, decoder) => new CCitadel_ArmorUpgrade_DoubleJump(context, decoder)},
        {"CCitadel_ArmorUpgrade_Frenzy", (context, decoder) => new CCitadel_ArmorUpgrade_Frenzy(context, decoder)},
        {"CCitadel_ArmorUpgrade_HealOnLevel", (context, decoder) => new CCitadel_ArmorUpgrade_HealOnLevel(context, decoder)},
        {"CCitadel_ArmorUpgrade_HighImpactArmor", (context, decoder) => new CCitadel_ArmorUpgrade_HighImpactArmor(context, decoder)},
        {"CCitadel_ArmorUpgrade_MetalSkin", (context, decoder) => new CCitadel_ArmorUpgrade_MetalSkin(context, decoder)},
        {"CCitadel_ArmorUpgrade_PersonalRejuvenator", (context, decoder) => new CCitadel_ArmorUpgrade_PersonalRejuvenator(context, decoder)},
        {"CCitadel_ArmorUpgrade_RegeneratingBulletShield", (context, decoder) => new CCitadel_ArmorUpgrade_RegeneratingBulletShield(context, decoder)},
        {"CCitadel_ArmorUpgrade_RegenerativeArmor", (context, decoder) => new CCitadel_ArmorUpgrade_RegenerativeArmor(context, decoder)},
        {"CCitadel_ArmorUpgrade_ReturnFire", (context, decoder) => new CCitadel_ArmorUpgrade_ReturnFire(context, decoder)},
        {"CCitadel_ArmorUpgrade_SlowImmunity", (context, decoder) => new CCitadel_ArmorUpgrade_SlowImmunity(context, decoder)},
        {"CCitadel_ArmorUpgrade_SpellShield", (context, decoder) => new CCitadel_ArmorUpgrade_SpellShield(context, decoder)},
        {"CCitadel_ArmorUpgrade_Stimpak", (context, decoder) => new CCitadel_ArmorUpgrade_Stimpak(context, decoder)},
        {"CCitadel_ArmorUpgrade_VexBarrier", (context, decoder) => new CCitadel_ArmorUpgrade_VexBarrier(context, decoder)},
        {"CCitadel_Bounce_Pad", (context, decoder) => new CCitadel_Bounce_Pad(context, decoder)},
        {"CCitadel_BreakableProp", (context, decoder) => new CCitadel_BreakableProp(context, decoder)},
        {"CCitadel_BreakablePropGoldPickup", (context, decoder) => new CCitadel_BreakablePropGoldPickup(context, decoder)},
        {"CCitadel_BreakablePropHealthPickup", (context, decoder) => new CCitadel_BreakablePropHealthPickup(context, decoder)},
        {"CCitadel_BreakablePropModifierPickup", (context, decoder) => new CCitadel_BreakablePropModifierPickup(context, decoder)},
        {"CCitadel_BreakablePropPickup", (context, decoder) => new CCitadel_BreakablePropPickup(context, decoder)},
        {"CCitadel_CatAnimating", (context, decoder) => new CCitadel_CatAnimating(context, decoder)},
        {"CCitadel_DeployablePreview", (context, decoder) => new CCitadel_DeployablePreview(context, decoder)},
        {"CCitadel_Destroyable_Building", (context, decoder) => new CCitadel_Destroyable_Building(context, decoder)},
        {"CCitadel_DynamicProp", (context, decoder) => new CCitadel_DynamicProp(context, decoder)},
        {"CCitadel_FissureWall", (context, decoder) => new CCitadel_FissureWall(context, decoder)},
        {"CCitadel_GrandFinaleStage", (context, decoder) => new CCitadel_GrandFinaleStage(context, decoder)},
        {"CCitadel_HeroTestOrbSpawner", (context, decoder) => new CCitadel_HeroTestOrbSpawner(context, decoder)},
        {"CCitadel_Ice_Dome_Blocker", (context, decoder) => new CCitadel_Ice_Dome_Blocker(context, decoder)},
        {"CCitadel_Ice_Path_Shard_Physics", (context, decoder) => new CCitadel_Ice_Path_Shard_Physics(context, decoder)},
        {"CCitadel_Item", (context, decoder) => new CCitadel_Item(context, decoder)},
        {"CCitadel_Item_ActiveReload", (context, decoder) => new CCitadel_Item_ActiveReload(context, decoder)},
        {"CCitadel_Item_AOE_Tech_Shield", (context, decoder) => new CCitadel_Item_AOE_Tech_Shield(context, decoder)},
        {"CCitadel_Item_AOERoot", (context, decoder) => new CCitadel_Item_AOERoot(context, decoder)},
        {"CCitadel_Item_Aura_Base", (context, decoder) => new CCitadel_Item_Aura_Base(context, decoder)},
        {"CCitadel_Item_BaseProjectileAOEModifier", (context, decoder) => new CCitadel_Item_BaseProjectileAOEModifier(context, decoder)},
        {"CCitadel_Item_Bubble", (context, decoder) => new CCitadel_Item_Bubble(context, decoder)},
        {"CCitadel_Item_Camouflage", (context, decoder) => new CCitadel_Item_Camouflage(context, decoder)},
        {"CCitadel_Item_Charge_Mastery", (context, decoder) => new CCitadel_Item_Charge_Mastery(context, decoder)},
        {"CCitadel_Item_CheatDeath", (context, decoder) => new CCitadel_Item_CheatDeath(context, decoder)},
        {"CCitadel_Item_ColdFront", (context, decoder) => new CCitadel_Item_ColdFront(context, decoder)},
        {"CCitadel_Item_ComboBreaker", (context, decoder) => new CCitadel_Item_ComboBreaker(context, decoder)},
        {"CCitadel_Item_Containment", (context, decoder) => new CCitadel_Item_Containment(context, decoder)},
        {"CCitadel_Item_Disarm", (context, decoder) => new CCitadel_Item_Disarm(context, decoder)},
        {"CCitadel_Item_DivinersKevlar", (context, decoder) => new CCitadel_Item_DivinersKevlar(context, decoder)},
        {"CCitadel_Item_DPS_Aura", (context, decoder) => new CCitadel_Item_DPS_Aura(context, decoder)},
        {"CCitadel_Item_Empty", (context, decoder) => new CCitadel_Item_Empty(context, decoder)},
        {"CCitadel_Item_HealthRegenAura", (context, decoder) => new CCitadel_Item_HealthRegenAura(context, decoder)},
        {"CCitadel_Item_Intensifying_Clip", (context, decoder) => new CCitadel_Item_Intensifying_Clip(context, decoder)},
        {"CCitadel_Item_ModDisruptor", (context, decoder) => new CCitadel_Item_ModDisruptor(context, decoder)},
        {"CCitadel_Item_PhantomStrike", (context, decoder) => new CCitadel_Item_PhantomStrike(context, decoder)},
        {"CCitadel_Item_PowerShard", (context, decoder) => new CCitadel_Item_PowerShard(context, decoder)},
        {"CCitadel_Item_QuickSilver", (context, decoder) => new CCitadel_Item_QuickSilver(context, decoder)},
        {"CCitadel_Item_Refresher", (context, decoder) => new CCitadel_Item_Refresher(context, decoder)},
        {"CCitadel_Item_RejuvTrackingProjectile", (context, decoder) => new CCitadel_Item_RejuvTrackingProjectile(context, decoder)},
        {"CCitadel_Item_RescueBeam", (context, decoder) => new CCitadel_Item_RescueBeam(context, decoder)},
        {"CCitadel_Item_Savior", (context, decoder) => new CCitadel_Item_Savior(context, decoder)},
        {"CCitadel_Item_SelfBuffModifier", (context, decoder) => new CCitadel_Item_SelfBuffModifier(context, decoder)},
        {"CCitadel_Item_SingleTargetStun", (context, decoder) => new CCitadel_Item_SingleTargetStun(context, decoder)},
        {"CCitadel_Item_Stasis_Bomb", (context, decoder) => new CCitadel_Item_Stasis_Bomb(context, decoder)},
        {"CCitadel_Item_TechCleave", (context, decoder) => new CCitadel_Item_TechCleave(context, decoder)},
        {"CCitadel_Item_TechDamagePulse", (context, decoder) => new CCitadel_Item_TechDamagePulse(context, decoder)},
        {"CCitadel_Item_TrackingProjectileApplyModifier", (context, decoder) => new CCitadel_Item_TrackingProjectileApplyModifier(context, decoder)},
        {"CCitadel_Item_WarpStone", (context, decoder) => new CCitadel_Item_WarpStone(context, decoder)},
        {"CCitadel_MobileResupply", (context, decoder) => new CCitadel_MobileResupply(context, decoder)},
        {"CCitadel_Nano_Predatory_Statue", (context, decoder) => new CCitadel_Nano_Predatory_Statue(context, decoder)},
        {"CCitadel_PestilenceDroneDispenser", (context, decoder) => new CCitadel_PestilenceDroneDispenser(context, decoder)},
        {"CCitadel_PickupItemSpawner", (context, decoder) => new CCitadel_PickupItemSpawner(context, decoder)},
        {"CCitadel_Projectile_Archer_ChargedShot", (context, decoder) => new CCitadel_Projectile_Archer_ChargedShot(context, decoder)},
        {"CCitadel_Projectile_Bebop_Hook", (context, decoder) => new CCitadel_Projectile_Bebop_Hook(context, decoder)},
        {"CCitadel_Projectile_BloodBomb", (context, decoder) => new CCitadel_Projectile_BloodBomb(context, decoder)},
        {"CCitadel_Projectile_Cyclone", (context, decoder) => new CCitadel_Projectile_Cyclone(context, decoder)},
        {"CCitadel_Projectile_DustStorm", (context, decoder) => new CCitadel_Projectile_DustStorm(context, decoder)},
        {"CCitadel_Projectile_Guided_Arrow", (context, decoder) => new CCitadel_Projectile_Guided_Arrow(context, decoder)},
        {"CCitadel_Projectile_HookBlade", (context, decoder) => new CCitadel_Projectile_HookBlade(context, decoder)},
        {"CCitadel_Projectile_Petrify", (context, decoder) => new CCitadel_Projectile_Petrify(context, decoder)},
        {"CCitadel_Projectile_Pillar", (context, decoder) => new CCitadel_Projectile_Pillar(context, decoder)},
        {"CCitadel_Projectile_RocketLauncher_Rocket", (context, decoder) => new CCitadel_Projectile_RocketLauncher_Rocket(context, decoder)},
        {"CCitadel_Projectile_SettingSun", (context, decoder) => new CCitadel_Projectile_SettingSun(context, decoder)},
        {"CCitadel_Projectile_Tier2Boss_RocketBarrage", (context, decoder) => new CCitadel_Projectile_Tier2Boss_RocketBarrage(context, decoder)},
        {"CCitadel_Projectile_Viscous_GooGrenade", (context, decoder) => new CCitadel_Projectile_Viscous_GooGrenade(context, decoder)},
        {"CCitadel_Projectile_Wrecker_Teleport", (context, decoder) => new CCitadel_Projectile_Wrecker_Teleport(context, decoder)},
        {"CCitadel_Projectile_WreckingBall", (context, decoder) => new CCitadel_Projectile_WreckingBall(context, decoder)},
        {"CCitadel_RestorativeGooCube", (context, decoder) => new CCitadel_RestorativeGooCube(context, decoder)},
        {"CCitadel_Shield", (context, decoder) => new CCitadel_Shield(context, decoder)},
        {"CCitadel_TechUpgrade_Infuser", (context, decoder) => new CCitadel_TechUpgrade_Infuser(context, decoder)},
        {"CCitadel_TechUpgrade_SuperAcolyteGloves", (context, decoder) => new CCitadel_TechUpgrade_SuperAcolyteGloves(context, decoder)},
        {"CCitadel_Upgrade_AerialAssault", (context, decoder) => new CCitadel_Upgrade_AerialAssault(context, decoder)},
        {"CCitadel_Upgrade_AmmoScavenger", (context, decoder) => new CCitadel_Upgrade_AmmoScavenger(context, decoder)},
        {"CCitadel_Upgrade_MagicCarpet", (context, decoder) => new CCitadel_Upgrade_MagicCarpet(context, decoder)},
        {"CCitadel_Upgrade_OverdriveClip", (context, decoder) => new CCitadel_Upgrade_OverdriveClip(context, decoder)},
        {"CCitadel_Upgrade_StabilizingTripod", (context, decoder) => new CCitadel_Upgrade_StabilizingTripod(context, decoder)},
        {"CCitadel_Upgrade_WeaponPowerForHealth", (context, decoder) => new CCitadel_Upgrade_WeaponPowerForHealth(context, decoder)},
        {"CCitadel_UtilityUpgrade_AOESmokeBomb", (context, decoder) => new CCitadel_UtilityUpgrade_AOESmokeBomb(context, decoder)},
        {"CCitadel_UtilityUpgrade_DebuffImmunity", (context, decoder) => new CCitadel_UtilityUpgrade_DebuffImmunity(context, decoder)},
        {"CCitadel_UtilityUpgrade_HealthNova", (context, decoder) => new CCitadel_UtilityUpgrade_HealthNova(context, decoder)},
        {"CCitadel_UtilityUpgrade_RocketBooster", (context, decoder) => new CCitadel_UtilityUpgrade_RocketBooster(context, decoder)},
        {"CCitadel_UtilityUpgrade_RocketBoots", (context, decoder) => new CCitadel_UtilityUpgrade_RocketBoots(context, decoder)},
        {"CCitadel_WeaponUpgrade_BansheeSlugs", (context, decoder) => new CCitadel_WeaponUpgrade_BansheeSlugs(context, decoder)},
        {"CCitadel_WeaponUpgrade_BurstFire", (context, decoder) => new CCitadel_WeaponUpgrade_BurstFire(context, decoder)},
        {"CCitadel_WeaponUpgrade_FireRateAura", (context, decoder) => new CCitadel_WeaponUpgrade_FireRateAura(context, decoder)},
        {"CCitadel_WeaponUpgrade_GlassCannon", (context, decoder) => new CCitadel_WeaponUpgrade_GlassCannon(context, decoder)},
        {"CCitadel_WeaponUpgrade_Headhunter", (context, decoder) => new CCitadel_WeaponUpgrade_Headhunter(context, decoder)},
        {"CCitadel_WeaponUpgrade_HeadshotBooster", (context, decoder) => new CCitadel_WeaponUpgrade_HeadshotBooster(context, decoder)},
        {"CCitadel_WeaponUpgrade_InstantReload", (context, decoder) => new CCitadel_WeaponUpgrade_InstantReload(context, decoder)},
        {"CCitadel_WeaponUpgrade_Ricochet", (context, decoder) => new CCitadel_WeaponUpgrade_Ricochet(context, decoder)},
        {"CCitadel_WeaponUpgrade_SiphonBullets", (context, decoder) => new CCitadel_WeaponUpgrade_SiphonBullets(context, decoder)},
        {"CCitadel_WeaponUpgrade_SurgingPower", (context, decoder) => new CCitadel_WeaponUpgrade_SurgingPower(context, decoder)},
        {"CCitadel_WeaponUpgrade_WeaponEater", (context, decoder) => new CCitadel_WeaponUpgrade_WeaponEater(context, decoder)},
        {"CCitadelAnimatingModelEntity", (context, decoder) => new CCitadelAnimatingModelEntity(context, decoder)},
        {"CCitadelBaseAbility", (context, decoder) => new CCitadelBaseAbility(context, decoder)},
        {"CCitadelBaseAbilityServerOnly", (context, decoder) => new CCitadelBaseAbilityServerOnly(context, decoder)},
        {"CCitadelBaseDashCastAbility", (context, decoder) => new CCitadelBaseDashCastAbility(context, decoder)},
        {"CCitadelBaseLockonAbility", (context, decoder) => new CCitadelBaseLockonAbility(context, decoder)},
        {"CCitadelBaseShivAbility", (context, decoder) => new CCitadelBaseShivAbility(context, decoder)},
        {"CCitadelBaseTriggerAbility", (context, decoder) => new CCitadelBaseTriggerAbility(context, decoder)},
        {"CCitadelBaseYamatoAbility", (context, decoder) => new CCitadelBaseYamatoAbility(context, decoder)},
        {"CCitadelBoomerangProjectile", (context, decoder) => new CCitadelBoomerangProjectile(context, decoder)},
        {"CCitadelBulletTimeWarp", (context, decoder) => new CCitadelBulletTimeWarp(context, decoder)},
        {"CCitadelCatapultTrigger", (context, decoder) => new CCitadelCatapultTrigger(context, decoder)},
        {"CCitadelClimbRopeTrigger", (context, decoder) => new CCitadelClimbRopeTrigger(context, decoder)},
        {"CCitadelControlPointTrigger", (context, decoder) => new CCitadelControlPointTrigger(context, decoder)},
        {"CCitadelGameRulesProxy", (context, decoder) => new CCitadelGameRulesProxy(context, decoder)},
        {"CCitadelHornetStingProjectile", (context, decoder) => new CCitadelHornetStingProjectile(context, decoder)},
        {"CCitadelIdolReturnTrigger", (context, decoder) => new CCitadelIdolReturnTrigger(context, decoder)},
        {"CCitadelItemPickup", (context, decoder) => new CCitadelItemPickup(context, decoder)},
        {"CCitadelItemPickupIdol", (context, decoder) => new CCitadelItemPickupIdol(context, decoder)},
        {"CCitadelItemPickupRejuv", (context, decoder) => new CCitadelItemPickupRejuv(context, decoder)},
        {"CCitadelItemPickupRejuvHeroTest", (context, decoder) => new CCitadelItemPickupRejuvHeroTest(context, decoder)},
        {"CCitadelMinimapBoundary", (context, decoder) => new CCitadelMinimapBoundary(context, decoder)},
        {"CCitadelModelEntity", (context, decoder) => new CCitadelModelEntity(context, decoder)},
        {"CCitadelObserverPawn", (context, decoder) => new CCitadelObserverPawn(context, decoder)},
        {"CCitadelPayload", (context, decoder) => new CCitadelPayload(context, decoder)},
        {"CCitadelPlayerBotNPCBrain", (context, decoder) => new CCitadelPlayerBotNPCBrain(context, decoder)},
        {"CCitadelPlayerController", (context, decoder) => new CCitadelPlayerController(context, decoder)},
        {"CCitadelPlayerPawn", (context, decoder) => new CCitadelPlayerPawn(context, decoder)},
        {"CCitadelPlayerPawnBase", (context, decoder) => new CCitadelPlayerPawnBase(context, decoder)},
        {"CCitadelPositionHomingProjectile", (context, decoder) => new CCitadelPositionHomingProjectile(context, decoder)},
        {"CCitadelPreviewPlayerController", (context, decoder) => new CCitadelPreviewPlayerController(context, decoder)},
        {"CCitadelProjectile", (context, decoder) => new CCitadelProjectile(context, decoder)},
        {"CCitadelProjectile_ImmobilizeTrap", (context, decoder) => new CCitadelProjectile_ImmobilizeTrap(context, decoder)},
        {"CCitadelSoundOpvarSetOBB", (context, decoder) => new CCitadelSoundOpvarSetOBB(context, decoder)},
        {"CCitadelSpawnBlocker", (context, decoder) => new CCitadelSpawnBlocker(context, decoder)},
        {"CCitadelSpectateDirectedCamera", (context, decoder) => new CCitadelSpectateDirectedCamera(context, decoder)},
        {"CCitadelSpectateNode", (context, decoder) => new CCitadelSpectateNode(context, decoder)},
        {"CCitadelTeam", (context, decoder) => new CCitadelTeam(context, decoder)},
        {"CCitadelTeleportTrigger", (context, decoder) => new CCitadelTeleportTrigger(context, decoder)},
        {"CCitadelTrackedProjectile", (context, decoder) => new CCitadelTrackedProjectile(context, decoder)},
        {"CCitadelTrooperMinimap", (context, decoder) => new CCitadelTrooperMinimap(context, decoder)},
        {"CCitadelViscousBall", (context, decoder) => new CCitadelViscousBall(context, decoder)},
        {"CCitadelZipLineNode", (context, decoder) => new CCitadelZipLineNode(context, decoder)},
        {"CCitadelZiplinePath", (context, decoder) => new CCitadelZiplinePath(context, decoder)},
        {"CColorCorrection", (context, decoder) => new CColorCorrection(context, decoder)},
        {"CColorCorrectionVolume", (context, decoder) => new CColorCorrectionVolume(context, decoder)},
        {"CConditionalCollidable", (context, decoder) => new CConditionalCollidable(context, decoder)},
        {"CDynamicLight", (context, decoder) => new CDynamicLight(context, decoder)},
        {"CDynamicProp", (context, decoder) => new CDynamicProp(context, decoder)},
        {"CEconEntity", (context, decoder) => new CEconEntity(context, decoder)},
        {"CEconWearable", (context, decoder) => new CEconWearable(context, decoder)},
        {"CEntityDissolve", (context, decoder) => new CEntityDissolve(context, decoder)},
        {"CEntityFlame", (context, decoder) => new CEntityFlame(context, decoder)},
        {"CEnvCombinedLightProbeVolume", (context, decoder) => new CEnvCombinedLightProbeVolume(context, decoder)},
        {"CEnvCubemap", (context, decoder) => new CEnvCubemap(context, decoder)},
        {"CEnvCubemapFog", (context, decoder) => new CEnvCubemapFog(context, decoder)},
        {"CEnvDecal", (context, decoder) => new CEnvDecal(context, decoder)},
        {"CEnvDetailController", (context, decoder) => new CEnvDetailController(context, decoder)},
        {"CEnvLightProbeVolume", (context, decoder) => new CEnvLightProbeVolume(context, decoder)},
        {"CEnvParticleGlow", (context, decoder) => new CEnvParticleGlow(context, decoder)},
        {"CEnvProjectedTexture", (context, decoder) => new CEnvProjectedTexture(context, decoder)},
        {"CEnvScreenOverlay", (context, decoder) => new CEnvScreenOverlay(context, decoder)},
        {"CEnvSky", (context, decoder) => new CEnvSky(context, decoder)},
        {"CEnvSoundscape", (context, decoder) => new CEnvSoundscape(context, decoder)},
        {"CEnvVolumetricFogController", (context, decoder) => new CEnvVolumetricFogController(context, decoder)},
        {"CEnvVolumetricFogVolume", (context, decoder) => new CEnvVolumetricFogVolume(context, decoder)},
        {"CEnvWind", (context, decoder) => new CEnvWind(context, decoder)},
        {"CFireSmoke", (context, decoder) => new CFireSmoke(context, decoder)},
        {"CFish", (context, decoder) => new CFish(context, decoder)},
        {"CFogController", (context, decoder) => new CFogController(context, decoder)},
        {"CFuncBrush", (context, decoder) => new CFuncBrush(context, decoder)},
        {"CFuncElectrifiedVolume", (context, decoder) => new CFuncElectrifiedVolume(context, decoder)},
        {"CFuncLadder", (context, decoder) => new CFuncLadder(context, decoder)},
        {"CFuncMonitor", (context, decoder) => new CFuncMonitor(context, decoder)},
        {"CFuncMoveLinear", (context, decoder) => new CFuncMoveLinear(context, decoder)},
        {"CFuncMover", (context, decoder) => new CFuncMover(context, decoder)},
        {"CFuncRotating", (context, decoder) => new CFuncRotating(context, decoder)},
        {"CFuncTrackTrain", (context, decoder) => new CFuncTrackTrain(context, decoder)},
        {"CGameRulesProxy", (context, decoder) => new CGameRulesProxy(context, decoder)},
        {"CGradientFog", (context, decoder) => new CGradientFog(context, decoder)},
        {"CHandleTest", (context, decoder) => new CHandleTest(context, decoder)},
        {"CInfoLadderDismount", (context, decoder) => new CInfoLadderDismount(context, decoder)},
        {"CInfoOffscreenPanoramaTexture", (context, decoder) => new CInfoOffscreenPanoramaTexture(context, decoder)},
        {"CInfoVisibilityBox", (context, decoder) => new CInfoVisibilityBox(context, decoder)},
        {"CInfoWorldLayer", (context, decoder) => new CInfoWorldLayer(context, decoder)},
        {"CInWorldKeyBindPanel", (context, decoder) => new CInWorldKeyBindPanel(context, decoder)},
        {"CItem", (context, decoder) => new CItem(context, decoder)},
        {"CItem_FleetfootBoots", (context, decoder) => new CItem_FleetfootBoots(context, decoder)},
        {"CItem_RestorativeLocket", (context, decoder) => new CItem_RestorativeLocket(context, decoder)},
        {"CItem_WitheringWhip", (context, decoder) => new CItem_WitheringWhip(context, decoder)},
        {"CItemCrate", (context, decoder) => new CItemCrate(context, decoder)},
        {"CItemExplosiveBarrel", (context, decoder) => new CItemExplosiveBarrel(context, decoder)},
        {"CItemFlare", (context, decoder) => new CItemFlare(context, decoder)},
        {"CItemGeneric", (context, decoder) => new CItemGeneric(context, decoder)},
        {"CItemParachute", (context, decoder) => new CItemParachute(context, decoder)},
        {"CItemXP", (context, decoder) => new CItemXP(context, decoder)},
        {"CLaneNode", (context, decoder) => new CLaneNode(context, decoder)},
        {"CLightCapsuleEntity", (context, decoder) => new CLightCapsuleEntity(context, decoder)},
        {"CLightDirectionalEntity", (context, decoder) => new CLightDirectionalEntity(context, decoder)},
        {"CLightEntity", (context, decoder) => new CLightEntity(context, decoder)},
        {"CLightEnvironmentEntity", (context, decoder) => new CLightEnvironmentEntity(context, decoder)},
        {"CLightGlow", (context, decoder) => new CLightGlow(context, decoder)},
        {"CLightOrthoEntity", (context, decoder) => new CLightOrthoEntity(context, decoder)},
        {"CLightSpotEntity", (context, decoder) => new CLightSpotEntity(context, decoder)},
        {"CMiniMapMarker", (context, decoder) => new CMiniMapMarker(context, decoder)},
        {"CModelPointEntity", (context, decoder) => new CModelPointEntity(context, decoder)},
        {"CNPC_BaseDefenseSentry", (context, decoder) => new CNPC_BaseDefenseSentry(context, decoder)},
        {"CNPC_Boss_Tier2", (context, decoder) => new CNPC_Boss_Tier2(context, decoder)},
        {"CNPC_Boss_Tier3", (context, decoder) => new CNPC_Boss_Tier3(context, decoder)},
        {"CNPC_CarpetBombDrone", (context, decoder) => new CNPC_CarpetBombDrone(context, decoder)},
        {"CNPC_FieldSentry", (context, decoder) => new CNPC_FieldSentry(context, decoder)},
        {"CNPC_FlyingDrone", (context, decoder) => new CNPC_FlyingDrone(context, decoder)},
        {"CNPC_HeroCloneTrooper", (context, decoder) => new CNPC_HeroCloneTrooper(context, decoder)},
        {"CNPC_HeroDecoy", (context, decoder) => new CNPC_HeroDecoy(context, decoder)},
        {"CNPC_MidBoss", (context, decoder) => new CNPC_MidBoss(context, decoder)},
        {"CNPC_MidBossHeroTest", (context, decoder) => new CNPC_MidBossHeroTest(context, decoder)},
        {"CNPC_MortarSentry", (context, decoder) => new CNPC_MortarSentry(context, decoder)},
        {"CNPC_NanoRollermine", (context, decoder) => new CNPC_NanoRollermine(context, decoder)},
        {"CNPC_PestilenceDrone", (context, decoder) => new CNPC_PestilenceDrone(context, decoder)},
        {"CNPC_ShieldedSentry", (context, decoder) => new CNPC_ShieldedSentry(context, decoder)},
        {"CNPC_SimpleAnimatingAI", (context, decoder) => new CNPC_SimpleAnimatingAI(context, decoder)},
        {"CNPC_SurveillanceDrone", (context, decoder) => new CNPC_SurveillanceDrone(context, decoder)},
        {"CNPC_TeslaCoil", (context, decoder) => new CNPC_TeslaCoil(context, decoder)},
        {"CNPC_Trooper", (context, decoder) => new CNPC_Trooper(context, decoder)},
        {"CNPC_TrooperBarrackBoss", (context, decoder) => new CNPC_TrooperBarrackBoss(context, decoder)},
        {"CNPC_TrooperBoss", (context, decoder) => new CNPC_TrooperBoss(context, decoder)},
        {"CNPC_TrooperNeutral", (context, decoder) => new CNPC_TrooperNeutral(context, decoder)},
        {"CNPC_TrooperNeutralNodeMover", (context, decoder) => new CNPC_TrooperNeutralNodeMover(context, decoder)},
        {"CNPC_YakuzaGangster", (context, decoder) => new CNPC_YakuzaGangster(context, decoder)},
        {"COmniLight", (context, decoder) => new COmniLight(context, decoder)},
        {"CParticleSystem", (context, decoder) => new CParticleSystem(context, decoder)},
        {"CPathParticleRope", (context, decoder) => new CPathParticleRope(context, decoder)},
        {"CPathSimple", (context, decoder) => new CPathSimple(context, decoder)},
        {"CPhysBox", (context, decoder) => new CPhysBox(context, decoder)},
        {"CPhysicsProp", (context, decoder) => new CPhysicsProp(context, decoder)},
        {"CPhysMagnet", (context, decoder) => new CPhysMagnet(context, decoder)},
        {"CPlayerVisibility", (context, decoder) => new CPlayerVisibility(context, decoder)},
        {"CPointCamera", (context, decoder) => new CPointCamera(context, decoder)},
        {"CPointClientUIDialog", (context, decoder) => new CPointClientUIDialog(context, decoder)},
        {"CPointClientUIWorldPanel", (context, decoder) => new CPointClientUIWorldPanel(context, decoder)},
        {"CPointClientUIWorldTextPanel", (context, decoder) => new CPointClientUIWorldTextPanel(context, decoder)},
        {"CPointCommentaryNode", (context, decoder) => new CPointCommentaryNode(context, decoder)},
        {"CPointEntity", (context, decoder) => new CPointEntity(context, decoder)},
        {"CPointOrient", (context, decoder) => new CPointOrient(context, decoder)},
        {"CPointValueRemapper", (context, decoder) => new CPointValueRemapper(context, decoder)},
        {"CPointWorldText", (context, decoder) => new CPointWorldText(context, decoder)},
        {"CPostProcessingVolume", (context, decoder) => new CPostProcessingVolume(context, decoder)},
        {"CPrecipitation", (context, decoder) => new CPrecipitation(context, decoder)},
        {"CPrecipitationBlocker", (context, decoder) => new CPrecipitationBlocker(context, decoder)},
        {"CProjectile_Mirage_Tornado", (context, decoder) => new CProjectile_Mirage_Tornado(context, decoder)},
        {"CProjectile_Perched_Predator", (context, decoder) => new CProjectile_Perched_Predator(context, decoder)},
        {"CProjectile_Rolling_FireBall", (context, decoder) => new CProjectile_Rolling_FireBall(context, decoder)},
        {"CProjectile_Rutger_Rocket", (context, decoder) => new CProjectile_Rutger_Rocket(context, decoder)},
        {"CProjectile_Stomp_Projectile", (context, decoder) => new CProjectile_Stomp_Projectile(context, decoder)},
        {"CProjectile_Synth_Barrage", (context, decoder) => new CProjectile_Synth_Barrage(context, decoder)},
        {"CProjectile_Synth_PlasmaFlux", (context, decoder) => new CProjectile_Synth_PlasmaFlux(context, decoder)},
        {"CPropAnimatingBreakable", (context, decoder) => new CPropAnimatingBreakable(context, decoder)},
        {"CPropDoorRotating", (context, decoder) => new CPropDoorRotating(context, decoder)},
        {"CRagdollManager", (context, decoder) => new CRagdollManager(context, decoder)},
        {"CRagdollProp", (context, decoder) => new CRagdollProp(context, decoder)},
        {"CRagdollPropAttached", (context, decoder) => new CRagdollPropAttached(context, decoder)},
        {"CRectLight", (context, decoder) => new CRectLight(context, decoder)},
        {"CRopeKeyframe", (context, decoder) => new CRopeKeyframe(context, decoder)},
        {"CSceneEntity", (context, decoder) => new CSceneEntity(context, decoder)},
        {"CShatterGlassShardPhysics", (context, decoder) => new CShatterGlassShardPhysics(context, decoder)},
        {"CSkyCamera", (context, decoder) => new CSkyCamera(context, decoder)},
        {"CSoundAreaEntityBase", (context, decoder) => new CSoundAreaEntityBase(context, decoder)},
        {"CSoundAreaEntityOrientedBox", (context, decoder) => new CSoundAreaEntityOrientedBox(context, decoder)},
        {"CSoundAreaEntitySphere", (context, decoder) => new CSoundAreaEntitySphere(context, decoder)},
        {"CSoundEventAABBEntity", (context, decoder) => new CSoundEventAABBEntity(context, decoder)},
        {"CSoundEventEntity", (context, decoder) => new CSoundEventEntity(context, decoder)},
        {"CSoundEventOBBEntity", (context, decoder) => new CSoundEventOBBEntity(context, decoder)},
        {"CSoundEventPathCornerEntity", (context, decoder) => new CSoundEventPathCornerEntity(context, decoder)},
        {"CSoundEventSphereEntity", (context, decoder) => new CSoundEventSphereEntity(context, decoder)},
        {"CSoundOpvarSetAABBEntity", (context, decoder) => new CSoundOpvarSetAABBEntity(context, decoder)},
        {"CSoundOpvarSetAutoRoomEntity", (context, decoder) => new CSoundOpvarSetAutoRoomEntity(context, decoder)},
        {"CSoundOpvarSetOBBEntity", (context, decoder) => new CSoundOpvarSetOBBEntity(context, decoder)},
        {"CSoundOpvarSetOBBWindEntity", (context, decoder) => new CSoundOpvarSetOBBWindEntity(context, decoder)},
        {"CSoundOpvarSetPathCornerEntity", (context, decoder) => new CSoundOpvarSetPathCornerEntity(context, decoder)},
        {"CSoundOpvarSetPointBase", (context, decoder) => new CSoundOpvarSetPointBase(context, decoder)},
        {"CSoundOpvarSetPointEntity", (context, decoder) => new CSoundOpvarSetPointEntity(context, decoder)},
        {"CSpotlightEnd", (context, decoder) => new CSpotlightEnd(context, decoder)},
        {"CSprite", (context, decoder) => new CSprite(context, decoder)},
        {"CSpriteOriented", (context, decoder) => new CSpriteOriented(context, decoder)},
        {"CSun", (context, decoder) => new CSun(context, decoder)},
        {"CTeam", (context, decoder) => new CTeam(context, decoder)},
        {"CTeamRelativeParticleSystem", (context, decoder) => new CTeamRelativeParticleSystem(context, decoder)},
        {"CTextureBasedAnimatable", (context, decoder) => new CTextureBasedAnimatable(context, decoder)},
        {"CTier3BossAbility", (context, decoder) => new CTier3BossAbility(context, decoder)},
        {"CTonemapController2", (context, decoder) => new CTonemapController2(context, decoder)},
        {"CTriggerItemShop", (context, decoder) => new CTriggerItemShop(context, decoder)},
        {"CTriggerModifier", (context, decoder) => new CTriggerModifier(context, decoder)},
        {"CTriggerMultiple", (context, decoder) => new CTriggerMultiple(context, decoder)},
        {"CTriggerPhysics", (context, decoder) => new CTriggerPhysics(context, decoder)},
        {"CTriggerVolume", (context, decoder) => new CTriggerVolume(context, decoder)},
        {"CWaterBullet", (context, decoder) => new CWaterBullet(context, decoder)},
        {"CWorld", (context, decoder) => new CWorld(context, decoder)},
    };
}
