// <auto-generated />
// Generated from protocol v14005
#nullable enable
#pragma warning disable CS1591

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.CompilerServices;
using DemoFile;

namespace DemoFile.Sdk;

public enum AnimLoopMode : uint
{
    ANIM_LOOP_MODE_INVALID = 0xFFFFFFFF,
    ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
    ANIM_LOOP_MODE_LOOPING = 0x1,
    ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
    ANIM_LOOP_MODE_COUNT = 0x3,
}

public enum AttributeProviderTypes : uint
{
    PROVIDER_GENERIC = 0x0,
    PROVIDER_WEAPON = 0x1,
}

public enum BeamClipStyle : uint
{
    kNOCLIP = 0x0,
    kGEOCLIP = 0x1,
    kMODELCLIP = 0x2,
    kBEAMCLIPSTYLE_NUMBITS = 0x2,
}

public enum BeamType : uint
{
    BEAM_INVALID = 0x0,
    BEAM_POINTS = 0x1,
    BEAM_ENTPOINT = 0x2,
    BEAM_ENTS = 0x3,
    BEAM_HOSE = 0x4,
    BEAM_SPLINE = 0x5,
    BEAM_LASER = 0x6,
}

public enum CSPlayerBlockingUseAction : uint
{
    k_CSPlayerBlockingUseAction_None = 0x0,
    k_CSPlayerBlockingUseAction_DefusingDefault = 0x1,
    k_CSPlayerBlockingUseAction_DefusingWithKit = 0x2,
    k_CSPlayerBlockingUseAction_HostageGrabbing = 0x3,
    k_CSPlayerBlockingUseAction_HostageDropping = 0x4,
    k_CSPlayerBlockingUseAction_OpeningSafe = 0x5,
    k_CSPlayerBlockingUseAction_EquippingParachute = 0x6,
    k_CSPlayerBlockingUseAction_EquippingHeavyArmor = 0x7,
    k_CSPlayerBlockingUseAction_EquippingContract = 0x8,
    k_CSPlayerBlockingUseAction_EquippingTabletUpgrade = 0x9,
    k_CSPlayerBlockingUseAction_TakingOffHeavyArmor = 0xA,
    k_CSPlayerBlockingUseAction_PayingToOpenDoor = 0xB,
    k_CSPlayerBlockingUseAction_CancelingSpawnRappelling = 0xC,
    k_CSPlayerBlockingUseAction_EquippingExoJump = 0xD,
    k_CSPlayerBlockingUseAction_PickingUpBumpMine = 0xE,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Pickup = 0xF,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Place = 0x10,
    k_CSPlayerBlockingUseAction_MaxCount = 0x11,
}

public enum CSPlayerState : uint
{
    STATE_ACTIVE = 0x0,
    STATE_WELCOME = 0x1,
    STATE_PICKINGTEAM = 0x2,
    STATE_PICKINGCLASS = 0x3,
    STATE_DEATH_ANIM = 0x4,
    STATE_DEATH_WAIT_FOR_KEY = 0x5,
    STATE_OBSERVER_MODE = 0x6,
    STATE_GUNGAME_RESPAWN = 0x7,
    STATE_DORMANT = 0x8,
    NUM_PLAYER_STATES = 0x9,
}

public enum CSWeaponMode : uint
{
    Primary_Mode = 0x0,
    Secondary_Mode = 0x1,
    WeaponMode_MAX = 0x2,
}

public enum CSWeaponState : uint
{
    WEAPON_NOT_CARRIED = 0x0,
    WEAPON_IS_CARRIED_BY_PLAYER = 0x1,
    WEAPON_IS_ACTIVE = 0x2,
}

public enum DoorState : uint
{
    DOOR_STATE_CLOSED = 0x0,
    DOOR_STATE_OPENING = 0x1,
    DOOR_STATE_OPEN = 0x2,
    DOOR_STATE_CLOSING = 0x3,
    DOOR_STATE_AJAR = 0x4,
}

public enum EKillTypes : byte
{
    KILL_NONE = 0x0,
    KILL_DEFAULT = 0x1,
    KILL_HEADSHOT = 0x2,
    KILL_BLAST = 0x3,
    KILL_BURN = 0x4,
    KILL_SLASH = 0x5,
    KILL_SHOCK = 0x6,
    KILLTYPE_COUNT = 0x7,
}

public enum EntityDisolveType : uint
{
    ENTITY_DISSOLVE_INVALID = 0xFFFFFFFF,
    ENTITY_DISSOLVE_NORMAL = 0x0,
    ENTITY_DISSOLVE_ELECTRICAL = 0x1,
    ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
    ENTITY_DISSOLVE_CORE = 0x3,
}

public enum FixAngleSet : byte
{
    None = 0x0,
    Absolute = 0x1,
    Relative = 0x2,
}

public enum LoadoutSlot : uint
{
    LOADOUT_SLOT_PROMOTED = 0xFFFFFFFF,
    LOADOUT_SLOT_INVALID = 0xFFFFFFFF,
    LOADOUT_SLOT_MELEE = 0x0,
    LOADOUT_SLOT_C4 = 0x1,
    LOADOUT_SLOT_FIRST_AUTO_BUY_WEAPON = 0x0,
    LOADOUT_SLOT_LAST_AUTO_BUY_WEAPON = 0x1,
    LOADOUT_SLOT_SECONDARY0 = 0x2,
    LOADOUT_SLOT_SECONDARY1 = 0x3,
    LOADOUT_SLOT_SECONDARY2 = 0x4,
    LOADOUT_SLOT_SECONDARY3 = 0x5,
    LOADOUT_SLOT_SECONDARY4 = 0x6,
    LOADOUT_SLOT_SECONDARY5 = 0x7,
    LOADOUT_SLOT_SMG0 = 0x8,
    LOADOUT_SLOT_SMG1 = 0x9,
    LOADOUT_SLOT_SMG2 = 0xA,
    LOADOUT_SLOT_SMG3 = 0xB,
    LOADOUT_SLOT_SMG4 = 0xC,
    LOADOUT_SLOT_SMG5 = 0xD,
    LOADOUT_SLOT_RIFLE0 = 0xE,
    LOADOUT_SLOT_RIFLE1 = 0xF,
    LOADOUT_SLOT_RIFLE2 = 0x10,
    LOADOUT_SLOT_RIFLE3 = 0x11,
    LOADOUT_SLOT_RIFLE4 = 0x12,
    LOADOUT_SLOT_RIFLE5 = 0x13,
    LOADOUT_SLOT_HEAVY0 = 0x14,
    LOADOUT_SLOT_HEAVY1 = 0x15,
    LOADOUT_SLOT_HEAVY2 = 0x16,
    LOADOUT_SLOT_HEAVY3 = 0x17,
    LOADOUT_SLOT_HEAVY4 = 0x18,
    LOADOUT_SLOT_HEAVY5 = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_WEAPON = 0x2,
    LOADOUT_SLOT_LAST_WHEEL_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_PRIMARY_WEAPON = 0x8,
    LOADOUT_SLOT_LAST_PRIMARY_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_GRENADE = 0x1A,
    LOADOUT_SLOT_GRENADE0 = 0x1A,
    LOADOUT_SLOT_GRENADE1 = 0x1B,
    LOADOUT_SLOT_GRENADE2 = 0x1C,
    LOADOUT_SLOT_GRENADE3 = 0x1D,
    LOADOUT_SLOT_GRENADE4 = 0x1E,
    LOADOUT_SLOT_GRENADE5 = 0x1F,
    LOADOUT_SLOT_LAST_WHEEL_GRENADE = 0x1F,
    LOADOUT_SLOT_EQUIPMENT0 = 0x20,
    LOADOUT_SLOT_EQUIPMENT1 = 0x21,
    LOADOUT_SLOT_EQUIPMENT2 = 0x22,
    LOADOUT_SLOT_EQUIPMENT3 = 0x23,
    LOADOUT_SLOT_EQUIPMENT4 = 0x24,
    LOADOUT_SLOT_EQUIPMENT5 = 0x25,
    LOADOUT_SLOT_FIRST_WHEEL_EQUIPMENT = 0x20,
    LOADOUT_SLOT_LAST_WHEEL_EQUIPMENT = 0x25,
    LOADOUT_SLOT_CLOTHING_CUSTOMPLAYER = 0x26,
    LOADOUT_SLOT_PET = 0x27,
    LOADOUT_SLOT_CLOTHING_FACEMASK = 0x28,
    LOADOUT_SLOT_CLOTHING_HANDS = 0x29,
    LOADOUT_SLOT_FIRST_COSMETIC = 0x29,
    LOADOUT_SLOT_LAST_COSMETIC = 0x29,
    LOADOUT_SLOT_CLOTHING_EYEWEAR = 0x2A,
    LOADOUT_SLOT_CLOTHING_HAT = 0x2B,
    LOADOUT_SLOT_CLOTHING_LOWERBODY = 0x2C,
    LOADOUT_SLOT_CLOTHING_TORSO = 0x2D,
    LOADOUT_SLOT_CLOTHING_APPEARANCE = 0x2E,
    LOADOUT_SLOT_MISC0 = 0x2F,
    LOADOUT_SLOT_MISC1 = 0x30,
    LOADOUT_SLOT_MISC2 = 0x31,
    LOADOUT_SLOT_MISC3 = 0x32,
    LOADOUT_SLOT_MISC4 = 0x33,
    LOADOUT_SLOT_MISC5 = 0x34,
    LOADOUT_SLOT_MISC6 = 0x35,
    LOADOUT_SLOT_MUSICKIT = 0x36,
    LOADOUT_SLOT_FLAIR0 = 0x37,
    LOADOUT_SLOT_SPRAY0 = 0x38,
    LOADOUT_SLOT_FIRST_ALL_CHARACTER = 0x36,
    LOADOUT_SLOT_LAST_ALL_CHARACTER = 0x38,
    LOADOUT_SLOT_COUNT = 0x39,
}

public enum MedalRank : uint
{
    MEDAL_RANK_NONE = 0x0,
    MEDAL_RANK_BRONZE = 0x1,
    MEDAL_RANK_SILVER = 0x2,
    MEDAL_RANK_GOLD = 0x3,
    MEDAL_RANK_COUNT = 0x4,
}

public enum MoveCollide : byte
{
    MOVECOLLIDE_DEFAULT = 0x0,
    MOVECOLLIDE_FLY_BOUNCE = 0x1,
    MOVECOLLIDE_FLY_CUSTOM = 0x2,
    MOVECOLLIDE_FLY_SLIDE = 0x3,
    MOVECOLLIDE_COUNT = 0x4,
    MOVECOLLIDE_MAX_BITS = 0x3,
}

public enum MoveType : byte
{
    MOVETYPE_NONE = 0x0,
    MOVETYPE_OBSOLETE = 0x1,
    MOVETYPE_WALK = 0x2,
    MOVETYPE_FLY = 0x3,
    MOVETYPE_FLYGRAVITY = 0x4,
    MOVETYPE_VPHYSICS = 0x5,
    MOVETYPE_PUSH = 0x6,
    MOVETYPE_NOCLIP = 0x7,
    MOVETYPE_OBSERVER = 0x8,
    MOVETYPE_LADDER = 0x9,
    MOVETYPE_CUSTOM = 0xA,
    MOVETYPE_LAST = 0xB,
    MOVETYPE_INVALID = 0xB,
    MOVETYPE_MAX_BITS = 0x5,
}

public enum PlayerAnimEvent : uint
{
    PLAYERANIMEVENT_FIRE_GUN_PRIMARY = 0x0,
    PLAYERANIMEVENT_FIRE_GUN_SECONDARY = 0x1,
    PLAYERANIMEVENT_GRENADE_PULL_PIN = 0x2,
    PLAYERANIMEVENT_THROW_GRENADE = 0x3,
    PLAYERANIMEVENT_JUMP = 0x4,
    PLAYERANIMEVENT_RELOAD = 0x5,
    PLAYERANIMEVENT_CLEAR_FIRING = 0x6,
    PLAYERANIMEVENT_DEPLOY = 0x7,
    PLAYERANIMEVENT_SILENCER_STATE = 0x8,
    PLAYERANIMEVENT_SILENCER_TOGGLE = 0x9,
    PLAYERANIMEVENT_THROW_GRENADE_UNDERHAND = 0xA,
    PLAYERANIMEVENT_CATCH_WEAPON = 0xB,
    PLAYERANIMEVENT_LOOKATWEAPON_REQUEST = 0xC,
    PLAYERANIMEVENT_RELOAD_CANCEL_LOOKATWEAPON = 0xD,
    PLAYERANIMEVENT_HAULBACK = 0xE,
    PLAYERANIMEVENT_IDLE = 0xF,
    PLAYERANIMEVENT_STRIKE_HIT = 0x10,
    PLAYERANIMEVENT_STRIKE_MISS = 0x11,
    PLAYERANIMEVENT_BACKSTAB = 0x12,
    PLAYERANIMEVENT_DRYFIRE = 0x13,
    PLAYERANIMEVENT_FIDGET = 0x14,
    PLAYERANIMEVENT_RELEASE = 0x15,
    PLAYERANIMEVENT_TAUNT = 0x16,
    PLAYERANIMEVENT_COUNT = 0x17,
}

public enum PlayerConnectedState : uint
{
    PlayerNeverConnected = 0xFFFFFFFF,
    PlayerConnected = 0x0,
    PlayerConnecting = 0x1,
    PlayerReconnecting = 0x2,
    PlayerDisconnecting = 0x3,
    PlayerDisconnected = 0x4,
    PlayerReserved = 0x5,
}

public enum PointWorldTextJustifyHorizontal : uint
{
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2,
}

public enum PointWorldTextJustifyVertical : uint
{
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2,
}

public enum PointWorldTextReorientMode : uint
{
    POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
    POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1,
}

public enum QuestProgressReason : uint
{
    QUEST_NONINITIALIZED = 0x0,
    QUEST_OK = 0x1,
    QUEST_NOT_ENOUGH_PLAYERS = 0x2,
    QUEST_WARMUP = 0x3,
    QUEST_NOT_CONNECTED_TO_STEAM = 0x4,
    QUEST_NONOFFICIAL_SERVER = 0x5,
    QUEST_NO_ENTITLEMENT = 0x6,
    QUEST_NO_QUEST = 0x7,
    QUEST_PLAYER_IS_BOT = 0x8,
    QUEST_WRONG_MAP = 0x9,
    QUEST_WRONG_MODE = 0xA,
    QUEST_NOT_SYNCED_WITH_SERVER = 0xB,
    QUEST_REASON_MAX = 0xC,
}

public enum RenderFx : byte
{
    kRenderFxNone = 0x0,
    kRenderFxPulseSlow = 0x1,
    kRenderFxPulseFast = 0x2,
    kRenderFxPulseSlowWide = 0x3,
    kRenderFxPulseFastWide = 0x4,
    kRenderFxFadeSlow = 0x5,
    kRenderFxFadeFast = 0x6,
    kRenderFxSolidSlow = 0x7,
    kRenderFxSolidFast = 0x8,
    kRenderFxStrobeSlow = 0x9,
    kRenderFxStrobeFast = 0xA,
    kRenderFxStrobeFaster = 0xB,
    kRenderFxFlickerSlow = 0xC,
    kRenderFxFlickerFast = 0xD,
    kRenderFxNoDissipation = 0xE,
    kRenderFxFadeOut = 0xF,
    kRenderFxFadeIn = 0x10,
    kRenderFxPulseFastWider = 0x11,
    kRenderFxGlowShell = 0x12,
    kRenderFxMax = 0x13,
}

public enum RenderMode : byte
{
    kRenderNormal = 0x0,
    kRenderTransColor = 0x1,
    kRenderTransTexture = 0x2,
    kRenderGlow = 0x3,
    kRenderTransAlpha = 0x4,
    kRenderTransAdd = 0x5,
    kRenderEnvironmental = 0x6,
    kRenderTransAddFrameBlend = 0x7,
    kRenderTransAlphaAdd = 0x8,
    kRenderWorldGlow = 0x9,
    kRenderNone = 0xA,
    kRenderDevVisualizer = 0xB,
    kRenderModeCount = 0xC,
}

public enum ShardSolid : byte
{
    SHARD_SOLID = 0x0,
    SHARD_DEBRIS = 0x1,
}

public enum ShatterPanelMode : byte
{
    SHATTER_GLASS = 0x0,
    SHATTER_DRYWALL = 0x1,
}

public enum SolidType : byte
{
    SOLID_NONE = 0x0,
    SOLID_BSP = 0x1,
    SOLID_BBOX = 0x2,
    SOLID_OBB = 0x3,
    SOLID_SPHERE = 0x4,
    SOLID_POINT = 0x5,
    SOLID_VPHYSICS = 0x6,
    SOLID_CAPSULE = 0x7,
    SOLID_LAST = 0x8,
}

public enum SurroundingBoundsType : byte
{
    USE_OBB_COLLISION_BOUNDS = 0x0,
    USE_BEST_COLLISION_BOUNDS = 0x1,
    USE_HITBOXES = 0x2,
    USE_SPECIFIED_BOUNDS = 0x3,
    USE_GAME_CODE = 0x4,
    USE_ROTATION_EXPANDED_BOUNDS = 0x5,
    USE_ROTATION_EXPANDED_ORIENTED_BOUNDS = 0x6,
    USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x7,
    USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x8,
    SURROUNDING_TYPE_BIT_COUNT = 0x3,
}

public enum TakeDamageFlags : uint
{
    DFLAG_NONE = 0x0,
    DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
    DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
    DFLAG_SUPPRESS_EFFECTS = 0x4,
    DFLAG_PREVENT_DEATH = 0x8,
    DFLAG_FORCE_DEATH = 0x10,
    DFLAG_ALWAYS_GIB = 0x20,
    DFLAG_NEVER_GIB = 0x40,
    DFLAG_REMOVE_NO_RAGDOLL = 0x80,
    DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
    DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
    DFLAG_RADIUS_DMG = 0x400,
    DMG_LASTDFLAG = 0x400,
    DFLAG_IGNORE_ARMOR = 0x800,
    DFLAG_SUPPRESS_UTILREMOVE = 0x1000,
}

public enum ValueRemapperHapticsType : uint
{
    HaticsType_Default = 0x0,
    HaticsType_None = 0x1,
}

public enum ValueRemapperInputType : uint
{
    InputType_PlayerShootPosition = 0x0,
    InputType_PlayerShootPositionAroundAxis = 0x1,
}

public enum ValueRemapperMomentumType : uint
{
    MomentumType_None = 0x0,
    MomentumType_Friction = 0x1,
    MomentumType_SpringTowardSnapValue = 0x2,
    MomentumType_SpringAwayFromSnapValue = 0x3,
}

public enum ValueRemapperOutputType : uint
{
    OutputType_AnimationCycle = 0x0,
    OutputType_RotationX = 0x1,
    OutputType_RotationY = 0x2,
    OutputType_RotationZ = 0x3,
}

public enum ValueRemapperRatchetType : uint
{
    RatchetType_Absolute = 0x0,
    RatchetType_EachEngage = 0x1,
}

public enum WeaponAttackType : uint
{
    eInvalid = 0xFFFFFFFF,
    ePrimary = 0x0,
    eSecondary = 0x1,
    eCount = 0x2,
}

public partial class AudioParams
{
    // MNetworkEncoder "coord"
    public Vector[] LocalSound { get; private set; } = Array.Empty<Vector>();

    public Int32 SoundscapeIndex { get; private set; }

    public byte LocalBits { get; private set; }

    public Int32 SoundscapeEntityListIndex { get; private set; }

    public UInt32 SoundEventHash { get; private set; }

    internal static SendNodeDecoder<AudioParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "localSound")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.LocalSound.Length == 0) @this.LocalSound = new Vector[fixedArraySize];
                @this.LocalSound[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundscapeIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "localBits")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LocalBits = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeEntityListIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundscapeEntityListIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundEventHash")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundEventHash = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (AudioParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAK47 : CCSWeaponBaseGun
{
    internal CAK47(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAK47> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CAK47.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CAK47.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CAK47.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CAK47.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CAnimGraphNetworkedVariables
{
    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetBoolVarChanged"
    // MNetworkAlias "m_PredBoolVariables"
    public NetworkedVector<UInt32> PredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetByteVarChanged"
    // MNetworkAlias "m_PredByteVariables"
    public NetworkedVector<byte> PredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt16VarChanged"
    // MNetworkAlias "m_PredUInt16Variables"
    public NetworkedVector<UInt16> PredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetIntVarChanged"
    // MNetworkAlias "m_PredIntVariables"
    public NetworkedVector<Int32> PredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt32VarChanged"
    // MNetworkAlias "m_PredUInt32Variables"
    public NetworkedVector<UInt32> PredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetUInt64VarChanged"
    // MNetworkAlias "m_PredUInt64Variables"
    public NetworkedVector<UInt64> PredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetFloatVarChanged"
    // MNetworkAlias "m_PredFloatVariables"
    public NetworkedVector<float> PredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetVectorVarChanged"
    // MNetworkAlias "m_PredVectorVariables"
    public NetworkedVector<Vector> PredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetQuaternionVarChanged"
    // MNetworkAlias "m_PredQuaternionVariables"
    public NetworkedVector<Quaternion> PredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnNetGlobalSymbolVarChanged"
    // MNetworkAlias "m_PredGlobalSymbolVariables"
    public NetworkedVector<CGlobalSymbol> PredNetGlobalSymbolVariables { get; private set; } = new NetworkedVector<CGlobalSymbol>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOBoolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetBoolVariables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOByteVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetByteVariables"
    public NetworkedVector<byte> OwnerOnlyPredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt16VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt16Variables"
    public NetworkedVector<UInt16> OwnerOnlyPredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOIntVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetIntVariables"
    public NetworkedVector<Int32> OwnerOnlyPredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt32VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt32Variables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt64VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt64Variables"
    public NetworkedVector<UInt64> OwnerOnlyPredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOFloatVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetFloatVariables"
    public NetworkedVector<float> OwnerOnlyPredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOVectorVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetVectorVariables"
    public NetworkedVector<Vector> OwnerOnlyPredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOQuaternionVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetQuaternionVariables"
    public NetworkedVector<Quaternion> OwnerOnlyPredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOGlobalSymbolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetGlobalSymbolVariables"
    public NetworkedVector<CGlobalSymbol> OwnerOnlyPredNetGlobalSymbolVariables { get; private set; } = new NetworkedVector<CGlobalSymbol>();

    // MNetworkUserGroup "animationgraph"
    public Int32 BoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 OwnerOnlyBoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 RandomSeedOffset { get; private set; }

    // MNetworkUserGroup "animationgraph"
    // MNetworkChangeCallback "OnTeleportTimeChanged"
    public float LastTeleportTime { get; private set; }

    internal static SendNodeDecoder<CAnimGraphNetworkedVariables> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_PredBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredGlobalSymbolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_CGlobalSymbol(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PredNetGlobalSymbolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PredNetGlobalSymbolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PredNetGlobalSymbolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetGlobalSymbolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_CGlobalSymbol(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OwnerOnlyPredNetGlobalSymbolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OwnerOnlyPredNetGlobalSymbolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OwnerOnlyPredNetGlobalSymbolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_nBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerOnlyBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerOnlyBoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandomSeedOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RandomSeedOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastTeleportTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastTeleportTime = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByName "m_ProviderType"
// MNetworkIncludeByName "m_hOuter"
// MNetworkIncludeByName "m_iReapplyProvisionParity"
// MNetworkIncludeByName "m_Item"
public partial class CAttributeContainer : CAttributeManager
{
    public CEconItemView Item { get; private set; } = new();

    internal new static SendNodeDecoder<CAttributeContainer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Item")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAttributeContainer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Item, path, ref buffer);
            };
        }
        return CAttributeManager.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CAttributeList
{
    // MNetworkTypeAlias "CUtlVector< CEconItemAttribute >"
    public NetworkedVector<CEconItemAttribute> Attributes { get; private set; } = new NetworkedVector<CEconItemAttribute>();

    internal static SendNodeDecoder<CAttributeList> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Attributes")
        {
            var innerDecoder = decoderSet.GetDecoder<CEconItemAttribute>(field.FieldSerializerKey!.Value);
            return (CAttributeList @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Attributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.Attributes.EnsureSize(index + 1);
                    var element = @this.Attributes[index] ??= new CEconItemAttribute();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAttributeList @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAttributeManager
{
    public Int32 ReapplyProvisionParity { get; private set; }

    public CHandle<CBaseEntity> OuterHandle { get; private set; }

    public AttributeProviderTypes ProviderType { get; private set; }

    internal static SendNodeDecoder<CAttributeManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iReapplyProvisionParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReapplyProvisionParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOuter")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ProviderType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<AttributeProviderTypes>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProviderType = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CBarnLight : CBaseModelEntity
{
    internal CBarnLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool Enabled { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ColorMode { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ColorTemperature { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Brightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 DirectLight { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 BakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 LuminaireShape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float LuminaireSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float LuminaireAnisotropy { get; private set; }

    // MNetworkChangeCallback "StyleChanged"
    public NetworkedString LightStyleString { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public GameTime LightStyleStartTime { get; private set; } = new();

    public NetworkedVector<NetworkedString> QueuedLightStyleStrings { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<NetworkedString> LightStyleEvents { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<CHandle<CBaseModelEntity>> LightStyleTargets { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    // MNetworkChangeCallback "RenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Shape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SoftX { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SoftY { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float Skirt { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float SkirtNear { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector SizeParams { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public float Range { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector Shear { get; private set; }

    public Int32 BakeSpecularToCubemaps { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount 32
    public Vector BakeSpecularToCubemapsSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 CastShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ShadowMapSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 ShadowPriority { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool ContactShadow { get; private set; }

    public Int32 BounceLight { get; private set; }

    public float BounceScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float MinRoughness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector AlternateColor { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float AlternateColorBrightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 Fog { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FogStrength { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 FogShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FogScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float FadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ShadowFadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float ShadowFadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool PrecomputedFieldsValid { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMins { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMaxs { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent { get; private set; }

    internal new static SendNodeDecoder<CBarnLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nColorMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTemperature")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTemperature = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLuminaireShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LuminaireAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyleString")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleString = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_QueuedLightStyleStrings")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.QueuedLightStyleStrings.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.QueuedLightStyleStrings.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.QueuedLightStyleStrings[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleEvents")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.LightStyleEvents.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.LightStyleEvents.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.LightStyleEvents[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleTargets")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.LightStyleTargets.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.LightStyleTargets.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.LightStyleTargets[index] = element;
                }
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShape")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Shape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoftX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoftY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirt")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Skirt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirtNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkirtNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSizeParams")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SizeParams = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Range = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vShear")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Shear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakeSpecularToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakeSpecularToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBakeSpecularToCubemapsSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakeSpecularToCubemapsSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowMapSize")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowMapSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bContactShadow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ContactShadow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBounceLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BounceLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBounceScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BounceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinRoughness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAlternateColor")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlternateColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAlternateColorBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlternateColorBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFog")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Fog = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBarnLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBarnLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBarnLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBarnLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_bClientSideRagdoll"
public partial class CBaseAnimGraph : CBaseModelEntity
{
    internal CBaseAnimGraph(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool InitiallyPopulateInterpHistory { get; private set; }

    public bool AnimGraphUpdateEnabled { get; private set; }

    public Vector Force { get; private set; }

    public Int32 ForceBone { get; private set; }

    public PhysicsRagdollPose? RagdollPose { get; private set; }

    // MNetworkChangeCallback "OnClientRagdollChanged"
    public bool ClientRagdoll { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInitiallyPopulateInterpHistory")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitiallyPopulateInterpHistory = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphUpdateEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimGraphUpdateEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecForce")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Force = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceBone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceBone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pRagdollPose")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = PhysicsRagdollPose.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.RagdollPose = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.RagdollPose ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bClientRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientRagdoll = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseAnimGraph.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseAnimGraphController : CSkeletonAnimationController
{
    public CAnimGraphNetworkedVariables AnimGraphNetworkedVars { get; private set; } = new();

    // MNetworkSerializer "minusone"
    // MNetworkChangeCallback "OnNetworkedSequenceChanged"
    // MNetworkPriority 32
    public HSequence Sequence { get; private set; } = new();

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public GameTime SeqStartTime { get; private set; } = new();

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public float SeqFixedCycle { get; private set; }

    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    // MNetworkPriority 32
    public AnimLoopMode AnimLoopMode { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue -4
    // MNetworkMaxValue 12
    // MNetworkEncodeFlags 5
    // MNetworkPriority 32
    // MNetworkChangeCallback "OnNetworkedAnimationChanged"
    public float PlaybackRate { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraphController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animGraphNetworkedVars")
        {
            var innerDecoder = CAnimGraphNetworkedVariables.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AnimGraphNetworkedVars, path, ref buffer);
            };
        }
        if (field.VarName == "m_hSequence")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Sequence = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flSeqStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SeqStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSeqFixedCycle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SeqFixedCycle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAnimLoopMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<AnimLoopMode>(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimLoopMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPlaybackRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlaybackRate = decoder(ref buffer);
            };
        }
        return CSkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseButton : CBaseToggle
{
    internal CBaseButton(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseModelEntity> GlowEntityHandle { get; private set; }
    public CBaseModelEntity? GlowEntity => GlowEntityHandle.Get(Demo);

    public bool Usable { get; private set; }

    public NetworkedString DisplayText { get; private set; }

    internal new static SendNodeDecoder<CBaseButton> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_glowEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Usable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szDisplayText")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisplayText = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseButton.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseButton.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseButton.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseButton.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseClientUIEntity : CBaseModelEntity
{
    internal CBaseClientUIEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Enabled { get; private set; }

    public NetworkedString DialogXMLName { get; private set; }

    public NetworkedString PanelClassName { get; private set; }

    public NetworkedString PanelID { get; private set; }

    internal new static SendNodeDecoder<CBaseClientUIEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DialogXMLName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DialogXMLName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelClassName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelClassName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelID")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelID = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseClientUIEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
public partial class CBaseCombatCharacter : CBaseFlex
{
    internal CBaseCombatCharacter(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<CHandle<CEconWearable>> MyWearables { get; private set; } = new NetworkedVector<CHandle<CEconWearable>>();

    public float FieldOfView { get; private set; }

    internal new static SendNodeDecoder<CBaseCombatCharacter> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWearables")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CEconWearable>(field.FieldEncodingInfo);
            return (CBaseCombatCharacter @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.MyWearables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.MyWearables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.MyWearables[index] = element;
                }
            };
        }
        if (field.VarName == "m_flFieldOfView")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCombatCharacter @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FieldOfView = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseCombatCharacter.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseCSGrenade : CCSWeaponBase
{
    internal CBaseCSGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Redraw { get; private set; }

    // MNetworkChangeCallback "OnGrenadeStateChanged"
    public bool IsHeldByPlayer { get; private set; }

    // MNetworkChangeCallback "OnGrenadeStateChanged"
    public bool PinPulled { get; private set; }

    public bool JumpThrow { get; private set; }

    public bool ThrowAnimating { get; private set; }

    public GameTime ThrowTime { get; private set; } = new();

    public float ThrowStrength { get; private set; }

    public float ThrowStrengthApproach { get; private set; }

    public GameTime DropTime { get; private set; } = new();

    public GameTime PinPullTime { get; private set; } = new();

    public bool JustPulledPin { get; private set; }

    public GameTick NextHoldTick { get; private set; } = new();

    public float NextHoldFrac { get; private set; }

    public CHandle<CCSWeaponBase> SwitchToWeaponAfterThrowHandle { get; private set; }
    public CCSWeaponBase? SwitchToWeaponAfterThrow => SwitchToWeaponAfterThrowHandle.Get(Demo);

    internal new static SendNodeDecoder<CBaseCSGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bRedraw")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Redraw = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHeldByPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsHeldByPlayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPinPulled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PinPulled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bJumpThrow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpThrow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bThrowAnimating")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowAnimating = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fThrowTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flThrowStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flThrowStrengthApproach")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowStrengthApproach = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fDropTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DropTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fPinPullTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PinPullTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bJustPulledPin")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JustPulledPin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextHoldTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextHoldTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextHoldFrac")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextHoldFrac = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSwitchToWeaponAfterThrow")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSWeaponBase>(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SwitchToWeaponAfterThrowHandle = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseCSGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseCSGrenadeProjectile : CBaseGrenade
{
    internal CBaseCSGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector InitialPosition { get; private set; }

    public Vector InitialVelocity { get; private set; }

    public Int32 Bounces { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> ExplodeEffectIndex { get; private set; }

    public Int32 ExplodeEffectTickBegin { get; private set; }

    public Vector ExplodeEffectOrigin { get; private set; }

    internal new static SendNodeDecoder<CBaseCSGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vInitialPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vInitialVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBounces")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Bounces = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplodeEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplodeEffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplodeEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplodeEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecExplodeEffectOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplodeEffectOrigin = decoder(ref buffer);
            };
        }
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenadeProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseCSGrenadeProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenadeProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseCSGrenadeProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseDoor : CBaseToggle
{
    internal CBaseDoor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsUsable { get; private set; }

    internal new static SendNodeDecoder<CBaseDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsUsable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsUsable = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseDoor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseDoor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseDoor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseDoor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_bClientSideRagdoll"
// MNetworkExcludeByName "m_iMaxHealth"
// MNetworkExcludeByUserGroup "Water"
// MNetworkExcludeByUserGroup "Player"
// MNetworkExcludeByUserGroup "LocalPlayerExclusive"
// MNetworkExcludeByName "m_spawnflags"
// MNetworkExcludeByName "m_bTakesDamage"
// MNetworkExcludeByName "m_nTakeDamageFlags"
public partial class CBaseEntity : CEntityInstance
{
    internal CBaseEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CBodyComponent"
    // MNetworkAlias "CBodyComponent"
    // MNetworkTypeAlias "CBodyComponent"
    // MNetworkPriority 48
    public CBodyComponent? CBodyComponent { get; private set; }

    // MNetworkSerializer "ClampHealth"
    // MNetworkUserGroup "Player"
    // MNetworkPriority 32
    public Int32 Health { get; private set; }

    public Int32 MaxHealth { get; private set; }

    // MNetworkUserGroup "Player"
    // MNetworkPriority 32
    public byte LifeState { get; private set; }

    public bool TakesDamage { get; private set; }

    public TakeDamageFlags TakeDamageFlags { get; private set; }

    public bool IsPlatform { get; private set; }

    public MoveCollide MoveCollide { get; private set; }

    public MoveType MoveType { get; private set; }

    // MNetworkSendProxyRecipientsFilter
    public CUtlStringToken SubclassID { get; private set; }

    // MNetworkPriority 0
    // MNetworkSerializer "animTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float AnimTime { get; private set; }

    // MNetworkPriority 1
    // MNetworkSerializer "simulationTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float SimulationTime { get; private set; }

    public GameTime CreateTime { get; private set; } = new();

    public bool ClientSideRagdoll { get; private set; }

    public byte InterpolationFrame { get; private set; }

    public byte TeamNum { get; private set; }

    public UInt32 Spawnflags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTick NextThinkTick { get; private set; } = new();

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public UInt32 Flags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    public CNetworkVelocityVector Velocity { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Vector BaseVelocity { get; private set; }

    public CHandle<CBaseEntity> EffectEntityHandle { get; private set; }
    public CBaseEntity? EffectEntity => EffectEntityHandle.Get(Demo);

    // MNetworkPriority 32
    public CHandle<CBaseEntity> OwnerEntityHandle { get; private set; }
    public CBaseEntity? OwnerEntity => OwnerEntityHandle.Get(Demo);

    // MNetworkChangeCallback "OnEffectsChanged"
    public UInt32 Effects { get; private set; }

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public CHandle<CBaseEntity> GroundEntityHandle { get; private set; }
    public CBaseEntity? GroundEntity => GroundEntityHandle.Get(Demo);

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 4
    // MNetworkEncodeFlags 1
    // MNetworkUserGroup "LocalPlayerExclusive"
    public float Friction { get; private set; }

    // MNetworkEncoder "coord"
    public float Elasticity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float GravityScale { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float TimeScale { get; private set; }

    // MNetworkUserGroup "Water"
    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 8
    public float WaterLevel { get; private set; }

    public bool AnimatedEveryTick { get; private set; }

    public GameTime NavIgnoreUntilTime { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CBodyComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CBodyComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CBodyComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CBodyComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHealth")
        {
            var decoder = CreateDecoder_ClampHealth(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Health = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_iMaxHealth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lifeState")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LifeState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTakesDamage")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TakesDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTakeDamageFlags")
        {
            var decoder = FieldDecode.CreateDecoder_enum<TakeDamageFlags>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TakeDamageFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsPlatform")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsPlatform = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveCollide")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveCollide>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveCollide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveType>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSubclassID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SubclassID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnimTime")
        {
            var decoder = CreateDecoder_animTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimTime = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flSimulationTime")
        {
            var decoder = CreateDecoder_simulationTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SimulationTime = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flCreateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSideRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSideRagdoll = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ubInterpolationFrame")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InterpolationFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iTeamNum")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamNum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_spawnflags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Spawnflags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextThinkTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextThinkTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flags = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecVelocity")
        {
            var innerDecoder = CNetworkVelocityVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Velocity, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecBaseVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BaseVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hEffectEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOwnerEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEffects")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Effects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hGroundEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GroundEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFriction")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Friction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flElasticity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Elasticity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGravityScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GravityScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWaterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WaterLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimatedEveryTick")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimatedEveryTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNavIgnoreUntilTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NavIgnoreUntilTime = decoder(ref buffer);
            };
        }
        return CEntityInstance.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseFire : CBaseEntity
{
    internal CBaseFire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Scale { get; private set; }

    public float StartScale { get; private set; }

    public float ScaleTime { get; private set; }

    public UInt32 FireFlags { get; private set; }

    internal new static SendNodeDecoder<CBaseFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScaleTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireFlags = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseFlex : CBaseAnimGraph
{
    internal CBaseFlex(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount 12
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 1
    public NetworkedVector<float> FlexWeight { get; private set; } = new NetworkedVector<float>();

    // MNetworkEncoder "coord"
    public Vector LookTargetPosition { get; private set; }

    public bool Blinktoggle { get; private set; }

    internal new static SendNodeDecoder<CBaseFlex> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flexWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.FlexWeight.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.FlexWeight.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.FlexWeight[index] = element;
                }
            };
        }
        if (field.VarName == "m_vLookTargetPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LookTargetPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_blinktoggle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blinktoggle = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseFlex.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseFlex.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseFlex.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseFlex.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_fFlags"
// MNetworkIncludeByName "m_vecVelocity"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_nResetEventsParity"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByName "m_nNewSequenceParity"
public partial class CBaseGrenade : CBaseFlex
{
    internal CBaseGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsLive { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    public float DmgRadius { get; private set; }

    public GameTime DetonateTime { get; private set; } = new();

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    public float Damage { get; private set; }

    public CHandle<CCSPlayerPawn> ThrowerHandle { get; private set; }
    public CCSPlayerPawn? Thrower => ThrowerHandle.Get(Demo);

    internal new static SendNodeDecoder<CBaseGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsLive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsLive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DmgRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DmgRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDetonateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DetonateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDamage")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Damage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hThrower")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThrowerHandle = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseModelEntity : CBaseEntity
{
    internal CBaseModelEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CRenderComponent"
    // MNetworkAlias "CRenderComponent"
    // MNetworkTypeAlias "CRenderComponent"
    public CRenderComponent? CRenderComponent { get; private set; }

    // MNetworkUserGroup "CHitboxComponent"
    // MNetworkAlias "CHitboxComponent"
    // MNetworkTypeAlias "CHitboxComponent"
    public CHitboxComponent CHitboxComponent { get; private set; } = new();

    public RenderMode RenderMode { get; private set; }

    public RenderFx RenderFX { get; private set; }

    // MNetworkChangeCallback "OnColorChanged"
    public Color Render { get; private set; }

    // MNetworkChangeCallback "OnRenderAttributesChanged"
    public NetworkedVector<EntityRenderAttribute> RenderAttributes { get; private set; } = new NetworkedVector<EntityRenderAttribute>();

    public bool RenderToCubemaps { get; private set; }

    public CCollisionProperty Collision { get; private set; } = new();

    public CGlowProperty Glow { get; private set; } = new();

    public float GlowBackfaceMult { get; private set; }

    public float FadeMinDist { get; private set; }

    public float FadeMaxDist { get; private set; }

    public float FadeScale { get; private set; }

    public float ShadowStrength { get; private set; }

    public byte ObjectCulling { get; private set; }

    public Int32 AddDecal { get; private set; }

    public Vector DecalPosition { get; private set; }

    public Vector DecalForwardAxis { get; private set; }

    public float DecalHealBloodRate { get; private set; }

    public float DecalHealHeightRate { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity>> ConfigEntitiesToPropagateMaterialDecalsTo { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    // MNetworkPriority 32
    // MNetworkUserGroup "Player"
    public CNetworkViewOffsetVector ViewOffset { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CRenderComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CRenderComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CRenderComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CRenderComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CHitboxComponent")
        {
            var innerDecoder = CHitboxComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CHitboxComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_nRenderMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderMode>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderFX")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderFx>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderFX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrRender")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Render = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecRenderAttributes")
        {
            var innerDecoder = decoderSet.GetDecoder<EntityRenderAttribute>(field.FieldSerializerKey!.Value);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RenderAttributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.RenderAttributes.EnsureSize(index + 1);
                    var element = @this.RenderAttributes[index] ??= new EntityRenderAttribute();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Collision")
        {
            var innerDecoder = CCollisionProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Collision, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Glow")
        {
            var innerDecoder = CGlowProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Glow, path, ref buffer);
            };
        }
        if (field.VarName == "m_flGlowBackfaceMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowBackfaceMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nObjectCulling")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObjectCulling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAddDecal")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AddDecal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalForwardAxis")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalForwardAxis = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealBloodRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalHealBloodRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealHeightRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalHealHeightRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ConfigEntitiesToPropagateMaterialDecalsTo")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ConfigEntitiesToPropagateMaterialDecalsTo[index] = element;
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecViewOffset")
        {
            var innerDecoder = CNetworkViewOffsetVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ViewOffset, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseModelEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_pEntity"
// MNetworkIncludeByName "m_flSimulationTime"
// MNetworkIncludeByName "m_flCreateTime"
// MNetworkIncludeByName "m_iTeamNum"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkIncludeByName "m_fFlags"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkUserGroupProxy "CBasePlayerController"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
public partial class CBasePlayerController : CBaseEntity
{
    internal CBasePlayerController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkPriority 1
    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 TickBase { get; private set; }

    // MNetworkChangeCallback "OnPawnChanged"
    public CHandle<CBasePlayerPawn> PawnHandle { get; private set; }
    public CBasePlayerPawn? Pawn => PawnHandle.Get(Demo);

    // MNetworkChangeCallback "OnConnectionStateChanged"
    public PlayerConnectedState Connected { get; private set; }

    // MNetworkChangeCallback "OnPlayerControllerNameChanged"
    public string PlayerName { get; private set; } = "";

    // MNetworkEncoder "fixed64"
    // MNetworkChangeCallback "OnSteamIDChanged"
    public UInt64 SteamID { get; private set; }

    public UInt32 DesiredFOV { get; private set; }

    internal new static SendNodeDecoder<CBasePlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nTickBase")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TickBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iConnected")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerConnectedState>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Connected = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszPlayerName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_steamID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SteamID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredFOV")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiredFOV = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkUserGroupProxy "CBasePlayerPawn"
// MNetworkExcludeByUserGroup "FogController"
// MNetworkIncludeByUserGroup "Player"
// MNetworkIncludeByUserGroup "Water"
// MNetworkIncludeByUserGroup "LocalPlayerExclusive"
// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkOverride "m_vecX CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecY CNetworkOriginCellCoordQuantizedVector"
// MNetworkOverride "m_vecZ CNetworkOriginCellCoordQuantizedVector"
// MNetworkExcludeByName "m_pWeaponServices"
// MNetworkExcludeByName "m_pItemServices"
// MNetworkExcludeByName "m_pAutoaimServices"
// MNetworkExcludeByName "m_pObserverServices"
// MNetworkExcludeByName "m_pWaterServices"
// MNetworkExcludeByName "m_pUseServices"
// MNetworkExcludeByName "m_pFlashlightServices"
// MNetworkExcludeByName "m_pMovementServices"
// MNetworkUserGroupProxy "CBasePlayerPawn"
public partial class CBasePlayerPawn : CBaseCombatCharacter
{
    internal CBasePlayerPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CPlayer_WeaponServices? WeaponServices { get; private set; }

    public CPlayer_ItemServices? ItemServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CPlayer_AutoaimServices? AutoaimServices { get; private set; }

    public CPlayer_ObserverServices? ObserverServices { get; private set; }

    public CPlayer_WaterServices? WaterServices { get; private set; }

    public CPlayer_UseServices? UseServices { get; private set; }

    public CPlayer_FlashlightServices? FlashlightServices { get; private set; }

    public CPlayer_CameraServices? CameraServices { get; private set; }

    public CPlayer_MovementServices? MovementServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ViewAngleServerChange> ServerViewAngleChanges { get; private set; } = new NetworkedVector<ViewAngleServerChange>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 HideHUD { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Sky3DParams Skybox3d { get; private set; } = new();

    public GameTime DeathTime { get; private set; } = new();

    public CHandle<CBasePlayerController> ControllerHandle { get; private set; }
    public CBasePlayerController? Controller => ControllerHandle.Get(Demo);

    internal new static SendNodeDecoder<CBasePlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pWeaponServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WeaponServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.WeaponServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.WeaponServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pItemServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ItemServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ItemServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ItemServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pAutoaimServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_AutoaimServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.AutoaimServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.AutoaimServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pObserverServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ObserverServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ObserverServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ObserverServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pWaterServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WaterServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.WaterServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.WaterServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pUseServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_UseServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.UseServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.UseServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pFlashlightServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_FlashlightServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.FlashlightServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.FlashlightServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pCameraServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_CameraServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CameraServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CameraServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pMovementServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_MovementServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.MovementServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.MovementServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_ServerViewAngleChanges")
        {
            var innerDecoder = decoderSet.GetDecoder<ViewAngleServerChange>(field.FieldSerializerKey!.Value);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ServerViewAngleChanges.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.ServerViewAngleChanges.EnsureSize(index + 1);
                    var element = @this.ServerViewAngleChanges[index] ??= new ViewAngleServerChange();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHideHUD")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HideHUD = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skybox3d")
        {
            var innerDecoder = Sky3DParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Skybox3d, path, ref buffer);
            };
        }
        if (field.VarName == "m_flDeathTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeathTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController>(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ControllerHandle = decoder(ref buffer);
            };
        }
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkIncludeByName "m_nNextThinkTick"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByUserGroup "m_flCycle"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkUserGroupProxy "CBasePlayerWeapon"
public partial class CBasePlayerWeapon : CEconEntity
{
    internal CBasePlayerWeapon(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick NextPrimaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float NextPrimaryAttackTickRatio { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick NextSecondaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float NextSecondaryAttackTickRatio { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkPriority 32
    public Int32 Clip1 { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32 Clip2 { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32[] ReserveAmmo { get; private set; } = Array.Empty<Int32>();

    internal new static SendNodeDecoder<CBasePlayerWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nNextPrimaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextPrimaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextPrimaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextPrimaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextSecondaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextSecondaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextSecondaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextSecondaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClip1")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip1 = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_iClip2")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip2 = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_pReserveAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ReserveAmmo.Length == 0) @this.ReserveAmmo = new Int32[fixedArraySize];
                @this.ReserveAmmo[path[1]] = decoder(ref buffer);
            };
        }
        return CEconEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePlayerWeapon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseProp : CBaseAnimGraph
{
    internal CBaseProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
public partial class CBasePropDoor : CDynamicProp
{
    internal CBasePropDoor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public DoorState DoorState { get; private set; }

    public bool Locked { get; private set; }

    public Vector ClosedPosition { get; private set; }

    public QAngle ClosedAngles { get; private set; }

    public CHandle<CBasePropDoor> MasterHandle { get; private set; }
    public CBasePropDoor? Master => MasterHandle.Get(Demo);

    internal new static SendNodeDecoder<CBasePropDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_eDoorState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<DoorState>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DoorState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLocked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Locked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClosedPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClosedAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaster")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePropDoor>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MasterHandle = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBasePropDoor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBasePropDoor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBaseToggle : CBaseModelEntity
{
    internal CBaseToggle(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseToggle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseToggle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseToggle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseToggle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseToggle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_spawnflags"
public partial class CBaseTrigger : CBaseToggle
{
    internal CBaseTrigger(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public bool ClientSidePredicted { get; private set; }

    internal new static SendNodeDecoder<CBaseTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSidePredicted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSidePredicted = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseTrigger.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseTrigger.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_hModel"
// MNetworkIncludeByName "m_hOwnerEntity"
// MNetworkIncludeByName "m_MeshGroupMask"
// MNetworkIncludeByName "m_fEffects"
// MNetworkIncludeByName "m_baseLayer.m_hSequence"
// MNetworkIncludeByName "m_animationController.m_flPlaybackRate"
// MNetworkIncludeByName "m_animationController.m_bClientSideAnimation"
// MNetworkIncludeByName "m_flAnimTime"
// MNetworkIncludeByName "m_flSimulationTime"
// MNetworkIncludeByName "m_animationController.m_animGraphNetworkedVars"
// MNetworkIncludeByName "m_nResetEventsParity"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkOverride "m_fEffects "
// MNetworkIncludeByName "m_clrRender"
public partial class CBaseViewModel : CBaseAnimGraph
{
    internal CBaseViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 ViewModelIndex { get; private set; }

    public UInt32 AnimationParity { get; private set; }

    public float AnimationStartTime { get; private set; }

    public CHandle<CBasePlayerWeapon> WeaponHandle { get; private set; }
    public CBasePlayerWeapon? Weapon => WeaponHandle.Get(Demo);

    public CHandle<CBaseEntity> ControlPanelHandle { get; private set; }
    public CBaseEntity? ControlPanel => ControlPanelHandle.Get(Demo);

    internal new static SendNodeDecoder<CBaseViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nViewModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAnimationParity")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnimationStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WeaponHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPanel")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ControlPanelHandle = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBaseViewModel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBaseViewModel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBaseViewModel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBaseViewModel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_nRenderFX"
// MNetworkIncludeByName "m_nRenderMode"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkOverride "m_clrRender "
public partial class CBeam : CBaseModelEntity
{
    internal CBeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount 10
    // MNetworkMinValue -25
    // MNetworkMaxValue 25
    // MNetworkEncodeFlags 2
    public float FrameRate { get; private set; }

    public float HDRColorScale { get; private set; }

    public byte NumBeamEnts { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> BaseMaterial { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> HaloIndex { get; private set; }

    public BeamType BeamType { get; private set; }

    public UInt32 BeamFlags { get; private set; }

    public CHandle<CBaseEntity>[] AttachEntity { get; private set; } = Array.Empty<CHandle<CBaseEntity>>();

    public AttachmentHandle[] AttachIndex { get; private set; } = Array.Empty<AttachmentHandle>();

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 102.3
    // MNetworkEncodeFlags 2
    public float Width { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue 0
    // MNetworkMaxValue 102.3
    // MNetworkEncodeFlags 2
    public float EndWidth { get; private set; }

    public float FadeLength { get; private set; }

    public float HaloScale { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 1
    public float Amplitude { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    public float StartFrame { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float Speed { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    // MNetworkPriority 32
    public float Frame { get; private set; }

    public BeamClipStyle ClipStyle { get; private set; }

    public bool TurnedOff { get; private set; }

    // MNetworkEncoder "coord"
    public Vector EndPos { get; private set; }

    internal new static SendNodeDecoder<CBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFrameRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FrameRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumBeamEnts")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumBeamEnts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBaseMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BaseMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHaloIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HaloIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamType>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeamFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachEntity")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.AttachEntity.Length == 0) @this.AttachEntity = new CHandle<CBaseEntity>[fixedArraySize];
                @this.AttachEntity[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachIndex")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.AttachIndex.Length == 0) @this.AttachIndex = new AttachmentHandle[fixedArraySize];
                @this.AttachIndex[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEndWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFadeLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fHaloScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HaloScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAmplitude")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Amplitude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Speed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nClipStyle")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamClipStyle>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClipStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTurnedOff")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TurnedOff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndPos = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBodyComponent : CEntityComponent
{
    internal static SendNodeDecoder<CBodyComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CBodyComponent> factory)
    {
        if (serializerKey.Name == "CBodyComponent")
        {
            factory = () => new CBodyComponent();
            return decoderSet.GetDecoder<CBodyComponent>(serializerKey);
        }
        else if (serializerKey.Name == "CBodyComponentPoint")
        {
            factory = () => new CBodyComponentPoint();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentPoint>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentPoint);
                var downcastInstance = Unsafe.As<CBodyComponentPoint>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentSkeletonInstance")
        {
            factory = () => new CBodyComponentSkeletonInstance();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentSkeletonInstance>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentSkeletonInstance);
                var downcastInstance = Unsafe.As<CBodyComponentSkeletonInstance>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseAnimGraph")
        {
            factory = () => new CBodyComponentBaseAnimGraph();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseAnimGraph>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseAnimGraph);
                var downcastInstance = Unsafe.As<CBodyComponentBaseAnimGraph>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseModelEntity")
        {
            factory = () => new CBodyComponentBaseModelEntity();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseModelEntity>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseModelEntity);
                var downcastInstance = Unsafe.As<CBodyComponentBaseModelEntity>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CBodyComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CBodyComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseAnimGraph : CBodyComponentSkeletonInstance
{
    public CBaseAnimGraphController AnimationController { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animationController")
        {
            var innerDecoder = CBaseAnimGraphController.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AnimationController, path, ref buffer);
            };
        }
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseModelEntity : CBodyComponentSkeletonInstance
{
    internal new static SendNodeDecoder<CBodyComponentBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentPoint : CBodyComponent
{
    public CGameSceneNode SceneNode { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentPoint> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_sceneNode")
        {
            var innerDecoder = CGameSceneNode.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SceneNode, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentSkeletonInstance : CBodyComponent
{
    public CSkeletonInstance SkeletonInstance { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skeletonInstance")
        {
            var innerDecoder = CSkeletonInstance.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SkeletonInstance, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBombTarget : CBaseTrigger
{
    internal CBombTarget(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool BombPlantedHere { get; private set; }

    internal new static SendNodeDecoder<CBombTarget> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bBombPlantedHere")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBombTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombPlantedHere = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBombTarget.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBombTarget.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBombTarget.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBombTarget.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBreachCharge : CCSWeaponBase
{
    internal CBreachCharge(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreachCharge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreachCharge.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreachCharge.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreachCharge.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreachCharge.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBreachChargeProjectile : CBaseGrenade
{
    internal CBreachChargeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreachChargeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreachChargeProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreachChargeProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreachChargeProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreachChargeProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBreakable : CBaseModelEntity
{
    internal CBreakable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreakable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreakable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreakable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreakable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreakable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBreakableProp : CBaseProp
{
    internal CBreakableProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool NoGhostCollision { get; private set; }

    internal new static SendNodeDecoder<CBreakableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_noGhostCollision")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBreakableProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoGhostCollision = decoder(ref buffer);
            };
        }
        return CBaseProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBreakableProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBreakableProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBreakableProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBreakableProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBumpMine : CCSWeaponBase
{
    internal CBumpMine(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBumpMine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBumpMine.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBumpMine.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBumpMine.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBumpMine.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CBumpMineProjectile : CBaseGrenade
{
    internal CBumpMineProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBumpMineProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CBumpMineProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CBumpMineProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CBumpMineProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CBumpMineProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CC4 : CCSWeaponBase
{
    internal CC4(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool StartedArming { get; private set; }

    public GameTime ArmedTime { get; private set; } = new();

    public bool BombPlacedAnimation { get; private set; }

    public bool IsPlantingViaUse { get; private set; }

    public EntitySpottedState EntitySpottedState { get; private set; } = new();

    internal new static SendNodeDecoder<CC4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bStartedArming")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartedArming = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fArmedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ArmedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombPlacedAnimation")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombPlacedAnimation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsPlantingViaUse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsPlantingViaUse = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EntitySpottedState, path, ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CC4.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CC4.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CC4.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CC4.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CChicken : CDynamicProp
{
    internal CChicken(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CAttributeContainer AttributeManager { get; private set; } = new();

    public UInt32 OriginalOwnerXuidLow { get; private set; }

    public UInt32 OriginalOwnerXuidHigh { get; private set; }

    public bool JumpedThisFrame { get; private set; }

    public CHandle<CCSPlayerPawn> LeaderHandle { get; private set; }
    public CCSPlayerPawn? Leader => LeaderHandle.Get(Demo);

    internal new static SendNodeDecoder<CChicken> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeManager")
        {
            var innerDecoder = CAttributeContainer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AttributeManager, path, ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalOwnerXuidLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalOwnerXuidHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_jumpedThisFrame")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpedThisFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_leader")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LeaderHandle = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CChicken.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CChicken.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CChicken.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CChicken.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCollisionProperty
{
    // MNetworkChangeCallback "CollisionAttributeChanged"
    public VPhysicsCollisionAttribute CollisionAttribute { get; private set; } = new();

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Mins { get; private set; }

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Maxs { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidFlags"
    public byte SolidFlags { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidType"
    public SolidType SolidType { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public byte TriggerBloat { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public SurroundingBoundsType SurroundType { get; private set; }

    public byte CollisionGroup { get; private set; }

    // MNetworkChangeCallback "OnUpdateEnablePhysics"
    public byte EnablePhysics { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMins { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMaxs { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public Vector CapsuleCenter1 { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public Vector CapsuleCenter2 { get; private set; }

    // MNetworkChangeCallback "OnUpdateCapsule"
    public float CapsuleRadius { get; private set; }

    internal static SendNodeDecoder<CCollisionProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_collisionAttribute")
        {
            var innerDecoder = VPhysicsCollisionAttribute.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CollisionAttribute, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usSolidFlags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SolidFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSolidType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SolidType>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SolidType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_triggerBloat")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TriggerBloat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSurroundType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SurroundingBoundsType>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SurroundType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_CollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnablePhysics")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnablePhysics = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpecifiedSurroundingMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpecifiedSurroundingMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter1")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleCenter1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter2")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleCenter2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleRadius = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByUserGroup "Origin"
public partial class CColorCorrection : CBaseEntity
{
    internal CColorCorrection(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeInDuration { get; private set; }

    public float FadeOutDuration { get; private set; }

    public float MaxWeight { get; private set; }

    public bool Enabled { get; private set; }

    public bool Master { get; private set; }

    public bool ClientSide { get; private set; }

    public bool Exclusive { get; private set; }

    public float MinFalloff { get; private set; }

    public float MaxFalloff { get; private set; }

    public float CurWeight { get; private set; }

    public string NetlookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrection> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Master = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSide")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientSide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExclusive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exclusive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MinFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCurWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_netlookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NetlookupFilename = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CColorCorrection.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CColorCorrection.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrection.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrection.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CColorCorrectionVolume : CBaseTrigger
{
    internal CColorCorrectionVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Enabled { get; private set; }

    public float MaxWeight { get; private set; }

    public float FadeDuration { get; private set; }

    public float Weight { get; private set; }

    public string LookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrectionVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Weight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Weight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LookupFilename = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CColorCorrectionVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGameModeRules
{
    internal static SendNodeDecoder<CCSGameModeRules> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSGameModeRules> factory)
    {
        if (serializerKey.Name == "CCSGameModeRules")
        {
            factory = () => new CCSGameModeRules();
            return decoderSet.GetDecoder<CCSGameModeRules>(serializerKey);
        }
        else if (serializerKey.Name == "CCSGameModeRules_ArmsRace")
        {
            factory = () => new CCSGameModeRules_ArmsRace();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_ArmsRace>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_ArmsRace);
                var downcastInstance = Unsafe.As<CCSGameModeRules_ArmsRace>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSGameModeRules_Deathmatch")
        {
            factory = () => new CCSGameModeRules_Deathmatch();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Deathmatch>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_Deathmatch);
                var downcastInstance = Unsafe.As<CCSGameModeRules_Deathmatch>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSGameModeRules_Noop")
        {
            factory = () => new CCSGameModeRules_Noop();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Noop>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_Noop);
                var downcastInstance = Unsafe.As<CCSGameModeRules_Noop>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSGameModeRules_Scripted")
        {
            factory = () => new CCSGameModeRules_Scripted();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Scripted>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_Scripted);
                var downcastInstance = Unsafe.As<CCSGameModeRules_Scripted>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CCSGameModeRules: {serializerKey}");
    }

    internal static SendNodeDecoder<CCSGameModeRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CCSGameModeRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CCSGameModeRules_ArmsRace : CCSGameModeRules
{
    public NetworkedVector<NetworkedString> WeaponSequence { get; private set; } = new NetworkedVector<NetworkedString>();

    internal new static SendNodeDecoder<CCSGameModeRules_ArmsRace> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_WeaponSequence")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSGameModeRules_ArmsRace @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.WeaponSequence.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.WeaponSequence.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.WeaponSequence[index] = element;
                }
            };
        }
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameModeRules_Deathmatch : CCSGameModeRules
{
    public GameTime DMBonusStartTime { get; private set; } = new();

    public float DMBonusTimeLength { get; private set; }

    public Int16 DMBonusWeaponLoadoutSlot { get; private set; }

    internal new static SendNodeDecoder<CCSGameModeRules_Deathmatch> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDMBonusStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DMBonusStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDMBonusTimeLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DMBonusTimeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDMBonusWeaponLoadoutSlot")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DMBonusWeaponLoadoutSlot = decoder(ref buffer);
            };
        }
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameModeRules_Noop : CCSGameModeRules
{
    internal new static SendNodeDecoder<CCSGameModeRules_Noop> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameRules : CTeamplayRules
{
    internal static SendNodeDecoder<CCSGameRules> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSGameRules> factory)
    {
        if (serializerKey.Name == "CCSGameRules")
        {
            factory = () => new CCSGameRules();
            return decoderSet.GetDecoder<CCSGameRules>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSGameRules: {serializerKey}");
    }

    public bool FreezePeriod { get; private set; }

    public bool WarmupPeriod { get; private set; }

    public GameTime WarmupPeriodEnd { get; private set; } = new();

    public GameTime WarmupPeriodStart { get; private set; } = new();

    public Int32 TotalPausedTicks { get; private set; }

    public Int32 PauseStartTick { get; private set; }

    public bool ServerPaused { get; private set; }

    public bool GamePaused { get; private set; }

    public bool TerroristTimeOutActive { get; private set; }

    public bool CTTimeOutActive { get; private set; }

    public float TerroristTimeOutRemaining { get; private set; }

    public float CTTimeOutRemaining { get; private set; }

    public Int32 TerroristTimeOuts { get; private set; }

    public Int32 CTTimeOuts { get; private set; }

    public bool TechnicalTimeOut { get; private set; }

    public bool MatchWaitingForResume { get; private set; }

    public Int32 RoundTime { get; private set; }

    public float MatchStartTime { get; private set; }

    public GameTime RoundStartTime { get; private set; } = new();

    public GameTime RestartRoundTime { get; private set; } = new();

    public bool GameRestart { get; private set; }

    public float GameStartTime { get; private set; }

    public float TimeUntilNextPhaseStarts { get; private set; }

    // MNetworkChangeCallback "OnGamePhaseChanged"
    public Int32 GamePhase { get; private set; }

    public Int32 TotalRoundsPlayed { get; private set; }

    public Int32 RoundsPlayedThisPhase { get; private set; }

    public Int32 OvertimePlaying { get; private set; }

    public Int32 HostagesRemaining { get; private set; }

    public bool AnyHostageReached { get; private set; }

    public bool MapHasBombTarget { get; private set; }

    public bool MapHasRescueZone { get; private set; }

    public bool MapHasBuyZone { get; private set; }

    public bool IsQueuedMatchmaking { get; private set; }

    public Int32 QueuedMatchmakingMode { get; private set; }

    public bool IsValveDS { get; private set; }

    public bool LogoMap { get; private set; }

    public bool PlayAllStepSoundsOnServer { get; private set; }

    public Int32 SpectatorSlotCount { get; private set; }

    public Int32 MatchDevice { get; private set; }

    public bool HasMatchStarted { get; private set; }

    public Int32 NextMapInMapgroup { get; private set; }

    public string TournamentEventName { get; private set; } = "";

    public string TournamentEventStage { get; private set; } = "";

    public string MatchStatTxt { get; private set; } = "";

    public string TournamentPredictionsTxt { get; private set; } = "";

    public Int32 TournamentPredictionsPct { get; private set; }

    public GameTime CMMItemDropRevealStartTime { get; private set; } = new();

    public GameTime CMMItemDropRevealEndTime { get; private set; } = new();

    public bool IsDroppingItems { get; private set; }

    public bool IsQuestEligible { get; private set; }

    public bool IsHltvActive { get; private set; }

    public Int32 GuardianModeWaveNumber { get; private set; }

    public Int32 GuardianModeSpecialKillsRemaining { get; private set; }

    public Int32 GuardianModeSpecialWeaponNeeded { get; private set; }

    public UInt32 NumGlobalGiftsGiven { get; private set; }

    public UInt32 NumGlobalGifters { get; private set; }

    public UInt32 NumGlobalGiftsPeriodSeconds { get; private set; }

    public UInt32[] FeaturedGiftersAccounts { get; private set; } = Array.Empty<UInt32>();

    public UInt32[] FeaturedGiftersGifts { get; private set; } = Array.Empty<UInt32>();

    public UInt16[] ProhibitedItemIndices { get; private set; } = Array.Empty<UInt16>();

    public UInt32[] TournamentActiveCasterAccounts { get; private set; } = Array.Empty<UInt32>();

    public Int32 NumBestOfMaps { get; private set; }

    public Int32 HalloweenMaskListSeed { get; private set; }

    public bool BombDropped { get; private set; }

    public bool BombPlanted { get; private set; }

    public Int32 RoundWinStatus { get; private set; }

    public Int32 RoundWinReason { get; private set; }

    public bool TCantBuy { get; private set; }

    public bool CTCantBuy { get; private set; }

    public GameTime GuardianBuyUntilTime { get; private set; } = new();

    public Int32[] MatchStats_RoundResults { get; private set; } = Array.Empty<Int32>();

    public Int32[] MatchStats_PlayersAlive_CT { get; private set; } = Array.Empty<Int32>();

    public Int32[] MatchStats_PlayersAlive_T { get; private set; } = Array.Empty<Int32>();

    public float[] TeamRespawnWaveTimes { get; private set; } = Array.Empty<float>();

    public GameTime[] NextRespawnWave { get; private set; } = Array.Empty<GameTime>();

    public Int32 ServerQuestID { get; private set; }

    public Vector MinimapMins { get; private set; }

    public Vector MinimapMaxs { get; private set; }

    public float[] MinimapVerticalSectionHeights { get; private set; } = Array.Empty<float>();

    public Int32[] EndMatchMapGroupVoteTypes { get; private set; } = Array.Empty<Int32>();

    public Int32[] EndMatchMapGroupVoteOptions { get; private set; } = Array.Empty<Int32>();

    public Int32 EndMatchMapVoteWinner { get; private set; }

    public Int32 NumConsecutiveCTLoses { get; private set; }

    public Int32 NumConsecutiveTerroristLoses { get; private set; }

    public Int32 MatchAbortedEarlyReason { get; private set; }

    // MNetworkPolymorphic
    public CCSGameModeRules? GameModeRules { get; private set; }

    public CRetakeGameRules RetakeRules { get; private set; } = new();

    // MNetworkChangeCallback "OnMatchEndCountChanged"
    public byte MatchEndCount { get; private set; }

    public Int32 TTeamIntroVariant { get; private set; }

    public Int32 CTTeamIntroVariant { get; private set; }

    // MNetworkChangeCallback "OnTeamIntroPeriodChanged"
    public bool TeamIntroPeriod { get; private set; }

    public Int32 RoundEndWinnerTeam { get; private set; }

    public Int32 RoundEndReason { get; private set; }

    public bool RoundEndShowTimerDefend { get; private set; }

    public Int32 RoundEndTimerTime { get; private set; }

    public NetworkedString RoundEndFunFactToken { get; private set; }

    public CPlayerSlot RoundEndFunFactPlayerSlot { get; private set; }

    public Int32 RoundEndFunFactData1 { get; private set; }

    public Int32 RoundEndFunFactData2 { get; private set; }

    public Int32 RoundEndFunFactData3 { get; private set; }

    public NetworkedString RoundEndMessage { get; private set; }

    public Int32 RoundEndPlayerCount { get; private set; }

    public bool RoundEndNoMusic { get; private set; }

    public Int32 RoundEndLegacy { get; private set; }

    // MNetworkChangeCallback "OnRoundEndCountChanged"
    public byte RoundEndCount { get; private set; }

    public Int32 RoundStartRoundNumber { get; private set; }

    // MNetworkChangeCallback "OnRoundStartCountChanged"
    public byte RoundStartCount { get; private set; }

    internal new static SendNodeDecoder<CCSGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bFreezePeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FreezePeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWarmupPeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WarmupPeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWarmupPeriodEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WarmupPeriodEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWarmupPeriodStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WarmupPeriodStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTotalPausedTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalPausedTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPauseStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PauseStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bServerPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ServerPaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGamePaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GamePaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTerroristTimeOutActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TerroristTimeOutActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCTTimeOutActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CTTimeOutActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTerroristTimeOutRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TerroristTimeOutRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCTTimeOutRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CTTimeOutRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTerroristTimeOuts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TerroristTimeOuts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCTTimeOuts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CTTimeOuts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTechnicalTimeOut")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TechnicalTimeOut = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMatchWaitingForResume")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchWaitingForResume = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fMatchStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fRoundStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRestartRoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RestartRoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGameRestart")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameRestart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGameStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timeUntilNextPhaseStarts")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeUntilNextPhaseStarts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_gamePhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GamePhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_totalRoundsPlayed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalRoundsPlayed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRoundsPlayedThisPhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundsPlayedThisPhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOvertimePlaying")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OvertimePlaying = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHostagesRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HostagesRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnyHostageReached")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnyHostageReached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasBombTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MapHasBombTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasRescueZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MapHasRescueZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasBuyZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MapHasBuyZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsQueuedMatchmaking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsQueuedMatchmaking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nQueuedMatchmakingMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.QueuedMatchmakingMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsValveDS")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsValveDS = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLogoMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LogoMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPlayAllStepSoundsOnServer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayAllStepSoundsOnServer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSpectatorSlotCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpectatorSlotCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MatchDevice")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchDevice = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasMatchStarted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasMatchStarted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextMapInMapgroup")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextMapInMapgroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentEventName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TournamentEventName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentEventStage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TournamentEventStage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szMatchStatTxt")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchStatTxt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentPredictionsTxt")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TournamentPredictionsTxt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTournamentPredictionsPct")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TournamentPredictionsPct = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCMMItemDropRevealStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CMMItemDropRevealStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCMMItemDropRevealEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CMMItemDropRevealEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsDroppingItems")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsDroppingItems = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsQuestEligible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsQuestEligible = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHltvActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsHltvActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeWaveNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuardianModeWaveNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeSpecialKillsRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuardianModeSpecialKillsRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeSpecialWeaponNeeded")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuardianModeSpecialWeaponNeeded = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGiftsGiven")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumGlobalGiftsGiven = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGifters")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumGlobalGifters = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGiftsPeriodSeconds")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumGlobalGiftsPeriodSeconds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrFeaturedGiftersAccounts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.FeaturedGiftersAccounts.Length == 0) @this.FeaturedGiftersAccounts = new UInt32[fixedArraySize];
                @this.FeaturedGiftersAccounts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrFeaturedGiftersGifts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.FeaturedGiftersGifts.Length == 0) @this.FeaturedGiftersGifts = new UInt32[fixedArraySize];
                @this.FeaturedGiftersGifts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrProhibitedItemIndices")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ProhibitedItemIndices.Length == 0) @this.ProhibitedItemIndices = new UInt16[fixedArraySize];
                @this.ProhibitedItemIndices[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrTournamentActiveCasterAccounts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TournamentActiveCasterAccounts.Length == 0) @this.TournamentActiveCasterAccounts = new UInt32[fixedArraySize];
                @this.TournamentActiveCasterAccounts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numBestOfMaps")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumBestOfMaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHalloweenMaskListSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HalloweenMaskListSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombDropped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombDropped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombPlanted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombPlanted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundWinStatus")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundWinStatus = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eRoundWinReason")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundWinReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTCantBuy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TCantBuy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCTCantBuy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CTCantBuy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGuardianBuyUntilTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GuardianBuyUntilTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_RoundResults")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MatchStats_RoundResults.Length == 0) @this.MatchStats_RoundResults = new Int32[fixedArraySize];
                @this.MatchStats_RoundResults[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_PlayersAlive_CT")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MatchStats_PlayersAlive_CT.Length == 0) @this.MatchStats_PlayersAlive_CT = new Int32[fixedArraySize];
                @this.MatchStats_PlayersAlive_CT[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_PlayersAlive_T")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MatchStats_PlayersAlive_T.Length == 0) @this.MatchStats_PlayersAlive_T = new Int32[fixedArraySize];
                @this.MatchStats_PlayersAlive_T[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TeamRespawnWaveTimes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TeamRespawnWaveTimes.Length == 0) @this.TeamRespawnWaveTimes = new float[fixedArraySize];
                @this.TeamRespawnWaveTimes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextRespawnWave")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.NextRespawnWave.Length == 0) @this.NextRespawnWave = new GameTime[fixedArraySize];
                @this.NextRespawnWave[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nServerQuestID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ServerQuestID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinimapMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinimapMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MinimapVerticalSectionHeights")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MinimapVerticalSectionHeights.Length == 0) @this.MinimapVerticalSectionHeights = new float[fixedArraySize];
                @this.MinimapVerticalSectionHeights[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapGroupVoteTypes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.EndMatchMapGroupVoteTypes.Length == 0) @this.EndMatchMapGroupVoteTypes = new Int32[fixedArraySize];
                @this.EndMatchMapGroupVoteTypes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapGroupVoteOptions")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.EndMatchMapGroupVoteOptions.Length == 0) @this.EndMatchMapGroupVoteOptions = new Int32[fixedArraySize];
                @this.EndMatchMapGroupVoteOptions[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapVoteWinner")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndMatchMapVoteWinner = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumConsecutiveCTLoses")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumConsecutiveCTLoses = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumConsecutiveTerroristLoses")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumConsecutiveTerroristLoses = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMatchAbortedEarlyReason")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchAbortedEarlyReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pGameModeRules")
        {
            SendNodeDecoder<CCSGameModeRules>? innerDecoder = null;
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    var childClassId = ((int) buffer.ReadUBitVar()) - 1;
                    innerDecoder = CCSGameModeRules.CreateDowncastDecoder(field.PolymorphicTypes[childClassId], decoderSet, out var factory);
                    if (!isSet)
                    {
                        innerDecoder = null;
                        @this.GameModeRules = null;
                    }
                    else
                    {
                        @this.GameModeRules = factory();
                        return;
                    }
                }
                else
                {
                    Debug.Assert(innerDecoder != null);
                    Debug.Assert(@this.GameModeRules != null);
                    var inner = @this.GameModeRules!;
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_RetakeRules")
        {
            var innerDecoder = CRetakeGameRules.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.RetakeRules, path, ref buffer);
            };
        }
        if (field.VarName == "m_nMatchEndCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchEndCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTTeamIntroVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TTeamIntroVariant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCTTeamIntroVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CTTeamIntroVariant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTeamIntroPeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamIntroPeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndWinnerTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndWinnerTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eRoundEndReason")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRoundEndShowTimerDefend")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndShowTimerDefend = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndTimerTime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndTimerTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sRoundEndFunFactToken")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndFunFactToken = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndFunFactPlayerSlot")
        {
            var decoder = FieldDecode.CreateDecoder_CPlayerSlot(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndFunFactPlayerSlot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndFunFactData1")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndFunFactData1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndFunFactData2")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndFunFactData2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndFunFactData3")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndFunFactData3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sRoundEndMessage")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndMessage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndPlayerCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndPlayerCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRoundEndNoMusic")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndNoMusic = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundEndLegacy")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndLegacy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRoundEndCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundEndCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundStartRoundNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundStartRoundNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRoundStartCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundStartCount = decoder(ref buffer);
            };
        }
        return CTeamplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameRulesProxy : CGameRulesProxy
{
    internal CCSGameRulesProxy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkTypeAlias "CCSGameRules*"
    // MNetworkPriority 32
    public CCSGameRules? GameRules { get; private set; }

    internal new static SendNodeDecoder<CCSGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pGameRules")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSGameRules.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSGameRulesProxy @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.GameRules = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.GameRules ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CGameRulesProxy.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGameRulesProxy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGameRulesProxy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGameRulesProxy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGameRulesProxy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamIntroCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    internal CCSGO_TeamIntroCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCharacterPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCharacterPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCharacterPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCharacterPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamIntroCounterTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_TeamIntroCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCounterTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCounterTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCounterTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroCounterTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamIntroTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_TeamIntroTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamIntroTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamPreviewCharacterPosition : CBaseEntity
{
    internal CCSGO_TeamPreviewCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Variant { get; private set; }

    public Int32 Random { get; private set; }

    public Int32 Ordinal { get; private set; }

    public NetworkedString WeaponName { get; private set; }

    public UInt64 Xuid { get; private set; }

    public CEconItemView AgentItem { get; private set; } = new();

    public CEconItemView GlovesItem { get; private set; } = new();

    public CEconItemView WeaponItem { get; private set; } = new();

    internal new static SendNodeDecoder<CCSGO_TeamPreviewCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Variant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandom")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Random = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOrdinal")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ordinal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sWeaponName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WeaponName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_xuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Xuid = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_agentItem")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AgentItem, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_glovesItem")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.GlovesItem, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponItem")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.WeaponItem, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamPreviewCharacterPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamPreviewCharacterPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamPreviewCharacterPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamPreviewCharacterPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamSelectCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    internal CCSGO_TeamSelectCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCharacterPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCharacterPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCharacterPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCharacterPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamSelectCounterTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    internal CCSGO_TeamSelectCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCounterTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCounterTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCounterTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectCounterTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_TeamSelectTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    internal CCSGO_TeamSelectTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_TeamSelectTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_WingmanIntroCharacterPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_WingmanIntroCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCharacterPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCharacterPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCharacterPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCharacterPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_WingmanIntroCounterTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    internal CCSGO_WingmanIntroCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCounterTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCounterTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCounterTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroCounterTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSGO_WingmanIntroTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    internal CCSGO_WingmanIntroTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroTerroristPosition.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroTerroristPosition.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroTerroristPosition.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGO_WingmanIntroTerroristPosition.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkOverride "m_hWeapon "
public partial class CCSGOViewModel : CPredictedViewModel
{
    internal CCSGOViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool ShouldIgnoreOffsetAndAccuracy { get; private set; }

    public UInt32 WeaponParity { get; private set; }

    internal new static SendNodeDecoder<CCSGOViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShouldIgnoreOffsetAndAccuracy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGOViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShouldIgnoreOffsetAndAccuracy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWeaponParity")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGOViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WeaponParity = decoder(ref buffer);
            };
        }
        return CPredictedViewModel.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSGOViewModel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSGOViewModel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSGOViewModel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSGOViewModel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSMinimapBoundary : CBaseEntity
{
    internal CCSMinimapBoundary(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSMinimapBoundary> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSMinimapBoundary.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSMinimapBoundary.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSMinimapBoundary.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSMinimapBoundary.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSObserver_CameraServices : CCSPlayerBase_CameraServices
{
    internal new static SendNodeDecoder<CCSObserver_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerBase_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_MovementServices : CPlayer_MovementServices
{
    internal new static SendNodeDecoder<CCSObserver_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_ObserverServices : CPlayer_ObserverServices
{
    internal new static SendNodeDecoder<CCSObserver_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_ObserverServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_UseServices : CPlayer_UseServices
{
    internal new static SendNodeDecoder<CCSObserver_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_UseServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_ViewModelServices : CPlayer_ViewModelServices
{
    internal new static SendNodeDecoder<CCSObserver_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_ViewModelServices.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkVarTypeOverride "CCSObserver_ObserverServices m_pObserverServices"
// MNetworkIncludeByName "m_pObserverServices"
// MNetworkVarTypeOverride "CCSObserver_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
// MNetworkVarTypeOverride "CCSObserver_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
// MNetworkVarTypeOverride "CCSObserver_UseServices m_pUseServices"
// MNetworkIncludeByName "m_pUseServices"
// MNetworkVarTypeOverride "CCSObserver_ViewModelServices m_pViewModelServices"
// MNetworkIncludeByName "m_pViewModelServices"
public partial class CCSObserverPawn : CCSPlayerPawnBase
{
    internal CCSObserverPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public new CCSObserver_ObserverServices? ObserverServices
    {
        get => (CCSObserver_ObserverServices?) base.ObserverServices;
    }

    public new CCSObserver_MovementServices? MovementServices
    {
        get => (CCSObserver_MovementServices?) base.MovementServices;
    }

    public new CCSObserver_CameraServices? CameraServices
    {
        get => (CCSObserver_CameraServices?) base.CameraServices;
    }

    public new CCSObserver_UseServices? UseServices
    {
        get => (CCSObserver_UseServices?) base.UseServices;
    }

    public new CCSObserver_ViewModelServices? ViewModelServices
    {
        get => (CCSObserver_ViewModelServices?) base.ViewModelServices;
    }

    internal new static SendNodeDecoder<CCSObserverPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSObserverPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSObserverPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSObserverPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSObserverPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSPlayer_ActionTrackingServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_ActionTrackingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_ActionTrackingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_ActionTrackingServices")
        {
            factory = () => new CCSPlayer_ActionTrackingServices();
            return decoderSet.GetDecoder<CCSPlayer_ActionTrackingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_ActionTrackingServices: {serializerKey}");
    }

    public bool IsRescuing { get; private set; }

    public WeaponPurchaseTracker WeaponPurchasesThisMatch { get; private set; } = new();

    public WeaponPurchaseTracker WeaponPurchasesThisRound { get; private set; } = new();

    internal new static SendNodeDecoder<CCSPlayer_ActionTrackingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsRescuing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsRescuing = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponPurchasesThisMatch")
        {
            var innerDecoder = WeaponPurchaseTracker.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.WeaponPurchasesThisMatch, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponPurchasesThisRound")
        {
            var innerDecoder = WeaponPurchaseTracker.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.WeaponPurchasesThisRound, path, ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_BulletServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_BulletServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_BulletServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_BulletServices")
        {
            factory = () => new CCSPlayer_BulletServices();
            return decoderSet.GetDecoder<CCSPlayer_BulletServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_BulletServices: {serializerKey}");
    }

    public Int32 TotalHitsOnServer { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_BulletServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_totalHitsOnServer")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayer_BulletServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalHitsOnServer = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_BuyServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_BuyServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_BuyServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_BuyServices")
        {
            factory = () => new CCSPlayer_BuyServices();
            return decoderSet.GetDecoder<CCSPlayer_BuyServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_BuyServices: {serializerKey}");
    }

    public NetworkedVector<SellbackPurchaseEntry> SellbackPurchaseEntries { get; private set; } = new NetworkedVector<SellbackPurchaseEntry>();

    internal new static SendNodeDecoder<CCSPlayer_BuyServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecSellbackPurchaseEntries")
        {
            var innerDecoder = decoderSet.GetDecoder<SellbackPurchaseEntry>(field.FieldSerializerKey!.Value);
            return (CCSPlayer_BuyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.SellbackPurchaseEntries.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.SellbackPurchaseEntries.EnsureSize(index + 1);
                    var element = @this.SellbackPurchaseEntries[index] ??= new SellbackPurchaseEntry();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_CameraServices : CCSPlayerBase_CameraServices
{
    internal new static SendNodeDecoder<CCSPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerBase_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_HostageServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_HostageServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_HostageServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_HostageServices")
        {
            factory = () => new CCSPlayer_HostageServices();
            return decoderSet.GetDecoder<CCSPlayer_HostageServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_HostageServices: {serializerKey}");
    }

    public CHandle<CBaseEntity> CarriedHostageHandle { get; private set; }

    public CHandle<CBaseEntity> CarriedHostagePropHandle { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_HostageServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCarriedHostage")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_HostageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CarriedHostageHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCarriedHostageProp")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_HostageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CarriedHostagePropHandle = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_ItemServices : CPlayer_ItemServices
{
    public bool HasDefuser { get; private set; }

    public bool HasHelmet { get; private set; }

    public bool HasHeavyArmor { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_ItemServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bHasDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasDefuser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHeavyArmor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasHeavyArmor = decoder(ref buffer);
            };
        }
        return CPlayer_ItemServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_MovementServices : CPlayer_MovementServices_Humanoid
{
    public float MaxFallVelocity { get; private set; }

    // MNetworkEncoder "normal"
    public Vector LadderNormal { get; private set; }

    public Int32 LadderSurfacePropIndex { get; private set; }

    public float DuckAmount { get; private set; }

    public float DuckSpeed { get; private set; }

    public bool DuckOverride { get; private set; }

    public bool DesiresDuck { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority 32
    public UInt32 DuckTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 DuckJumpTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 JumpTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float LastDuckTime { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Int32 GameCodeHasMovedPlayerAfterCommand { get; private set; }

    public bool OldJumpPressed { get; private set; }

    public float JumpUntil { get; private set; }

    public float JumpVel { get; private set; }

    public GameTime StashGrenadeParameterWhen { get; private set; } = new();

    public UInt64 ButtonDownMaskPrev { get; private set; }

    public float OffsetTickCompleteTime { get; private set; }

    public float OffsetTickStashedSpeed { get; private set; }

    public float Stamina { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flMaxFallVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxFallVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLadderNormal")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LadderNormal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLadderSurfacePropIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LadderSurfacePropIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDuckAmount")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckAmount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDuckSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDuckOverride")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckOverride = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDesiresDuck")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiresDuck = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDuckTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDuckJumpTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DuckJumpTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJumpTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastDuckTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastDuckTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGameCodeHasMovedPlayerAfterCommand")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GameCodeHasMovedPlayerAfterCommand = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOldJumpPressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OldJumpPressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flJumpUntil")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpUntil = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flJumpVel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fStashGrenadeParameterWhen")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StashGrenadeParameterWhen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nButtonDownMaskPrev")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ButtonDownMaskPrev = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOffsetTickCompleteTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OffsetTickCompleteTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOffsetTickStashedSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OffsetTickStashedSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStamina")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Stamina = decoder(ref buffer);
            };
        }
        return CPlayer_MovementServices_Humanoid.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_PingServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_PingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_PingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_PingServices")
        {
            factory = () => new CCSPlayer_PingServices();
            return decoderSet.GetDecoder<CCSPlayer_PingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_PingServices: {serializerKey}");
    }

    public CHandle<CBaseEntity> PlayerPingHandle { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_PingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPlayerPing")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_PingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerPingHandle = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_UseServices : CPlayer_UseServices
{
    internal new static SendNodeDecoder<CCSPlayer_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_UseServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_ViewModelServices : CPlayer_ViewModelServices
{
    public CHandle<CBaseViewModel>[] ViewModel { get; private set; } = Array.Empty<CHandle<CBaseViewModel>>();

    internal new static SendNodeDecoder<CCSPlayer_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hViewModel")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseViewModel>(field.FieldEncodingInfo);
            return (CCSPlayer_ViewModelServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ViewModel.Length == 0) @this.ViewModel = new CHandle<CBaseViewModel>[fixedArraySize];
                @this.ViewModel[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayer_ViewModelServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_WaterServices : CPlayer_WaterServices
{
    internal new static SendNodeDecoder<CCSPlayer_WaterServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_WaterServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_WeaponServices : CPlayer_WeaponServices
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime NextAttack { get; private set; } = new();

    public bool IsLookingAtWeapon { get; private set; }

    public bool IsHoldingLookAtWeapon { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_WeaponServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flNextAttack")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsLookingAtWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsLookingAtWeapon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHoldingLookAtWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsHoldingLookAtWeapon = decoder(ref buffer);
            };
        }
        return CPlayer_WeaponServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerBase_CameraServices : CPlayer_CameraServices
{
    public UInt32 FOV { get; private set; }

    public UInt32 FOVStart { get; private set; }

    public GameTime FOVTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float FOVRate { get; private set; }

    public CHandle<CBaseEntity> ZoomOwnerHandle { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerBase_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iFOV")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iFOVStart")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOVStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFOVTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOVTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFOVRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOVRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hZoomOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZoomOwnerHandle = decoder(ref buffer);
            };
        }
        return CPlayer_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkUserGroupProxy "CCSPlayerController"
// MNetworkUserGroupProxy "CCSPlayerController"
// MNetworkUserGroupProxy "CCSPlayerController"
public partial class CCSPlayerController : CBasePlayerController
{
    internal CCSPlayerController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCSPlayerController_InGameMoneyServices? InGameMoneyServices { get; private set; }

    public CCSPlayerController_InventoryServices? InventoryServices { get; private set; }

    public CCSPlayerController_ActionTrackingServices? ActionTrackingServices { get; private set; }

    public CCSPlayerController_DamageServices? DamageServices { get; private set; }

    public UInt32 Ping { get; private set; }

    public bool HasCommunicationAbuseMute { get; private set; }

    public NetworkedString CrosshairCodes { get; private set; }

    public byte PendingTeamNum { get; private set; }

    public GameTime ForceTeamTime { get; private set; } = new();

    // MNetworkChangeCallback "OnCompTeammateColorChanged"
    public Int32 CompTeammateColor { get; private set; }

    public bool EverPlayedOnTeam { get; private set; }

    public NetworkedString Clan { get; private set; }

    public Int32 CoachingTeam { get; private set; }

    public UInt64 PlayerDominated { get; private set; }

    public UInt64 PlayerDominatingMe { get; private set; }

    public Int32 CompetitiveRanking { get; private set; }

    public Int32 CompetitiveWins { get; private set; }

    public sbyte CompetitiveRankType { get; private set; }

    public Int32 CompetitiveRankingPredicted_Win { get; private set; }

    public Int32 CompetitiveRankingPredicted_Loss { get; private set; }

    public Int32 CompetitiveRankingPredicted_Tie { get; private set; }

    public Int32 EndMatchNextMapVote { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt16 ActiveQuestId { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public QuestProgressReason QuestProgressReason { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 PlayerTvControlFlags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Int32 DisconnectionTick { get; private set; }

    public bool ControllingBot { get; private set; }

    public bool HasControlledBotThisRound { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool CanControlObservedBot { get; private set; }

    public CHandle<CCSPlayerPawn> PlayerPawnHandle { get; private set; }
    public CCSPlayerPawn? PlayerPawn => PlayerPawnHandle.Get(Demo);

    public CHandle<CCSObserverPawn> ObserverPawnHandle { get; private set; }
    public CCSObserverPawn? ObserverPawn => ObserverPawnHandle.Get(Demo);

    public bool PawnIsAlive { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public UInt32 PawnHealth { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 PawnArmor { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public bool PawnHasDefuser { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public bool PawnHasHelmet { get; private set; }

    public UInt16 PawnCharacterDefIndex { get; private set; }

    public Int32 PawnLifetimeStart { get; private set; }

    public Int32 PawnLifetimeEnd { get; private set; }

    public Int32 PawnBotDifficulty { get; private set; }

    public CHandle<CCSPlayerController> OriginalControllerOfCurrentPawnHandle { get; private set; }
    public CCSPlayerController? OriginalControllerOfCurrentPawn => OriginalControllerOfCurrentPawnHandle.Get(Demo);

    public Int32 Score { get; private set; }

    public NetworkedVector<EKillTypes> Kills { get; private set; } = new NetworkedVector<EKillTypes>();

    public bool MvpNoMusic { get; private set; }

    public Int32 MvpReason { get; private set; }

    public Int32 MusicKitID { get; private set; }

    public Int32 MusicKitMVPs { get; private set; }

    // MNetworkChangeCallback "OnMVPCountChanged"
    public Int32 MVPs { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pInGameMoneyServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_InGameMoneyServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.InGameMoneyServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.InGameMoneyServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pInventoryServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_InventoryServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.InventoryServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.InventoryServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pActionTrackingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_ActionTrackingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ActionTrackingServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ActionTrackingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pDamageServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_DamageServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.DamageServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.DamageServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iPing")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasCommunicationAbuseMute")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasCommunicationAbuseMute = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szCrosshairCodes")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrosshairCodes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPendingTeamNum")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PendingTeamNum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flForceTeamTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceTeamTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompTeammateColor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompTeammateColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEverPlayedOnTeam")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EverPlayedOnTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szClan")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clan = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCoachingTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CoachingTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayerDominated")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerDominated = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayerDominatingMe")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerDominatingMe = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRanking")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveRanking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveWins")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveWins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankType")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveRankType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Win")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveRankingPredicted_Win = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Loss")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveRankingPredicted_Loss = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Tie")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CompetitiveRankingPredicted_Tie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchNextMapVote")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndMatchNextMapVote = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unActiveQuestId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveQuestId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nQuestProgressReason")
        {
            var decoder = FieldDecode.CreateDecoder_enum<QuestProgressReason>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.QuestProgressReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unPlayerTvControlFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerTvControlFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDisconnectionTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisconnectionTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bControllingBot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ControllingBot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasControlledBotThisRound")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasControlledBotThisRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanControlObservedBot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanControlObservedBot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerPawnHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hObserverPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSObserverPawn>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObserverPawnHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnIsAlive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnIsAlive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnHealth")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnArmor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnArmor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnHasDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnHasDefuser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnHasHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnHasHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPawnCharacterDefIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnCharacterDefIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnLifetimeStart")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnLifetimeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnLifetimeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnLifetimeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnBotDifficulty")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PawnBotDifficulty = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOriginalControllerOfCurrentPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalControllerOfCurrentPawnHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iScore")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Score = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecKills")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EKillTypes>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Kills.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Kills.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Kills[index] = element;
                }
            };
        }
        if (field.VarName == "m_bMvpNoMusic")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MvpNoMusic = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eMvpReason")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MvpReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMusicKitID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MusicKitID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMusicKitMVPs")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MusicKitMVPs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMVPs")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MVPs = decoder(ref buffer);
            };
        }
        return CBasePlayerController.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSPlayerController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSPlayerController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSPlayerController_ActionTrackingServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_ActionTrackingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_ActionTrackingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_ActionTrackingServices")
        {
            factory = () => new CCSPlayerController_ActionTrackingServices();
            return decoderSet.GetDecoder<CCSPlayerController_ActionTrackingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_ActionTrackingServices: {serializerKey}");
    }

    public NetworkedVector<CSPerRoundStats> PerRoundStats { get; private set; } = new NetworkedVector<CSPerRoundStats>();

    public CSMatchStats MatchStats { get; private set; } = new();

    public Int32 NumRoundKills { get; private set; }

    public Int32 NumRoundKillsHeadshots { get; private set; }

    public UInt32 TotalRoundDamageDealt { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController_ActionTrackingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_perRoundStats")
        {
            var innerDecoder = decoderSet.GetDecoder<CSPerRoundStats>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PerRoundStats.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.PerRoundStats.EnsureSize(index + 1);
                    var element = @this.PerRoundStats[index] ??= new CSPerRoundStats();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_matchStats")
        {
            var innerDecoder = CSMatchStats.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.MatchStats, path, ref buffer);
            };
        }
        if (field.VarName == "m_iNumRoundKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumRoundKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumRoundKillsHeadshots")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumRoundKillsHeadshots = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unTotalRoundDamageDealt")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalRoundDamageDealt = decoder(ref buffer);
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_DamageServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_DamageServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_DamageServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_DamageServices")
        {
            factory = () => new CCSPlayerController_DamageServices();
            return decoderSet.GetDecoder<CCSPlayerController_DamageServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_DamageServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    // MNetworkChangeCallback "OnDamageListUpdate"
    public Int32 SendUpdate { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    public NetworkedVector<CDamageRecord> DamageList { get; private set; } = new NetworkedVector<CDamageRecord>();

    internal new static SendNodeDecoder<CCSPlayerController_DamageServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nSendUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_DamageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SendUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DamageList")
        {
            var innerDecoder = decoderSet.GetDecoder<CDamageRecord>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_DamageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.DamageList.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.DamageList.EnsureSize(index + 1);
                    var element = @this.DamageList[index] ??= new CDamageRecord();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_InGameMoneyServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_InGameMoneyServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_InGameMoneyServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_InGameMoneyServices")
        {
            factory = () => new CCSPlayerController_InGameMoneyServices();
            return decoderSet.GetDecoder<CCSPlayerController_InGameMoneyServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_InGameMoneyServices: {serializerKey}");
    }

    public Int32 Account { get; private set; }

    public Int32 StartAccount { get; private set; }

    public Int32 TotalCashSpent { get; private set; }

    public Int32 CashSpentThisRound { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController_InGameMoneyServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iAccount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Account = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iStartAccount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAccount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iTotalCashSpent")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TotalCashSpent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCashSpentThisRound")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CashSpentThisRound = decoder(ref buffer);
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_InventoryServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_InventoryServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_InventoryServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_InventoryServices")
        {
            factory = () => new CCSPlayerController_InventoryServices();
            return decoderSet.GetDecoder<CCSPlayerController_InventoryServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_InventoryServices: {serializerKey}");
    }

    public UInt16 MusicID { get; private set; }

    public MedalRank[] Rank { get; private set; } = Array.Empty<MedalRank>();

    public Int32 PersonaDataPublicLevel { get; private set; }

    public Int32 PersonaDataPublicCommendsLeader { get; private set; }

    public Int32 PersonaDataPublicCommendsTeacher { get; private set; }

    public Int32 PersonaDataPublicCommendsFriendly { get; private set; }

    public Int32 PersonaDataXpTrailLevel { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ServerAuthoritativeWeaponSlot> ServerAuthoritativeWeaponSlots { get; private set; } = new NetworkedVector<ServerAuthoritativeWeaponSlot>();

    internal new static SendNodeDecoder<CCSPlayerController_InventoryServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_unMusicID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MusicID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rank")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_enum<MedalRank>(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Rank.Length == 0) @this.Rank = new MedalRank[fixedArraySize];
                @this.Rank[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PersonaDataPublicLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsLeader")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PersonaDataPublicCommendsLeader = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsTeacher")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PersonaDataPublicCommendsTeacher = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsFriendly")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PersonaDataPublicCommendsFriendly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataXpTrailLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PersonaDataXpTrailLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecServerAuthoritativeWeaponSlots")
        {
            var innerDecoder = decoderSet.GetDecoder<ServerAuthoritativeWeaponSlot>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ServerAuthoritativeWeaponSlots.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.ServerAuthoritativeWeaponSlots.EnsureSize(index + 1);
                    var element = @this.ServerAuthoritativeWeaponSlots[index] ??= new ServerAuthoritativeWeaponSlot();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkVarTypeOverride "CCSPlayer_WeaponServices m_pWeaponServices"
// MNetworkIncludeByName "m_pWeaponServices"
// MNetworkVarTypeOverride "CCSPlayer_ItemServices m_pItemServices"
// MNetworkIncludeByName "m_pItemServices"
// MNetworkVarTypeOverride "CCSPlayer_UseServices m_pUseServices"
// MNetworkIncludeByName "m_pUseServices"
// MNetworkVarTypeOverride "CCSPlayer_WaterServices m_pWaterServices"
// MNetworkIncludeByName "m_pWaterServices"
// MNetworkVarTypeOverride "CCSPlayer_MovementServices m_pMovementServices"
// MNetworkIncludeByName "m_pMovementServices"
// MNetworkVarTypeOverride "CCSPlayer_ViewModelServices m_pViewModelServices"
// MNetworkIncludeByName "m_pViewModelServices"
// MNetworkVarTypeOverride "CCSPlayer_CameraServices m_pCameraServices"
// MNetworkIncludeByName "m_pCameraServices"
public partial class CCSPlayerPawn : CCSPlayerPawnBase
{
    internal CCSPlayerPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public new CCSPlayer_WeaponServices? WeaponServices
    {
        get => (CCSPlayer_WeaponServices?) base.WeaponServices;
    }

    public new CCSPlayer_ItemServices? ItemServices
    {
        get => (CCSPlayer_ItemServices?) base.ItemServices;
    }

    public new CCSPlayer_UseServices? UseServices
    {
        get => (CCSPlayer_UseServices?) base.UseServices;
    }

    public new CCSPlayer_WaterServices? WaterServices
    {
        get => (CCSPlayer_WaterServices?) base.WaterServices;
    }

    public new CCSPlayer_MovementServices? MovementServices
    {
        get => (CCSPlayer_MovementServices?) base.MovementServices;
    }

    public new CCSPlayer_ViewModelServices? ViewModelServices
    {
        get => (CCSPlayer_ViewModelServices?) base.ViewModelServices;
    }

    public new CCSPlayer_CameraServices? CameraServices
    {
        get => (CCSPlayer_CameraServices?) base.CameraServices;
    }

    public CCSPlayer_BulletServices? BulletServices { get; private set; }

    public CCSPlayer_HostageServices? HostageServices { get; private set; }

    public CCSPlayer_BuyServices? BuyServices { get; private set; }

    public CCSPlayer_ActionTrackingServices? ActionTrackingServices { get; private set; }

    public bool HasFemaleVoice { get; private set; }

    public string LastPlaceName { get; private set; } = "";

    public bool InBuyZone { get; private set; }

    public bool InHostageRescueZone { get; private set; }

    public bool InBombZone { get; private set; }

    public Int32 RetakesOffering { get; private set; }

    public Int32 RetakesOfferingCard { get; private set; }

    public bool RetakesHasDefuseKit { get; private set; }

    public bool RetakesMVPLastRound { get; private set; }

    public Int32 RetakesMVPBoostItem { get; private set; }

    public LoadoutSlot RetakesMVPBoostExtraUtility { get; private set; }

    public GameTime HealthShotBoostExpirationTime { get; private set; } = new();

    // MNetworkBitCount 32
    public QAngle AimPunchAngle { get; private set; }

    // MNetworkBitCount 32
    public QAngle AimPunchAngleVel { get; private set; }

    public Int32 AimPunchTickBase { get; private set; }

    public float AimPunchTickFraction { get; private set; }

    public bool IsBuyMenuOpen { get; private set; }

    public GameTime TimeOfLastInjury { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime NextSprayDecalTime { get; private set; } = new();

    public Int32 RagdollDamageBone { get; private set; }

    public Vector RagdollDamageForce { get; private set; }

    public Vector RagdollDamagePosition { get; private set; }

    public string RagdollDamageWeaponName { get; private set; } = "";

    public bool RagdollDamageHeadshot { get; private set; }

    public Vector RagdollServerOrigin { get; private set; }

    public CEconItemView EconGloves { get; private set; } = new();

    public byte EconGlovesChanged { get; private set; }

    public QAngle DeathEyeAngles { get; private set; }

    public bool LeftHanded { get; private set; }

    public GameTime SwitchedHandednessTime { get; private set; } = new();

    // MNetworkMinValue -2
    // MNetworkMaxValue 2.5
    public float ViewmodelOffsetX { get; private set; }

    // MNetworkMinValue -2
    // MNetworkMaxValue 2
    public float ViewmodelOffsetY { get; private set; }

    // MNetworkMinValue -2
    // MNetworkMaxValue 2
    public float ViewmodelOffsetZ { get; private set; }

    // MNetworkMinValue 60
    // MNetworkMaxValue 68
    public float ViewmodelFOV { get; private set; }

    public bool IsWalking { get; private set; }

    public CEntityIndex LastKillerIndex { get; private set; }

    public EntitySpottedState EntitySpottedState { get; private set; } = new();

    public bool IsScoped { get; private set; }

    public bool ResumeZoom { get; private set; }

    public bool IsDefusing { get; private set; }

    public bool IsGrabbingHostage { get; private set; }

    public CSPlayerBlockingUseAction BlockingUseActionInProgress { get; private set; }

    public GameTime EmitSoundTime { get; private set; } = new();

    public bool InNoDefuseArea { get; private set; }

    public Int32 WhichBombZone { get; private set; }

    public Int32 ShotsFired { get; private set; }

    public float VelocityModifier { get; private set; }

    public float HitHeading { get; private set; }

    public Int32 HitBodyPart { get; private set; }

    public bool WaitForNoAttack { get; private set; }

    public bool KilledByHeadshot { get; private set; }

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority 32
    public QAngle ThirdPersonHeading { get; private set; }

    // MNetworkPriority 32
    public float SlopeDropOffset { get; private set; }

    // MNetworkPriority 32
    public float SlopeDropHeight { get; private set; }

    // MNetworkPriority 32
    public Vector HeadConstraintOffset { get; private set; }

    public Int32 ArmorValue { get; private set; }

    public UInt16 CurrentEquipmentValue { get; private set; }

    public UInt16 RoundStartEquipmentValue { get; private set; }

    public UInt16 FreezetimeEndEquipmentValue { get; private set; }

    public UInt32[] PlayerPatchEconIndices { get; private set; } = Array.Empty<UInt32>();

    public Color GunGameImmunityColor { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pBulletServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_BulletServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.BulletServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.BulletServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pHostageServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_HostageServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.HostageServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.HostageServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pBuyServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_BuyServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.BuyServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.BuyServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pActionTrackingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_ActionTrackingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ActionTrackingServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ActionTrackingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bHasFemaleVoice")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasFemaleVoice = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szLastPlaceName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastPlaceName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInBuyZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InBuyZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInHostageRescueZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InHostageRescueZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInBombZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InBombZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesOffering")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesOffering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesOfferingCard")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesOfferingCard = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRetakesHasDefuseKit")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesHasDefuseKit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRetakesMVPLastRound")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesMVPLastRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesMVPBoostItem")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesMVPBoostItem = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RetakesMVPBoostExtraUtility")
        {
            var decoder = FieldDecode.CreateDecoder_enum<LoadoutSlot>(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RetakesMVPBoostExtraUtility = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHealthShotBoostExpirationTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HealthShotBoostExpirationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPunchAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchAngleVel")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPunchAngleVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchTickBase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPunchTickBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchTickFraction")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AimPunchTickFraction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsBuyMenuOpen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsBuyMenuOpen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeOfLastInjury")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeOfLastInjury = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextSprayDecalTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NextSprayDecalTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRagdollDamageBone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollDamageBone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vRagdollDamageForce")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollDamageForce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vRagdollDamagePosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollDamagePosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szRagdollDamageWeaponName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollDamageWeaponName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRagdollDamageHeadshot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollDamageHeadshot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vRagdollServerOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollServerOrigin = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_EconGloves")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EconGloves, path, ref buffer);
            };
        }
        if (field.VarName == "m_nEconGlovesChanged")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EconGlovesChanged = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_qDeathEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DeathEyeAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLeftHanded")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LeftHanded = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fSwitchedHandednessTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SwitchedHandednessTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flViewmodelOffsetX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewmodelOffsetX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flViewmodelOffsetY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewmodelOffsetY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flViewmodelOffsetZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewmodelOffsetZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flViewmodelFOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewmodelFOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsWalking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsWalking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLastKillerIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastKillerIndex = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EntitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsScoped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsScoped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bResumeZoom")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResumeZoom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsDefusing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsDefusing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsGrabbingHostage")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsGrabbingHostage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBlockingUseActionInProgress")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSPlayerBlockingUseAction>(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BlockingUseActionInProgress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEmitSoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EmitSoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInNoDefuseArea")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InNoDefuseArea = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWhichBombZone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WhichBombZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iShotsFired")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShotsFired = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flVelocityModifier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VelocityModifier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHitHeading")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitHeading = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitBodyPart")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitBodyPart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWaitForNoAttack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WaitForNoAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bKilledByHeadshot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KilledByHeadshot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_thirdPersonHeading")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ThirdPersonHeading = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlopeDropOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SlopeDropOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlopeDropHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SlopeDropHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vHeadConstraintOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeadConstraintOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ArmorValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ArmorValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unCurrentEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unRoundStartEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundStartEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unFreezetimeEndEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FreezetimeEndEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerPatchEconIndices")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.PlayerPatchEconIndices.Length == 0) @this.PlayerPatchEconIndices = new UInt32[fixedArraySize];
                @this.PlayerPatchEconIndices[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_GunGameImmunityColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GunGameImmunityColor = decoder(ref buffer);
            };
        }
        return CCSPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawn.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSPlayerPawn.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawn.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawn.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_baseLayer.m_hSequence"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
public partial class CCSPlayerPawnBase : CBasePlayerPawn
{
    internal CCSPlayerPawnBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CTouchExpansionComponent"
    // MNetworkAlias "CTouchExpansionComponent"
    // MNetworkTypeAlias "CTouchExpansionComponent"
    public CTouchExpansionComponent CTouchExpansionComponent { get; private set; } = new();

    public CCSPlayer_PingServices? PingServices { get; private set; }

    public CPlayer_ViewModelServices? ViewModelServices { get; private set; }

    public CSPlayerState PlayerState { get; private set; }

    public GameTime ImmuneToGunGameDamageTime { get; private set; } = new();

    public bool GunGameImmunity { get; private set; }

    public float MolotovDamageTime { get; private set; }

    public bool HasMovedSinceSpawn { get; private set; }

    public float FlashDuration { get; private set; }

    public float FlashMaxAlpha { get; private set; }

    public float ProgressBarStartTime { get; private set; }

    public Int32 ProgressBarDuration { get; private set; }

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority 32
    public QAngle EyeAngles { get; private set; }

    public bool Hud_MiniScoreHidden { get; private set; }

    public bool Hud_RadarHidden { get; private set; }

    public CHandle<CCSPlayerController> OriginalControllerHandle { get; private set; }
    public CCSPlayerController? OriginalController => OriginalControllerHandle.Get(Demo);

    internal new static SendNodeDecoder<CCSPlayerPawnBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CTouchExpansionComponent")
        {
            var innerDecoder = CTouchExpansionComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.CTouchExpansionComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_pPingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_PingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.PingServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.PingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pViewModelServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ViewModelServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.ViewModelServices = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.ViewModelServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iPlayerState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSPlayerState>(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fImmuneToGunGameDamageTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ImmuneToGunGameDamageTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGunGameImmunity")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GunGameImmunity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fMolotovDamageTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MolotovDamageTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasMovedSinceSpawn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasMovedSinceSpawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashMaxAlpha")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashMaxAlpha = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProgressBarStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProgressBarStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iProgressBarDuration")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProgressBarDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EyeAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHud_MiniScoreHidden")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Hud_MiniScoreHidden = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHud_RadarHidden")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Hud_RadarHidden = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOriginalController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalControllerHandle = decoder(ref buffer);
            };
        }
        return CBasePlayerPawn.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawnBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSPlayerPawnBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawnBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerPawnBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSPlayerResource : CBaseEntity
{
    internal CCSPlayerResource(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool[] HostageAlive { get; private set; } = Array.Empty<bool>();

    public bool[] IsHostageFollowingSomeone { get; private set; } = Array.Empty<bool>();

    public CEntityIndex[] HostageEntityIDs { get; private set; } = Array.Empty<CEntityIndex>();

    public Vector BombsiteCenterA { get; private set; }

    public Vector BombsiteCenterB { get; private set; }

    public Int32[] HostageRescueX { get; private set; } = Array.Empty<Int32>();

    public Int32[] HostageRescueY { get; private set; } = Array.Empty<Int32>();

    public Int32[] HostageRescueZ { get; private set; } = Array.Empty<Int32>();

    public bool EndMatchNextMapAllVoted { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bHostageAlive")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HostageAlive.Length == 0) @this.HostageAlive = new bool[fixedArraySize];
                @this.HostageAlive[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_isHostageFollowingSomeone")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.IsHostageFollowingSomeone.Length == 0) @this.IsHostageFollowingSomeone = new bool[fixedArraySize];
                @this.IsHostageFollowingSomeone[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHostageEntityIDs")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HostageEntityIDs.Length == 0) @this.HostageEntityIDs = new CEntityIndex[fixedArraySize];
                @this.HostageEntityIDs[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bombsiteCenterA")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombsiteCenterA = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bombsiteCenterB")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombsiteCenterB = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueX")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HostageRescueX.Length == 0) @this.HostageRescueX = new Int32[fixedArraySize];
                @this.HostageRescueX[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueY")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HostageRescueY.Length == 0) @this.HostageRescueY = new Int32[fixedArraySize];
                @this.HostageRescueY[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueZ")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.HostageRescueZ.Length == 0) @this.HostageRescueZ = new Int32[fixedArraySize];
                @this.HostageRescueZ[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEndMatchNextMapAllVoted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndMatchNextMapAllVoted = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSPlayerResource.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSPlayerResource.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerResource.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSPlayerResource.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSTeam : CTeam
{
    internal CCSTeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Surrendered { get; private set; }

    public string TeamMatchStat { get; private set; } = "";

    public Int32 NumMapVictories { get; private set; }

    public Int32 ScoreFirstHalf { get; private set; }

    public Int32 ScoreSecondHalf { get; private set; }

    public Int32 ScoreOvertime { get; private set; }

    public string ClanTeamname { get; private set; } = "";

    public UInt32 ClanID { get; private set; }

    public string TeamFlagImage { get; private set; } = "";

    public string TeamLogoImage { get; private set; } = "";

    internal new static SendNodeDecoder<CCSTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bSurrendered")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Surrendered = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamMatchStat")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamMatchStat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numMapVictories")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumMapVictories = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreFirstHalf")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScoreFirstHalf = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreSecondHalf")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScoreSecondHalf = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreOvertime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScoreOvertime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szClanTeamname")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClanTeamname = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClanID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClanID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamFlagImage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamFlagImage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamLogoImage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamLogoImage = decoder(ref buffer);
            };
        }
        return CTeam.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSTeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSTeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSTeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSTeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flTimeWeaponIdle"
public partial class CCSWeaponBase : CBasePlayerWeapon
{
    internal CCSWeaponBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FireSequenceStartTime { get; private set; }

    public Int32 FireSequenceStartTimeChange { get; private set; }

    public PlayerAnimEvent PlayerFireEvent { get; private set; }

    public WeaponAttackType PlayerFireEventAttackType { get; private set; }

    // MNetworkChangeCallback "OnWeaponStateNetworkChange"
    public CSWeaponState State { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public UInt32 ViewModelIndex { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    // MNetworkPriority 32
    public GameTime TimeWeaponIdle { get; private set; } = new();

    public CSWeaponMode WeaponMode { get; private set; }

    public float AccuracyPenalty { get; private set; }

    public Int32 IRecoilIndex { get; private set; }

    public float FlRecoilIndex { get; private set; }

    public bool BurstMode { get; private set; }

    public GameTick PostponeFireReadyTicks { get; private set; } = new();

    public float PostponeFireReadyFrac { get; private set; }

    public bool InReload { get; private set; }

    public bool ReloadVisuallyComplete { get; private set; }

    public GameTime DroppedAtTime { get; private set; } = new();

    public bool IsHauledBack { get; private set; }

    public bool SilencerOn { get; private set; }

    public GameTime TimeSilencerSwitchComplete { get; private set; } = new();

    public Int32 OriginalTeamNumber { get; private set; }

    public Int32 MostRecentTeamNumber { get; private set; }

    public bool DroppedNearBuyZone { get; private set; }

    public CHandle<CCSPlayerPawn> PrevOwnerHandle { get; private set; }
    public CCSPlayerPawn? PrevOwner => PrevOwnerHandle.Get(Demo);

    public GameTick DropTick { get; private set; } = new();

    public GameTime LastShotTime { get; private set; } = new();

    public Int32 IronSightMode { get; private set; }

    public Int32 NumEmptyAttacks { get; private set; }

    internal new static SendNodeDecoder<CCSWeaponBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFireSequenceStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireSequenceStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireSequenceStartTimeChange")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireSequenceStartTimeChange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ePlayerFireEvent")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerAnimEvent>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerFireEvent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ePlayerFireEventAttackType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<WeaponAttackType>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerFireEventAttackType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSWeaponState>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.State = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nViewModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeWeaponIdle")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeWeaponIdle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_weaponMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSWeaponMode>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WeaponMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAccuracyPenalty")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AccuracyPenalty = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRecoilIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IRecoilIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRecoilIndex")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlRecoilIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBurstMode")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BurstMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPostponeFireReadyTicks")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostponeFireReadyTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPostponeFireReadyFrac")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostponeFireReadyFrac = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInReload")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InReload = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bReloadVisuallyComplete")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReloadVisuallyComplete = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDroppedAtTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DroppedAtTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHauledBack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsHauledBack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSilencerOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SilencerOn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeSilencerSwitchComplete")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimeSilencerSwitchComplete = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOriginalTeamNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalTeamNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMostRecentTeamNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MostRecentTeamNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDroppedNearBuyZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DroppedNearBuyZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPrevOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrevOwnerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDropTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DropTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLastShotTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastShotTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iIronSightMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IronSightMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumEmptyAttacks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumEmptyAttacks = decoder(ref buffer);
            };
        }
        return CBasePlayerWeapon.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSWeaponBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSWeaponBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSWeaponBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSWeaponBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CCSWeaponBaseGun : CCSWeaponBase
{
    internal CCSWeaponBaseGun(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 ZoomLevel { get; private set; }

    public Int32 BurstShotsRemaining { get; private set; }

    public bool NeedsBoltAction { get; private set; }

    internal new static SendNodeDecoder<CCSWeaponBaseGun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_zoomLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZoomLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBurstShotsRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BurstShotsRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNeedsBoltAction")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NeedsBoltAction = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CCSWeaponBaseGun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CCSWeaponBaseGun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CCSWeaponBaseGun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CCSWeaponBaseGun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDamageRecord
{
    public CHandle<CCSPlayerPawn> PlayerDamagerHandle { get; private set; }

    public CHandle<CCSPlayerPawn> PlayerRecipientHandle { get; private set; }

    public CHandle<CCSPlayerController> PlayerControllerDamagerHandle { get; private set; }

    public CHandle<CCSPlayerController> PlayerControllerRecipientHandle { get; private set; }

    public NetworkedString PlayerDamagerName { get; private set; }

    public NetworkedString PlayerRecipientName { get; private set; }

    public UInt64 DamagerXuid { get; private set; }

    public UInt64 RecipientXuid { get; private set; }

    public Int32 Damage { get; private set; }

    public Int32 ActualHealthRemoved { get; private set; }

    public Int32 NumHits { get; private set; }

    public Int32 LastBulletUpdate { get; private set; }

    public bool IsOtherEnemy { get; private set; }

    public EKillTypes KillType { get; private set; }

    internal static SendNodeDecoder<CDamageRecord> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_PlayerDamager")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerDamagerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PlayerRecipient")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerRecipientHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerControllerDamager")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerControllerDamagerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerControllerRecipient")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerControllerRecipientHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlayerDamagerName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerDamagerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlayerRecipientName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerRecipientName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DamagerXuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DamagerXuid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RecipientXuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RecipientXuid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Damage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iActualHealthRemoved")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActualHealthRemoved = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumHits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumHits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLastBulletUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastBulletUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsOtherEnemy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsOtherEnemy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_killType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EKillTypes>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KillType = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CDEagle : CCSWeaponBaseGun
{
    internal CDEagle(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CDEagle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CDEagle.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDEagle.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDEagle.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDEagle.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDecoyGrenade : CBaseCSGrenade
{
    internal CDecoyGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CDecoyGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CDecoyGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDecoyGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDecoyGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDecoyGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDecoyProjectile : CBaseCSGrenadeProjectile
{
    internal CDecoyProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 DecoyShotTick { get; private set; }

    internal new static SendNodeDecoder<CDecoyProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nDecoyShotTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDecoyProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecoyShotTick = decoder(ref buffer);
            };
        }
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CDecoyProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDecoyProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDecoyProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDecoyProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDynamicLight : CBaseModelEntity
{
    internal CDynamicLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public byte DynamicLightFlags { get; private set; }

    public byte LightStyle { get; private set; }

    public float Radius { get; private set; }

    public Int32 Exponent { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    public float InnerAngle { get; private set; }

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    public float OuterAngle { get; private set; }

    public float SpotRadius { get; private set; }

    internal new static SendNodeDecoder<CDynamicLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Flags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DynamicLightFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyle")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Exponent")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_InnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotRadius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CDynamicLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDynamicLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDynamicLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDynamicLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CDynamicProp : CBreakableProp
{
    internal CDynamicProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool UseHitboxesForRenderBox { get; private set; }

    public bool UseAnimGraph { get; private set; }

    internal new static SendNodeDecoder<CDynamicProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bUseHitboxesForRenderBox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseHitboxesForRenderBox = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAnimGraph")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseAnimGraph = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CDynamicProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CDynamicProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CDynamicProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CDynamicProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEconEntity : CBaseFlex
{
    internal CEconEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CAttributeContainer AttributeManager { get; private set; } = new();

    public UInt32 OriginalOwnerXuidLow { get; private set; }

    public UInt32 OriginalOwnerXuidHigh { get; private set; }

    public Int32 FallbackPaintKit { get; private set; }

    public Int32 FallbackSeed { get; private set; }

    public float FallbackWear { get; private set; }

    public Int32 FallbackStatTrak { get; private set; }

    internal new static SendNodeDecoder<CEconEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeManager")
        {
            var innerDecoder = CAttributeContainer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AttributeManager, path, ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalOwnerXuidLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OriginalOwnerXuidHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackPaintKit")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallbackPaintKit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallbackSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFallbackWear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallbackWear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackStatTrak")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallbackStatTrak = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEconEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEconEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEconEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEconEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEconItemAttribute
{
    public UInt16 AttributeDefinitionIndex { get; private set; }

    // MNetworkAlias "m_iRawValue32"
    public float Value { get; private set; }

    public float InitialValue { get; private set; }

    public Int32 RefundableCurrency { get; private set; }

    public bool SetBonus { get; private set; }

    internal static SendNodeDecoder<CEconItemAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iAttributeDefinitionIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttributeDefinitionIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRawValue32")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Value = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInitialValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRefundableCurrency")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RefundableCurrency = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSetBonus")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SetBonus = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEconItemView : IEconItemInterface
{
    public UInt16 ItemDefinitionIndex { get; private set; }

    public Int32 EntityQuality { get; private set; }

    public UInt32 EntityLevel { get; private set; }

    public UInt32 ItemIDHigh { get; private set; }

    public UInt32 ItemIDLow { get; private set; }

    public UInt32 AccountID { get; private set; }

    public UInt32 InventoryPosition { get; private set; }

    public bool Initialized { get; private set; }

    public CAttributeList AttributeList { get; private set; } = new();

    public CAttributeList NetworkedDynamicAttributes { get; private set; } = new();

    public string CustomName { get; private set; } = "";

    internal new static SendNodeDecoder<CEconItemView> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iItemDefinitionIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemDefinitionIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityQuality")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityLevel")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iItemIDHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemIDHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iItemIDLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemIDLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAccountID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AccountID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInventoryPosition")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InventoryPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInitialized")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Initialized = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeList")
        {
            var innerDecoder = CAttributeList.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.AttributeList, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_NetworkedDynamicAttributes")
        {
            var innerDecoder = CAttributeList.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.NetworkedDynamicAttributes, path, ref buffer);
            };
        }
        if (field.VarName == "m_szCustomName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CustomName = decoder(ref buffer);
            };
        }
        return IEconItemInterface.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEconWearable : CEconEntity
{
    internal CEconWearable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CEconWearable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEconEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEconWearable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEconWearable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEconWearable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEconWearable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEntityComponent
{
    internal static SendNodeDecoder<CEntityComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEntityComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEntityDissolve : CBaseModelEntity
{
    internal CEntityDissolve(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeInStart { get; private set; }

    public float FadeInLength { get; private set; }

    public float FadeOutModelStart { get; private set; }

    public float FadeOutModelLength { get; private set; }

    public float FadeOutStart { get; private set; }

    public float FadeOutLength { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public EntityDisolveType DissolveType { get; private set; }

    public Vector DissolverOrigin { get; private set; }

    public UInt32 Magnitude { get; private set; }

    internal new static SendNodeDecoder<CEntityDissolve> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutModelStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutModelLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeOutLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDissolveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EntityDisolveType>(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissolveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDissolverOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DissolverOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMagnitude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Magnitude = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEntityDissolve.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEntityDissolve.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEntityFlame : CBaseEntity
{
    internal CEntityFlame(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> EntAttachedHandle { get; private set; }
    public CBaseEntity? EntAttached => EntAttachedHandle.Get(Demo);

    public bool CheapEffect { get; private set; }

    internal new static SendNodeDecoder<CEntityFlame> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hEntAttached")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntAttachedHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCheapEffect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CheapEffect = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEntityFlame.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEntityFlame.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEntityFlame.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEntityFlame.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEntityIdentity
{
    internal static SendNodeDecoder<CEntityIdentity> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CEntityIdentity> factory)
    {
        if (serializerKey.Name == "CEntityIdentity")
        {
            factory = () => new CEntityIdentity();
            return decoderSet.GetDecoder<CEntityIdentity>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CEntityIdentity: {serializerKey}");
    }

    // MNetworkChangeCallback "entityIdentityNameChanged"
    public Int32 NameStringableIndex { get; private set; }

    internal static SendNodeDecoder<CEntityIdentity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nameStringableIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEntityIdentity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NameStringableIndex = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEntityIdentity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEntityInstance
{
    // MNetworkPriority 56
    public CEntityIdentity? Entity { get; private set; }

    // MNetworkDisable
    public CScriptComponent? CScriptComponent { get; private set; }

    internal static SendNodeDecoder<CEntityInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pEntity")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CEntityIdentity.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CEntityInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.Entity = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.Entity ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_CScriptComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CScriptComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CEntityInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CScriptComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CScriptComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEntityInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }

    internal virtual void FireCreateEvent()
    {
        Demo.EntityEvents.CEntityInstance.Create?.Invoke(this);
    }

    internal virtual void FireDeleteEvent()
    {
        Demo.EntityEvents.CEntityInstance.Delete?.Invoke(this);
    }

    internal virtual void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEntityInstance.PreUpdate?.Invoke(this);
    }

    internal virtual void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEntityInstance.PostUpdate?.Invoke(this);
    }
}

public partial class CEnvCombinedLightProbeVolume : CBaseEntity
{
    internal CEnvCombinedLightProbeVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "StateChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "StateChanged"
    public float Brightness { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture { get; private set; }

    public bool CustomCubemapTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 EnvCubeMapArrayIndex { get; private set; }

    public Int32 Priority { get; private set; }

    public bool StartDisabled { get; private set; }

    public float EdgeFadeDist { get; private set; }

    public Vector EdgeFadeDists { get; private set; }

    public Int32 LightProbeSizeX { get; private set; }

    public Int32 LightProbeSizeY { get; private set; }

    public Int32 LightProbeSizeZ { get; private set; }

    public Int32 LightProbeAtlasX { get; private set; }

    public Int32 LightProbeAtlasY { get; private set; }

    public Int32 LightProbeAtlasZ { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCombinedLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCombinedLightProbeVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvCubemap : CBaseEntity
{
    internal CEnvCubemap(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture { get; private set; }

    public bool CustomCubemapTexture { get; private set; }

    public float InfluenceRadius { get; private set; }

    public Vector BoxProjectMins { get; private set; }

    public Vector BoxProjectMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 EnvCubeMapArrayIndex { get; private set; }

    public Int32 Priority { get; private set; }

    public float EdgeFadeDist { get; private set; }

    public Vector EdgeFadeDists { get; private set; }

    public float DiffuseScale { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool DefaultEnvMap { get; private set; }

    public bool DefaultSpecEnvMap { get; private set; }

    public bool IndoorCubeMap { get; private set; }

    public bool CopyDiffuseFromDefaultCubemap { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInfluenceRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InfluenceRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxProjectMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxProjectMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxProjectMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxProjectMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDiffuseScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DiffuseScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDefaultEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDefaultSpecEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultSpecEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIndoorCubeMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndoorCubeMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCopyDiffuseFromDefaultCubemap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CopyDiffuseFromDefaultCubemap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCubemap.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemap.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvCubemapBox : CEnvCubemap
{
    internal CEnvCubemapBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CEnvCubemapBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEnvCubemap.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCubemapBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCubemapBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvCubemapFog : CBaseEntity
{
    internal CEnvCubemapFog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float EndDistance { get; private set; }

    public float StartDistance { get; private set; }

    public float FogFalloffExponent { get; private set; }

    public bool HeightFogEnabled { get; private set; }

    public float FogHeightWidth { get; private set; }

    public float FogHeightEnd { get; private set; }

    public float FogHeightStart { get; private set; }

    public float FogHeightExponent { get; private set; }

    public float LODBias { get; private set; }

    public bool Active { get; private set; }

    public bool StartDisabled { get; private set; }

    public float FogMaxOpacity { get; private set; }

    public Int32 CubemapSourceType { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial { get; private set; }

    public NetworkedString SkyEntity { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> FogCubemapTexture { get; private set; }

    public bool HasHeightFogEnd { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemapFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogHeightExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLODBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LODBias = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCubemapSourceType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CubemapSourceType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSkyEntity")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHeightFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasHeightFogEnd = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvCubemapFog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvDecal : CBaseModelEntity
{
    internal CEnvDecal(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> DecalMaterial { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Width { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Height { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float Depth { get; private set; }

    public UInt32 RenderOrder { get; private set; }

    public bool ProjectOnWorld { get; private set; }

    public bool ProjectOnCharacters { get; private set; }

    public bool ProjectOnWater { get; private set; }

    public float DepthSortBias { get; private set; }

    internal new static SendNodeDecoder<CEnvDecal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hDecalMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Height = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Depth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderOrder")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderOrder = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnCharacters")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnCharacters = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWater")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectOnWater = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthSortBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthSortBias = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvDecal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvDecal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvDecal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvDecal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvDetailController : CBaseEntity
{
    internal CEnvDetailController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FadeStartDist { get; private set; }

    public float FadeEndDist { get; private set; }

    internal new static SendNodeDecoder<CEnvDetailController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeStartDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeStartDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeEndDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeEndDist = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvDetailController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvDetailController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvLightProbeVolume : CBaseEntity
{
    internal CEnvLightProbeVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Moveable { get; private set; }

    public Int32 Handshake { get; private set; }

    public Int32 Priority { get; private set; }

    public bool StartDisabled { get; private set; }

    public Int32 LightProbeSizeX { get; private set; }

    public Int32 LightProbeSizeY { get; private set; }

    public Int32 LightProbeSizeZ { get; private set; }

    public Int32 LightProbeAtlasX { get; private set; }

    public Int32 LightProbeAtlasY { get; private set; }

    public Int32 LightProbeAtlasZ { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Moveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Handshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Priority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvLightProbeVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvParticleGlow : CParticleSystem
{
    internal CEnvParticleGlow(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float AlphaScale { get; private set; }

    public float RadiusScale { get; private set; }

    public float SelfIllumScale { get; private set; }

    public Color ColorTint { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> TextureOverride { get; private set; }

    internal new static SendNodeDecoder<CEnvParticleGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RadiusScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSelfIllumScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SelfIllumScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTextureOverride")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureOverride = decoder(ref buffer);
            };
        }
        return CParticleSystem.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvParticleGlow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvProjectedTexture : CModelPointEntity
{
    internal CEnvProjectedTexture(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> TargetEntityHandle { get; private set; }
    public CBaseEntity? TargetEntity => TargetEntityHandle.Get(Demo);

    public bool State { get; private set; }

    public bool AlwaysUpdate { get; private set; }

    public float LightFOV { get; private set; }

    public bool EnableShadows { get; private set; }

    public bool SimpleProjection { get; private set; }

    public bool LightOnlyTarget { get; private set; }

    public bool LightWorld { get; private set; }

    public bool CameraSpace { get; private set; }

    public float BrightnessScale { get; private set; }

    public Color LightColor { get; private set; }

    public float Intensity { get; private set; }

    public float LinearAttenuation { get; private set; }

    public float QuadraticAttenuation { get; private set; }

    public bool Volumetric { get; private set; }

    public float NoiseStrength { get; private set; }

    public float FlashlightTime { get; private set; }

    public UInt32 NumPlanes { get; private set; }

    public float PlaneOffset { get; private set; }

    public float VolumetricIntensity { get; private set; }

    public float ColorTransitionTime { get; private set; }

    public float Ambient { get; private set; }

    public string SpotlightTextureName { get; private set; } = "";

    public Int32 SpotlightTextureFrame { get; private set; }

    public UInt32 ShadowQuality { get; private set; }

    // MNetworkBitCount 16
    // MNetworkMinValue 0
    // MNetworkMaxValue 500
    // MNetworkEncodeFlags 1
    public float NearZ { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue 0
    // MNetworkMaxValue 1500
    // MNetworkEncodeFlags 1
    public float FarZ { get; private set; }

    public float ProjectionSize { get; private set; }

    public float TextureRotation { get; private set; }

    public bool FlipHorizontal { get; private set; }

    internal new static SendNodeDecoder<CEnvProjectedTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hTargetEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bState")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.State = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlwaysUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlwaysUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightFOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightFOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnableShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSimpleProjection")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SimpleProjection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightOnlyTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightOnlyTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCameraSpace")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CameraSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Intensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLinearAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flQuadraticAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.QuadraticAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bVolumetric")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Volumetric = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashlightTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlashlightTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumPlanes")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NumPlanes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPlaneOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlaneOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flVolumetricIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VolumetricIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTransitionTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTransitionTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAmbient")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ambient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotlightTextureName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotlightTextureName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSpotlightTextureFrame")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpotlightTextureFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowQuality")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NearZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProjectionSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ProjectionSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlipHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlipHorizontal = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvProjectedTexture.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvScreenOverlay : CPointEntity
{
    internal CEnvScreenOverlay(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString[] OverlayNames { get; private set; } = Array.Empty<NetworkedString>();

    // MNetworkBitCount 11
    // MNetworkMinValue -1
    // MNetworkMaxValue 63
    public float[] OverlayTimes { get; private set; } = Array.Empty<float>();

    public GameTime StartTime { get; private set; } = new();

    public Int32 DesiredOverlay { get; private set; }

    public bool IsOverlayActive { get; private set; }

    internal new static SendNodeDecoder<CEnvScreenOverlay> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszOverlayNames")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.OverlayNames.Length == 0) @this.OverlayNames = new NetworkedString[fixedArraySize];
                @this.OverlayNames[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOverlayTimes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.OverlayTimes.Length == 0) @this.OverlayTimes = new float[fixedArraySize];
                @this.OverlayTimes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DesiredOverlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsOverlayActive = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvScreenOverlay.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvSky : CBaseModelEntity
{
    internal CEnvSky(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterialLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool StartDisabled { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColor { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColorLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Int32 FogType { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMinStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMinEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMaxStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float FogMaxEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CEnvSky> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterialLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyMaterialLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TintColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColorLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TintColorLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMinStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMinEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvSky.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvSky.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvSky.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvSky.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvVolumetricFogController : CBaseEntity
{
    internal CEnvVolumetricFogController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Scattering { get; private set; }

    public float Anisotropy { get; private set; }

    public float FadeSpeed { get; private set; }

    public float DrawDistance { get; private set; }

    public float FadeInStart { get; private set; }

    public float FadeInEnd { get; private set; }

    public float IndirectStrength { get; private set; }

    public Int32 IndirectTextureDimX { get; private set; }

    public Int32 IndirectTextureDimY { get; private set; }

    public Int32 IndirectTextureDimZ { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool Active { get; private set; }

    public GameTime StartAnisoTime { get; private set; } = new();

    public GameTime StartScatterTime { get; private set; } = new();

    public GameTime StartDrawDistanceTime { get; private set; } = new();

    public float StartAnisotropy { get; private set; }

    public float StartScattering { get; private set; }

    public float StartDrawDistance { get; private set; }

    public float DefaultAnisotropy { get; private set; }

    public float DefaultScattering { get; private set; }

    public float DefaultDrawDistance { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool EnableIndirect { get; private set; }

    public bool IsMaster { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> FogIndirectTexture { get; private set; }

    public Int32 ForceRefreshCount { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Anisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeInEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIndirectStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectTextureDimZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisoTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAnisoTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScatterTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScatterTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistanceTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDrawDistanceTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefaultDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableIndirect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnableIndirect = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsMaster = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogIndirectTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogIndirectTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceRefreshCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceRefreshCount = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvVolumetricFogVolume : CBaseEntity
{
    internal CEnvVolumetricFogVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Active { get; private set; }

    public Vector BoxMins { get; private set; }

    public Vector BoxMaxs { get; private set; }

    public bool StartDisabled { get; private set; }

    public float Strength { get; private set; }

    public Int32 FalloffShape { get; private set; }

    public float FalloffExponent { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Strength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFalloffShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FalloffShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FalloffExponent = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvVolumetricFogVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvWind : CBaseEntity
{
    internal CEnvWind(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CEnvWindShared EnvWindShared { get; private set; } = new();

    internal new static SendNodeDecoder<CEnvWind> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_EnvWindShared")
        {
            var innerDecoder = CEnvWindShared.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEnvWind @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EnvWindShared, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CEnvWind.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CEnvWind.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CEnvWind.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CEnvWind.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CEnvWindShared
{
    public GameTime StartTime { get; private set; } = new();

    public UInt32 WindSeed { get; private set; }

    public UInt16 MinWind { get; private set; }

    public UInt16 MaxWind { get; private set; }

    public Int32 WindRadius { get; private set; }

    public UInt16 MinGust { get; private set; }

    public UInt16 MaxGust { get; private set; }

    public float MinGustDelay { get; private set; }

    public float MaxGustDelay { get; private set; }

    public float GustDuration { get; private set; }

    public UInt16 GustDirChange { get; private set; }

    // MNetworkEncoder "coord"
    public Vector Location { get; private set; }

    public UInt16 InitialWindDir { get; private set; }

    public float InitialWindSpeed { get; private set; }

    internal static SendNodeDecoder<CEnvWindShared> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iWindSeed")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_windRadius")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WindRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGustDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GustDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGustDirChange")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GustDirChange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_location")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Location = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInitialWindDir")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialWindDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInitialWindSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InitialWindSpeed = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CFireCrackerBlast : CInferno
{
    internal CFireCrackerBlast(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFireCrackerBlast> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CInferno.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFireCrackerBlast.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFireCrackerBlast.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFireCrackerBlast.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFireCrackerBlast.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFireSmoke : CBaseFire
{
    internal CFireSmoke(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 FlameModelIndex { get; private set; }

    public Int32 FlameFromAboveModelIndex { get; private set; }

    internal new static SendNodeDecoder<CFireSmoke> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nFlameModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlameModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlameFromAboveModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FlameFromAboveModelIndex = decoder(ref buffer);
            };
        }
        return CBaseFire.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFireSmoke.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFireSmoke.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFireSmoke.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFireSmoke.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_nModelIndex"
// MNetworkIncludeByName "m_lifeState"
public partial class CFish : CBaseAnimGraph
{
    internal CFish(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkSerializer "fish_pos_x"
    public float X { get; private set; }

    // MNetworkSerializer "fish_pos_y"
    public float Y { get; private set; }

    // MNetworkSerializer "fish_pos_z"
    public float Z { get; private set; }

    // MNetworkSerializer "angle_normalize_positive"
    // MNetworkBitCount 7
    // MNetworkMinValue 0
    // MNetworkMaxValue 360
    // MNetworkEncodeFlags 1
    public float Angle { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PoolOrigin { get; private set; }

    public float FishWaterLevel { get; private set; }

    internal new static SendNodeDecoder<CFish> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_x")
        {
            var decoder = CreateDecoder_fish_pos_x(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_y")
        {
            var decoder = CreateDecoder_fish_pos_y(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_z")
        {
            var decoder = CreateDecoder_fish_pos_z(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_angle")
        {
            var decoder = CreateDecoder_angle_normalize_positive(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Angle = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_poolOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PoolOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_waterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FishWaterLevel = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFish.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFish.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFish.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFish.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFists : CCSWeaponBase
{
    internal CFists(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool PlayingUninterruptableAct { get; private set; }

    // MNetworkChangeCallback "OnUninterruptChanged"
    public PlayerAnimEvent UninterruptableActivity { get; private set; }

    internal new static SendNodeDecoder<CFists> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bPlayingUninterruptableAct")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFists @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayingUninterruptableAct = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nUninterruptableActivity")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerAnimEvent>(field.FieldEncodingInfo);
            return (CFists @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UninterruptableActivity = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFists.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFists.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFists.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFists.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFlashbang : CBaseCSGrenade
{
    internal CFlashbang(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFlashbang> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFlashbang.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFlashbang.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFlashbang.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFlashbang.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFlashbangProjectile : CBaseCSGrenadeProjectile
{
    internal CFlashbangProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFlashbangProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFlashbangProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFlashbangProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFlashbangProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFlashbangProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFogController : CBaseEntity
{
    internal CFogController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public FogParams Fog { get; private set; } = new();

    internal new static SendNodeDecoder<CFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_fog")
        {
            var innerDecoder = FogParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Fog, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFogController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFogController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFogController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFogController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFootstepControl : CBaseTrigger
{
    internal CFootstepControl(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString Source { get; private set; }

    public NetworkedString Destination { get; private set; }

    internal new static SendNodeDecoder<CFootstepControl> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_source")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFootstepControl @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Source = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_destination")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFootstepControl @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Destination = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFootstepControl.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFootstepControl.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFootstepControl.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFootstepControl.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncBrush : CBaseModelEntity
{
    internal CFuncBrush(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncBrush> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncBrush.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncBrush.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncBrush.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncBrush.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_fFlags"
// MNetworkOverride "m_fFlags CBaseEntity"
public partial class CFuncConveyor : CBaseModelEntity
{
    internal CFuncConveyor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector MoveDirEntitySpace { get; private set; }

    public float TargetSpeed { get; private set; }

    public GameTick TransitionStartTick { get; private set; } = new();

    public Int32 TransitionDurationTicks { get; private set; }

    public float TransitionStartSpeed { get; private set; }

    public NetworkedVector<CHandle<CBaseEntity>> ConveyorModels { get; private set; } = new NetworkedVector<CHandle<CBaseEntity>>();

    internal new static SendNodeDecoder<CFuncConveyor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecMoveDirEntitySpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoveDirEntitySpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTargetSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTransitionStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TransitionStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTransitionDurationTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TransitionDurationTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTransitionStartSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TransitionStartSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hConveyorModels")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ConveyorModels.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ConveyorModels.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ConveyorModels[index] = element;
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncConveyor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncConveyor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncConveyor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncConveyor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncElectrifiedVolume : CFuncBrush
{
    internal CFuncElectrifiedVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString EffectName { get; private set; }

    internal new static SendNodeDecoder<CFuncElectrifiedVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_EffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncElectrifiedVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectName = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncElectrifiedVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncLadder : CBaseModelEntity
{
    internal CFuncLadder(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public Vector LadderDir { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionTop { get; private set; }

    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionBottom { get; private set; }

    public float AutoRideSpeed { get; private set; }

    public bool FakeLadder { get; private set; }

    internal new static SendNodeDecoder<CFuncLadder> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecLadderDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LadderDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionTop")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerMountPositionTop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionBottom")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerMountPositionBottom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoRideSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoRideSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFakeLadder")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FakeLadder = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncLadder.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncLadder.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncLadder.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncLadder.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncMonitor : CFuncBrush
{
    internal CFuncMonitor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString TargetCamera { get; private set; }

    public Int32 ResolutionEnum { get; private set; }

    public bool RenderShadows { get; private set; }

    public bool UseUniqueColorTarget { get; private set; }

    public NetworkedString BrushModelName { get; private set; }

    public CHandle<CBaseEntity> HTargetCameraHandle { get; private set; }
    public CBaseEntity? HTargetCamera => HTargetCameraHandle.Get(Demo);

    public bool Enabled { get; private set; }

    public bool Draw3DSkybox { get; private set; }

    internal new static SendNodeDecoder<CFuncMonitor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_targetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionEnum")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionEnum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseUniqueColorTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseUniqueColorTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_brushModelName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrushModelName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HTargetCameraHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDraw3DSkybox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Draw3DSkybox = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncMonitor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncMonitor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_fFlags"
// MNetworkIncludeByName "m_vecVelocity"
// MNetworkOverride "m_fFlags CBaseEntity"
public partial class CFuncMoveLinear : CBaseToggle
{
    internal CFuncMoveLinear(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncMoveLinear> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncMoveLinear.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkOverride "m_angRotation CGameSceneNode"
// MNetworkOverride "m_flSimulationTime CBaseEntity"
public partial class CFuncRotating : CBaseModelEntity
{
    internal CFuncRotating(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncRotating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncRotating.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncRotating.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncRotating.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncRotating.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncTrackTrain : CBaseModelEntity
{
    internal CFuncTrackTrain(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncTrackTrain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncTrackTrain.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CFuncWater : CBaseModelEntity
{
    internal CFuncWater(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncWater> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CFuncWater.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CFuncWater.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CFuncWater.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CFuncWater.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CGameRules
{
    internal static SendNodeDecoder<CGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGameRulesProxy : CBaseEntity
{
    internal CGameRulesProxy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CGameRulesProxy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CGameSceneNode
{
    // MNetworkSerializer "gameSceneNode"
    // MNetworkChangeCallback "gameSceneNodeHierarchyParentChanged"
    // MNetworkPriority 32
    // MNetworkVarEmbeddedFieldOffsetDelta 8
    public CGameSceneNodeHandle Parent { get; private set; } = new();

    // MNetworkPriority 32
    // MNetworkUserGroup "Origin"
    // MNetworkChangeCallback "gameSceneNodeLocalOriginChanged"
    public CNetworkOriginCellCoordQuantizedVector Origin { get; private set; } = new();

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority 32
    // MNetworkSerializer "gameSceneNodeStepSimulationAnglesSerializer"
    // MNetworkChangeCallback "gameSceneNodeLocalAnglesChanged"
    public QAngle Rotation { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeLocalScaleChanged"
    // MNetworkPriority 32
    public float Scale { get; private set; }

    public CUtlStringToken Name { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeHierarchyAttachmentChanged"
    public CUtlStringToken HierarchyAttachName { get; private set; }

    internal static SendNodeDecoder<CGameSceneNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hParent")
        {
            var decoder = CreateDecoder_gameSceneNode(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Parent = decoder(@this, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecOrigin")
        {
            var innerDecoder = CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Origin, path, ref buffer);
            };
        }
        if (field.VarName == "m_angRotation")
        {
            var decoder = CreateDecoder_gameSceneNodeStepSimulationAnglesSerializer(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Rotation = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_name")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Name = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hierarchyAttachName")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HierarchyAttachName = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGlowProperty
{
    // MNetworkChangeCallback "OnGlowTypeChanged"
    public Int32 GlowType { get; private set; }

    public Int32 GlowTeam { get; private set; }

    public Int32 GlowRange { get; private set; }

    public Int32 GlowRangeMin { get; private set; }

    // MNetworkChangeCallback "OnGlowColorChanged"
    public Color GlowColorOverride { get; private set; }

    public bool Flashing { get; private set; }

    public float GlowTime { get; private set; }

    public float GlowStartTime { get; private set; }

    public bool EligibleForScreenHighlight { get; private set; }

    internal static SendNodeDecoder<CGlowProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iGlowType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGlowTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRange")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRangeMin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowRangeMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_glowColorOverride")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowColorOverride = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlashing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flashing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEligibleForScreenHighlight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EligibleForScreenHighlight = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGradientFog : CBaseEntity
{
    internal CGradientFog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> GradientFogTexture { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStartDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogEndDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public bool HeightFogEnabled { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStartHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogEndHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FarZ { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogMaxOpacity { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogFalloffExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogVerticalExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public Color FogColor { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FogStrength { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float FadeTime { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool IsEnabled { get; private set; }

    internal new static SendNodeDecoder<CGradientFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hGradientFogTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GradientFogTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStartHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEndHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogVerticalExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogVerticalExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CGradientFog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CGradientFog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CGradientFog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CGradientFog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHandleTest : CBaseEntity
{
    internal CHandleTest(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> HandleHandle { get; private set; }
    public CBaseEntity? Handle => HandleHandle.Get(Demo);

    public bool SendHandle { get; private set; }

    internal new static SendNodeDecoder<CHandleTest> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Handle")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HandleHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSendHandle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SendHandle = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHandleTest.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHandleTest.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHandleTest.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHandleTest.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHEGrenade : CBaseCSGrenade
{
    internal CHEGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHEGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHEGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHEGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHEGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHEGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHEGrenadeProjectile : CBaseCSGrenadeProjectile
{
    internal CHEGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHEGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHEGrenadeProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHEGrenadeProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHEGrenadeProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHEGrenadeProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHitboxComponent : CEntityComponent
{
    public UInt32[] DisabledHitGroups { get; private set; } = Array.Empty<UInt32>();

    internal new static SendNodeDecoder<CHitboxComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bvDisabledHitGroups")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CHitboxComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.DisabledHitGroups.Length == 0) @this.DisabledHitGroups = new UInt32[fixedArraySize];
                @this.DisabledHitGroups[path[1]] = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkIncludeByName "m_iMaxHealth"
// MNetworkIncludeByName "m_iHealth"
// MNetworkIncludeByName "m_lifeState"
// MNetworkIncludeByName "m_fFlags"
// MNetworkIncludeByName "m_vecViewOffset"
public partial class CHostage : CHostageExpresserShim
{
    internal CHostage(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public EntitySpottedState EntitySpottedState { get; private set; } = new();

    public Vector Vel { get; private set; }

    public bool IsRescued { get; private set; }

    public bool JumpedThisFrame { get; private set; }

    public Int32 HostageState { get; private set; }

    public CHandle<CBaseEntity> LeaderHandle { get; private set; }
    public CBaseEntity? Leader => LeaderHandle.Get(Demo);

    public CountdownTimer ReuseTimer { get; private set; } = new();

    public bool HandsHaveBeenCut { get; private set; }

    public CHandle<CCSPlayerPawn> HostageGrabberHandle { get; private set; }
    public CCSPlayerPawn? HostageGrabber => HostageGrabberHandle.Get(Demo);

    public GameTime RescueStartTime { get; private set; } = new();

    public GameTime GrabSuccessTime { get; private set; } = new();

    public GameTime DropStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CHostage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EntitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_vel")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Vel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_isRescued")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsRescued = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_jumpedThisFrame")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JumpedThisFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHostageState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HostageState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_leader")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LeaderHandle = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_reuseTimer")
        {
            var innerDecoder = CountdownTimer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ReuseTimer, path, ref buffer);
            };
        }
        if (field.VarName == "m_bHandsHaveBeenCut")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HandsHaveBeenCut = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hHostageGrabber")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HostageGrabberHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRescueStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RescueStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrabSuccessTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GrabSuccessTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDropStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DropStartTime = decoder(ref buffer);
            };
        }
        return CHostageExpresserShim.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHostage.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHostage.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHostage.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHostage.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHostageCarriableProp : CBaseAnimGraph
{
    internal CHostageCarriableProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageCarriableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHostageCarriableProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHostageCarriableProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHostageCarriableProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHostageCarriableProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHostageExpresserShim : CBaseCombatCharacter
{
    internal CHostageExpresserShim(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageExpresserShim> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHostageExpresserShim.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHostageExpresserShim.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHostageExpresserShim.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHostageExpresserShim.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHostageRescueZone : CHostageRescueZoneShim
{
    internal CHostageRescueZone(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageRescueZone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CHostageRescueZoneShim.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHostageRescueZone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHostageRescueZone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHostageRescueZone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHostageRescueZone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CHostageRescueZoneShim : CBaseTrigger
{
    internal CHostageRescueZoneShim(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageRescueZoneShim> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CHostageRescueZoneShim.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CHostageRescueZoneShim.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CHostageRescueZoneShim.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CHostageRescueZoneShim.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CIncendiaryGrenade : CMolotovGrenade
{
    internal CIncendiaryGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CIncendiaryGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CMolotovGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CIncendiaryGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CIncendiaryGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CIncendiaryGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CIncendiaryGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInferno : CBaseModelEntity
{
    internal CInferno(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector[] FirePositions { get; private set; } = Array.Empty<Vector>();

    public Vector[] FireParentPositions { get; private set; } = Array.Empty<Vector>();

    public bool[] FireIsBurning { get; private set; } = Array.Empty<bool>();

    public Vector[] BurnNormal { get; private set; } = Array.Empty<Vector>();

    public Int32 FireCount { get; private set; }

    public Int32 InfernoType { get; private set; }

    public Int32 FireEffectTickBegin { get; private set; }

    public float FireLifetime { get; private set; }

    public bool InPostEffectTime { get; private set; }

    internal new static SendNodeDecoder<CInferno> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_firePositions")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.FirePositions.Length == 0) @this.FirePositions = new Vector[fixedArraySize];
                @this.FirePositions[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireParentPositions")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.FireParentPositions.Length == 0) @this.FireParentPositions = new Vector[fixedArraySize];
                @this.FireParentPositions[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFireIsBurning")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.FireIsBurning.Length == 0) @this.FireIsBurning = new bool[fixedArraySize];
                @this.FireIsBurning[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_BurnNormal")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.BurnNormal.Length == 0) @this.BurnNormal = new Vector[fixedArraySize];
                @this.BurnNormal[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInfernoType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InfernoType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireLifetime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireLifetime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInPostEffectTime")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InPostEffectTime = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInferno.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInferno.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInferno.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInferno.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoInstructorHintHostageRescueZone : CPointEntity
{
    internal CInfoInstructorHintHostageRescueZone(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInfoInstructorHintHostageRescueZone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoInstructorHintHostageRescueZone.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoInstructorHintHostageRescueZone.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoInstructorHintHostageRescueZone.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoInstructorHintHostageRescueZone.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoLadderDismount : CBaseEntity
{
    internal CInfoLadderDismount(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInfoLadderDismount> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoLadderDismount.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoOffscreenPanoramaTexture : CPointEntity
{
    internal CInfoOffscreenPanoramaTexture(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public Int32 ResolutionX { get; private set; }

    public Int32 ResolutionY { get; private set; }

    public NetworkedString LayoutFileName { get; private set; }

    public NetworkedString RenderAttrName { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity>> TargetEntities { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    public Int32 TargetChangeCount { get; private set; }

    public NetworkedVector<NetworkedString> CSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    internal new static SendNodeDecoder<CInfoOffscreenPanoramaTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ResolutionY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szLayoutFileName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LayoutFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RenderAttrName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderAttrName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TargetEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.TargetEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.TargetEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.TargetEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nTargetChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TargetChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.CSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.CSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.CSSClasses[index] = element;
                }
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoOffscreenPanoramaTexture.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoVisibilityBox : CBaseEntity
{
    internal CInfoVisibilityBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 Mode { get; private set; }

    public Vector BoxSize { get; private set; }

    public bool Enabled { get; private set; }

    internal new static SendNodeDecoder<CInfoVisibilityBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Mode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoxSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoVisibilityBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CInfoWorldLayer : CBaseEntity
{
    internal CInfoWorldLayer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString WorldName { get; private set; }

    public NetworkedString LayerName { get; private set; }

    public bool WorldLayerVisible { get; private set; }

    public bool EntitiesSpawned { get; private set; }

    internal new static SendNodeDecoder<CInfoWorldLayer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_worldName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_layerName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LayerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldLayerVisible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldLayerVisible = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEntitiesSpawned")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntitiesSpawned = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CInfoWorldLayer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItem : CBaseAnimGraph
{
    internal CItem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItem_Healthshot : CWeaponBaseItem
{
    internal CItem_Healthshot(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem_Healthshot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CWeaponBaseItem.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CItem_Healthshot.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItem_Healthshot.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItem_Healthshot.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItem_Healthshot.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CItemDogtags : CItem
{
    internal CItemDogtags(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCSPlayerPawn> OwningPlayerHandle { get; private set; }
    public CCSPlayerPawn? OwningPlayer => OwningPlayerHandle.Get(Demo);

    public CHandle<CCSPlayerPawn> KillingPlayerHandle { get; private set; }
    public CCSPlayerPawn? KillingPlayer => KillingPlayerHandle.Get(Demo);

    internal new static SendNodeDecoder<CItemDogtags> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_OwningPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CItemDogtags @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwningPlayerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_KillingPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CItemDogtags @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KillingPlayerHandle = decoder(ref buffer);
            };
        }
        return CItem.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CItemDogtags.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CItemDogtags.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CItemDogtags.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CItemDogtags.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CKnife : CCSWeaponBase
{
    internal CKnife(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CKnife> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CKnife.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CKnife.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CKnife.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CKnife.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightComponent : CEntityComponent
{
    internal static SendNodeDecoder<CLightComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CLightComponent> factory)
    {
        if (serializerKey.Name == "CLightComponent")
        {
            factory = () => new CLightComponent();
            return decoderSet.GetDecoder<CLightComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CLightComponent: {serializerKey}");
    }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color Color { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color SecondaryColor { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Brightness { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float BrightnessScale { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float BrightnessMult { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Range { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Falloff { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Attenuation2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Theta { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float Phi { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 Cascades { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 CastShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderDiffuse { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 RenderSpecular { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderTransmissive { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float OrthoLightWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float OrthoLightHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 Style { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public NetworkedString Pattern { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 CascadeRenderStaticObjects { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeCrossFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistanceFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowCascadeDistance3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowCascadeResolution3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    // MNetworkAlias "m_bUsesIndexedBakedLighting"
    public bool UsesBakedShadowing { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 ShadowPriority { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 BakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool RenderToCubemaps { get; private set; }

    public Int32 DirectLight { get; private set; }

    public Int32 IndirectLight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float FadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float FadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowFadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float ShadowFadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool Enabled { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool Flicker { get; private set; }

    public bool PrecomputedFieldsValid { get; private set; }

    public Vector PrecomputedBoundsMins { get; private set; }

    public Vector PrecomputedBoundsMaxs { get; private set; }

    public Vector PrecomputedOBBOrigin { get; private set; }

    public QAngle PrecomputedOBBAngles { get; private set; }

    public Vector PrecomputedOBBExtent { get; private set; }

    public float PrecomputedMaxRange { get; private set; }

    public Int32 FogLightingMode { get; private set; }

    public float FogContributionStength { get; private set; }

    public float NearClipPlane { get; private set; }

    public Color SkyColor { get; private set; }

    public float SkyIntensity { get; private set; }

    public Color SkyAmbientBounce { get; private set; }

    public bool UseSecondaryColor { get; private set; }

    // MNetworkChangeCallback "MixedShadowsChanged"
    public bool MixedShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public GameTime LightStyleStartTime { get; private set; } = new();

    public float CapsuleLength { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float MinRoughness { get; private set; }

    internal new static SendNodeDecoder<CLightComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Range = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Falloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attenuation2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTheta")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Theta = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPhi")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Phi = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascades")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Cascades = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowWidth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowHeight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderDiffuse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderDiffuse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderSpecular")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderSpecular = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderTransmissive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderTransmissive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OrthoLightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OrthoLightHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStyle")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Style = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Pattern")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Pattern = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascadeRenderStaticObjects")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CascadeRenderStaticObjects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeCrossFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeCrossFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistanceFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistanceFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance3")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeDistance3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution0")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution1")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution2")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution3")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowCascadeResolution3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUsesIndexedBakedLighting")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UsesBakedShadowing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IndirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShadowFadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlicker")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Flicker = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPrecomputedMaxRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrecomputedMaxRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogLightingMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogLightingMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogContributionStength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogContributionStength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearClipPlane")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NearClipPlane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkyIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyAmbientBounce")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyAmbientBounce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseSecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseSecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMixedShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MixedShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CapsuleLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinRoughness = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightDirectionalEntity : CLightEntity
{
    internal CLightDirectionalEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightDirectionalEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightDirectionalEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightEntity : CBaseModelEntity
{
    internal CLightEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CLightComponent"
    // MNetworkAlias "CLightComponent"
    // MNetworkTypeAlias "CLightComponent"
    public CLightComponent? CLightComponent { get; private set; }

    internal new static SendNodeDecoder<CLightEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CLightComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CLightComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CLightEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var isSet = buffer.ReadOneBit();
                    @this.CLightComponent = isSet ? factory() : null;
                }
                else
                {
                    var inner = @this.CLightComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightEnvironmentEntity : CLightDirectionalEntity
{
    internal CLightEnvironmentEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightEnvironmentEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightDirectionalEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightEnvironmentEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_clrRender"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "m_spawnflags"
public partial class CLightGlow : CBaseModelEntity
{
    internal CLightGlow(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 HorizontalSize { get; private set; }

    public UInt32 VerticalSize { get; private set; }

    public UInt32 MinDist { get; private set; }

    public UInt32 MaxDist { get; private set; }

    public UInt32 OuterMaxDist { get; private set; }

    // MNetworkBitCount 6
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 2
    public float GlowProxySize { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CLightGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nHorizontalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HorizontalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVerticalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VerticalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOuterMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightGlow.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightGlow.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightGlow.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightGlow.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightOrthoEntity : CLightEntity
{
    internal CLightOrthoEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightOrthoEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightOrthoEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CLightSpotEntity : CLightEntity
{
    internal CLightSpotEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightSpotEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CLightSpotEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CMapVetoPickController : CBaseEntity
{
    internal CMapVetoPickController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 DraftType { get; private set; }

    public Int32 TeamWinningCoinToss { get; private set; }

    public Int32[] TeamWithFirstChoice { get; private set; } = Array.Empty<Int32>();

    public Int32[] VoteMapIdsList { get; private set; } = Array.Empty<Int32>();

    public Int32[] AccountIDs { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId0 { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId1 { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId2 { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId3 { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId4 { get; private set; } = Array.Empty<Int32>();

    public Int32[] MapId5 { get; private set; } = Array.Empty<Int32>();

    public Int32[] StartingSide0 { get; private set; } = Array.Empty<Int32>();

    public Int32 CurrentPhase { get; private set; }

    public Int32 PhaseStartTick { get; private set; }

    public Int32 PhaseDurationTicks { get; private set; }

    internal new static SendNodeDecoder<CMapVetoPickController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nDraftType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DraftType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeamWinningCoinToss")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TeamWinningCoinToss = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeamWithFirstChoice")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.TeamWithFirstChoice.Length == 0) @this.TeamWithFirstChoice = new Int32[fixedArraySize];
                @this.TeamWithFirstChoice[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVoteMapIdsList")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.VoteMapIdsList.Length == 0) @this.VoteMapIdsList = new Int32[fixedArraySize];
                @this.VoteMapIdsList[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAccountIDs")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.AccountIDs.Length == 0) @this.AccountIDs = new Int32[fixedArraySize];
                @this.AccountIDs[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId0")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId0.Length == 0) @this.MapId0 = new Int32[fixedArraySize];
                @this.MapId0[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId1")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId1.Length == 0) @this.MapId1 = new Int32[fixedArraySize];
                @this.MapId1[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId2")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId2.Length == 0) @this.MapId2 = new Int32[fixedArraySize];
                @this.MapId2[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId3")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId3.Length == 0) @this.MapId3 = new Int32[fixedArraySize];
                @this.MapId3[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId4")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId4.Length == 0) @this.MapId4 = new Int32[fixedArraySize];
                @this.MapId4[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId5")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.MapId5.Length == 0) @this.MapId5 = new Int32[fixedArraySize];
                @this.MapId5[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStartingSide0")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.StartingSide0.Length == 0) @this.StartingSide0 = new Int32[fixedArraySize];
                @this.StartingSide0[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCurrentPhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentPhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPhaseStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PhaseStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPhaseDurationTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PhaseDurationTicks = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CMapVetoPickController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CMapVetoPickController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CMapVetoPickController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CMapVetoPickController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CMelee : CCSWeaponBase
{
    internal CMelee(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CMelee> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CMelee.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CMelee.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CMelee.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CMelee.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CModelPointEntity : CBaseModelEntity
{
    internal CModelPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CModelPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CModelPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CModelPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CModelState
{
    // MNetworkChangeCallback "skeletonModelChanged"
    public CStrongHandle<InfoForResourceTypeCModel> Model { get; private set; }

    public bool ClientClothCreationSuppressed { get; private set; }

    // MNetworkChangeCallback "skeletonMeshGroupMaskChanged"
    public UInt64 MeshGroupMask { get; private set; }

    // MNetworkChangeCallback "skeletonMotionTypeChanged"
    public sbyte IdealMotionType { get; private set; }

    internal static SendNodeDecoder<CModelState> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hModel")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCModel>(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Model = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientClothCreationSuppressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ClientClothCreationSuppressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MeshGroupMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MeshGroupMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIdealMotionType")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IdealMotionType = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CMolotovGrenade : CBaseCSGrenade
{
    internal CMolotovGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CMolotovGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CMolotovGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CMolotovGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CMolotovGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CMolotovGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CMolotovProjectile : CBaseCSGrenadeProjectile
{
    internal CMolotovProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsIncGrenade { get; private set; }

    internal new static SendNodeDecoder<CMolotovProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsIncGrenade")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CMolotovProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsIncGrenade = decoder(ref buffer);
            };
        }
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CMolotovProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CMolotovProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CMolotovProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CMolotovProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CMultiplayRules : CGameRules
{
    internal new static SendNodeDecoder<CMultiplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CGameRules.CreateFieldDecoder(field, decoderSet);
    }
}

// MNetworkVarsAtomic
public partial class CNetworkOriginCellCoordQuantizedVector
{
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "cellx"
    public UInt16 CellX { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "celly"
    public UInt16 CellY { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "cellz"
    public UInt16 CellZ { get; private set; }

    public UInt16 OutsideWorld { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posx"
    public float X { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posy"
    public float Y { get; private set; }

    // MNetworkBitCount 15
    // MNetworkMinValue 0
    // MNetworkMaxValue 1024
    // MNetworkEncodeFlags 1
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority 31
    // MNetworkSerializer "posz"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkOriginCellCoordQuantizedVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_cellX")
        {
            var decoder = CreateDecoder_cellx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellX = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_cellY")
        {
            var decoder = CreateDecoder_celly(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellY = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_cellZ")
        {
            var decoder = CreateDecoder_cellz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CellZ = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_nOutsideWorld")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OutsideWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecX")
        {
            var decoder = CreateDecoder_posx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = CreateDecoder_posy(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(@this, ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = CreateDecoder_posz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(@this, ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkVarsAtomic
public partial class CNetworkVelocityVector
{
    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float X { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Y { get; private set; }

    // MNetworkBitCount 18
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkVelocityVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkVarsAtomic
public partial class CNetworkViewOffsetVector
{
    // MNetworkBitCount 10
    // MNetworkMinValue -64
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float X { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue -64
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Y { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 128
    // MNetworkEncodeFlags 4
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Z { get; private set; }

    internal static SendNodeDecoder<CNetworkViewOffsetVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.X = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Z = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class COmniLight : CBarnLight
{
    internal COmniLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public float InnerAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float OuterAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool ShowLight { get; private set; }

    internal new static SendNodeDecoder<COmniLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flInnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.COmniLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.COmniLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.COmniLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.COmniLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CountdownTimer
{
    public float Duration { get; private set; }

    public GameTime Timestamp { get; private set; } = new();

    public float Timescale { get; private set; }

    public WorldGroupId WorldGroupId { get; private set; }

    internal static SendNodeDecoder<CountdownTimer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_duration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Duration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timestamp")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Timestamp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timescale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Timescale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWorldGroupId")
        {
            var decoder = FieldDecode.CreateDecoder_WorldGroupId(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldGroupId = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_angRotation"
// MNetworkIncludeByName "m_hOwnerEntity"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nameStringableIndex"
public partial class CParticleSystem : CBaseModelEntity
{
    internal CParticleSystem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string SnapshotFileName { get; private set; } = "";

    public bool Active { get; private set; }

    public bool Frozen { get; private set; }

    public float FreezeTransitionDuration { get; private set; }

    public Int32 StopType { get; private set; }

    public bool AnimateDuringGameplayPause { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public float PreSimTime { get; private set; }

    public Vector[] ServerControlPoints { get; private set; } = Array.Empty<Vector>();

    public byte[] ServerControlPointAssignments { get; private set; } = Array.Empty<byte>();

    public CHandle<CBaseEntity>[] ControlPointEnts { get; private set; } = Array.Empty<CHandle<CBaseEntity>>();

    public bool NoSave { get; private set; }

    public bool NoFreeze { get; private set; }

    public bool NoRamp { get; private set; }

    internal new static SendNodeDecoder<CParticleSystem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_szSnapshotFileName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapshotFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFreezeTransitionDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FreezeTransitionDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStopType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StopType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimateDuringGameplayPause")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimateDuringGameplayPause = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPreSimTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PreSimTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vServerControlPoints")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ServerControlPoints.Length == 0) @this.ServerControlPoints = new Vector[fixedArraySize];
                @this.ServerControlPoints[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iServerControlPointAssignments")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ServerControlPointAssignments.Length == 0) @this.ServerControlPointAssignments = new byte[fixedArraySize];
                @this.ServerControlPointAssignments[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPointEnts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ControlPointEnts.Length == 0) @this.ControlPointEnts = new CHandle<CBaseEntity>[fixedArraySize];
                @this.ControlPointEnts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSave")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoSave = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoFreeze")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoFreeze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoRamp")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoRamp = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CParticleSystem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CParticleSystem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CParticleSystem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CParticleSystem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPathParticleRope : CBaseEntity
{
    internal CPathParticleRope(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float ParticleSpacing { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float Slack { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float Radius { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public Color ColorTint { get; private set; }

    // MNetworkChangeCallback "effectStateChanged"
    public Int32 EffectState { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex { get; private set; }

    public NetworkedVector<Vector> PathNodes_Position { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_TangentIn { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_TangentOut { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> PathNodes_Color { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkChangeCallback "pinStateChanged"
    public NetworkedVector<bool> PathNodes_PinEnabled { get; private set; } = new NetworkedVector<bool>();

    public NetworkedVector<float> PathNodes_RadiusScale { get; private set; } = new NetworkedVector<float>();

    internal new static SendNodeDecoder<CPathParticleRope> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flParticleSpacing")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParticleSpacing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlack")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Slack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEffectState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PathNodes_Position")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_Position.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_Position.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_Position[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentIn")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_TangentIn.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_TangentIn.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_TangentIn[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentOut")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_TangentOut.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_TangentOut.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_TangentOut[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_Color.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_Color.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_Color[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_PinEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_PinEnabled.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_PinEnabled.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_PinEnabled[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_RadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PathNodes_RadiusScale.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PathNodes_RadiusScale.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PathNodes_RadiusScale[index] = element;
                }
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPathParticleRope.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPathParticleRope.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPhysBox : CBreakable
{
    internal CPhysBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBreakable.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_flAnimTime"
// MNetworkExcludeByName "m_flexWeight"
// MNetworkExcludeByName "m_blinktoggle"
// MNetworkExcludeByUserGroup "m_flPoseParameter"
// MNetworkExcludeByName "m_animationController.m_flPlaybackRate"
// MNetworkExcludeByUserGroup "overlay_vars"
// MNetworkIncludeByName "m_spawnflags"
public partial class CPhysicsProp : CBreakableProp
{
    internal CPhysicsProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Awake { get; private set; }

    internal new static SendNodeDecoder<CPhysicsProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAwake")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPhysicsProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Awake = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysicsProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPhysicsPropMultiplayer : CPhysicsProp
{
    internal CPhysicsPropMultiplayer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysicsPropMultiplayer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysicsPropMultiplayer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysicsPropMultiplayer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsPropMultiplayer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysicsPropMultiplayer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPhysMagnet : CBaseAnimGraph
{
    internal CPhysMagnet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysMagnet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPhysMagnet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPhysMagnet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPlantedC4 : CBaseAnimGraph
{
    internal CPlantedC4(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool BombTicking { get; private set; }

    public GameTime C4Blow { get; private set; } = new();

    public Int32 BombSite { get; private set; }

    public Int32 SourceSoundscapeHash { get; private set; }

    public bool CannotBeDefused { get; private set; }

    public EntitySpottedState EntitySpottedState { get; private set; } = new();

    public bool HasExploded { get; private set; }

    public float TimerLength { get; private set; }

    public bool BeingDefused { get; private set; }

    public float DefuseLength { get; private set; }

    public GameTime DefuseCountDown { get; private set; } = new();

    public bool BombDefused { get; private set; }

    public CHandle<CCSPlayerPawn> BombDefuserHandle { get; private set; }
    public CCSPlayerPawn? BombDefuser => BombDefuserHandle.Get(Demo);

    public CHandle<CBaseEntity> ControlPanelHandle { get; private set; }
    public CBaseEntity? ControlPanel => ControlPanelHandle.Get(Demo);

    internal new static SendNodeDecoder<CPlantedC4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bBombTicking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombTicking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flC4Blow")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.C4Blow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBombSite")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombSite = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSourceSoundscapeHash")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SourceSoundscapeHash = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCannotBeDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CannotBeDefused = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.EntitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bHasExploded")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasExploded = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimerLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TimerLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBeingDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BeingDefused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefuseLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefuseLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefuseCountDown")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefuseCountDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombDefused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBombDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombDefuserHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPanel")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ControlPanelHandle = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPlantedC4.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPlantedC4.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPlantedC4.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPlantedC4.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPlayer_AutoaimServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_AutoaimServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_AutoaimServices> factory)
    {
        if (serializerKey.Name == "CPlayer_AutoaimServices")
        {
            factory = () => new CPlayer_AutoaimServices();
            return decoderSet.GetDecoder<CPlayer_AutoaimServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_AutoaimServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_AutoaimServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_CameraServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_CameraServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_CameraServices> factory)
    {
        if (serializerKey.Name == "CPlayer_CameraServices")
        {
            factory = () => new CPlayer_CameraServices();
            return decoderSet.GetDecoder<CPlayer_CameraServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayerBase_CameraServices")
        {
            factory = () => new CCSPlayerBase_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayerBase_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerBase_CameraServices);
                var downcastInstance = Unsafe.As<CCSPlayerBase_CameraServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSObserver_CameraServices")
        {
            factory = () => new CCSObserver_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_CameraServices);
                var downcastInstance = Unsafe.As<CCSObserver_CameraServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_CameraServices")
        {
            factory = () => new CCSPlayer_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_CameraServices);
                var downcastInstance = Unsafe.As<CCSPlayer_CameraServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_CameraServices: {serializerKey}");
    }

    // MNetworkEncoder "qangle_precise"
    public QAngle CsViewPunchAngle { get; private set; }

    public GameTick CsViewPunchAngleTick { get; private set; } = new();

    public float CsViewPunchAngleTickRatio { get; private set; }

    public FogPlayerParams PlayerFog { get; private set; } = new();

    public CHandle<CColorCorrection> ColorCorrectionCtrlHandle { get; private set; }

    public CHandle<CBaseEntity> ViewEntityHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public CHandle<CTonemapController2> TonemapControllerHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public AudioParams Audio { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public NetworkedVector<CHandle<CPostProcessingVolume>> PostProcessingVolumes { get; private set; } = new NetworkedVector<CHandle<CPostProcessingVolume>>();

    internal new static SendNodeDecoder<CPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecCsViewPunchAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CsViewPunchAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCsViewPunchAngleTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CsViewPunchAngleTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCsViewPunchAngleTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CsViewPunchAngleTickRatio = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_PlayerFog")
        {
            var innerDecoder = FogPlayerParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.PlayerFog, path, ref buffer);
            };
        }
        if (field.VarName == "m_hColorCorrectionCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CColorCorrection>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorCorrectionCtrlHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTonemapController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CTonemapController2>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapControllerHandle = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_audio")
        {
            var innerDecoder = AudioParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Audio, path, ref buffer);
            };
        }
        if (field.VarName == "m_PostProcessingVolumes")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CPostProcessingVolume>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PostProcessingVolumes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PostProcessingVolumes.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PostProcessingVolumes[index] = element;
                }
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_FlashlightServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_FlashlightServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_FlashlightServices> factory)
    {
        if (serializerKey.Name == "CPlayer_FlashlightServices")
        {
            factory = () => new CPlayer_FlashlightServices();
            return decoderSet.GetDecoder<CPlayer_FlashlightServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_FlashlightServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_FlashlightServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ItemServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ItemServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ItemServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ItemServices")
        {
            factory = () => new CPlayer_ItemServices();
            return decoderSet.GetDecoder<CPlayer_ItemServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_ItemServices")
        {
            factory = () => new CCSPlayer_ItemServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_ItemServices>(serializerKey);
            return (CPlayer_ItemServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_ItemServices);
                var downcastInstance = Unsafe.As<CCSPlayer_ItemServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ItemServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_ItemServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_MovementServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_MovementServices> factory)
    {
        if (serializerKey.Name == "CPlayer_MovementServices")
        {
            factory = () => new CPlayer_MovementServices();
            return decoderSet.GetDecoder<CPlayer_MovementServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_MovementServices")
        {
            factory = () => new CCSObserver_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_MovementServices);
                var downcastInstance = Unsafe.As<CCSObserver_MovementServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CPlayer_MovementServices_Humanoid")
        {
            factory = () => new CPlayer_MovementServices_Humanoid();
            var childClassDecoder = decoderSet.GetDecoder<CPlayer_MovementServices_Humanoid>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices_Humanoid);
                var downcastInstance = Unsafe.As<CPlayer_MovementServices_Humanoid>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_MovementServices")
        {
            factory = () => new CCSPlayer_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_MovementServices);
                var downcastInstance = Unsafe.As<CCSPlayer_MovementServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_MovementServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt64 ToggleButtonDownMask { get; private set; }

    // MNetworkBitCount 12
    // MNetworkMinValue 0
    // MNetworkMaxValue 2048
    // MNetworkEncodeFlags 1
    public float Maxspeed { get; private set; }

    public float[] ForceSubtickMoveWhen { get; private set; } = Array.Empty<float>();

    internal new static SendNodeDecoder<CPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nToggleButtonDownMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ToggleButtonDownMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxspeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxspeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrForceSubtickMoveWhen")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.ForceSubtickMoveWhen.Length == 0) @this.ForceSubtickMoveWhen = new float[fixedArraySize];
                @this.ForceSubtickMoveWhen[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices_Humanoid : CPlayer_MovementServices
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkBitCount 17
    // MNetworkMinValue -4096
    // MNetworkMaxValue 4096
    // MNetworkEncodeFlags 4
    public float FallVelocity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InCrouch { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 CrouchState { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime CrouchTransitionStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool Ducked { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool Ducking { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool InDuckJump { get; private set; }

    internal new static SendNodeDecoder<CPlayer_MovementServices_Humanoid> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFallVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FallVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInCrouch")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InCrouch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCrouchState")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrouchState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCrouchTransitionStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CrouchTransitionStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ducked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Ducking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInDuckJump")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InDuckJump = decoder(ref buffer);
            };
        }
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ObserverServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ObserverServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ObserverServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ObserverServices")
        {
            factory = () => new CPlayer_ObserverServices();
            return decoderSet.GetDecoder<CPlayer_ObserverServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_ObserverServices")
        {
            factory = () => new CCSObserver_ObserverServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_ObserverServices>(serializerKey);
            return (CPlayer_ObserverServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_ObserverServices);
                var downcastInstance = Unsafe.As<CCSObserver_ObserverServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ObserverServices: {serializerKey}");
    }

    // MNetworkChangeCallback "OnObserverModeChanged"
    public byte ObserverMode { get; private set; }

    // MNetworkChangeCallback "OnObserverTargetChanged"
    public CHandle<CBaseEntity> ObserverTargetHandle { get; private set; }

    internal new static SendNodeDecoder<CPlayer_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iObserverMode")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObserverMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hObserverTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ObserverTargetHandle = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_UseServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_UseServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_UseServices> factory)
    {
        if (serializerKey.Name == "CPlayer_UseServices")
        {
            factory = () => new CPlayer_UseServices();
            return decoderSet.GetDecoder<CPlayer_UseServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_UseServices")
        {
            factory = () => new CCSObserver_UseServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_UseServices>(serializerKey);
            return (CPlayer_UseServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_UseServices);
                var downcastInstance = Unsafe.As<CCSObserver_UseServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_UseServices")
        {
            factory = () => new CCSPlayer_UseServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_UseServices>(serializerKey);
            return (CPlayer_UseServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_UseServices);
                var downcastInstance = Unsafe.As<CCSPlayer_UseServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_UseServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ViewModelServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ViewModelServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ViewModelServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ViewModelServices")
        {
            factory = () => new CPlayer_ViewModelServices();
            return decoderSet.GetDecoder<CPlayer_ViewModelServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_ViewModelServices")
        {
            factory = () => new CCSObserver_ViewModelServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_ViewModelServices>(serializerKey);
            return (CPlayer_ViewModelServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_ViewModelServices);
                var downcastInstance = Unsafe.As<CCSObserver_ViewModelServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_ViewModelServices")
        {
            factory = () => new CCSPlayer_ViewModelServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_ViewModelServices>(serializerKey);
            return (CPlayer_ViewModelServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_ViewModelServices);
                var downcastInstance = Unsafe.As<CCSPlayer_ViewModelServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ViewModelServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WaterServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WaterServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WaterServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WaterServices")
        {
            factory = () => new CPlayer_WaterServices();
            return decoderSet.GetDecoder<CPlayer_WaterServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_WaterServices")
        {
            factory = () => new CCSPlayer_WaterServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_WaterServices>(serializerKey);
            return (CPlayer_WaterServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_WaterServices);
                var downcastInstance = Unsafe.As<CCSPlayer_WaterServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WaterServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_WaterServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WeaponServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WeaponServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WeaponServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WeaponServices")
        {
            factory = () => new CPlayer_WeaponServices();
            return decoderSet.GetDecoder<CPlayer_WeaponServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_WeaponServices")
        {
            factory = () => new CCSPlayer_WeaponServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_WeaponServices>(serializerKey);
            return (CPlayer_WeaponServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_WeaponServices);
                var downcastInstance = Unsafe.As<CCSPlayer_WeaponServices>(instance);
                childClassDecoder(downcastInstance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WeaponServices: {serializerKey}");
    }

    public NetworkedVector<CHandle<CBasePlayerWeapon>> MyWeapons { get; private set; } = new NetworkedVector<CHandle<CBasePlayerWeapon>>();

    public CHandle<CBasePlayerWeapon> ActiveWeaponHandle { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CHandle<CBasePlayerWeapon> LastWeaponHandle { get; private set; }

    public UInt16[] Ammo { get; private set; } = Array.Empty<UInt16>();

    internal new static SendNodeDecoder<CPlayer_WeaponServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWeapons")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.MyWeapons.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.MyWeapons.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.MyWeapons[index] = element;
                }
            };
        }
        if (field.VarName == "m_hActiveWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveWeaponHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLastWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LastWeaponHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Ammo.Length == 0) @this.Ammo = new UInt16[fixedArraySize];
                @this.Ammo[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayerControllerComponent
{
    internal static SendNodeDecoder<CPlayerControllerComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CPlayerControllerComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayerPawnComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CPlayerPawnComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CPlayerPing : CBaseEntity
{
    internal CPlayerPing(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCSPlayerPawn> PlayerHandle { get; private set; }
    public CCSPlayerPawn? Player => PlayerHandle.Get(Demo);

    public CHandle<CBaseEntity> PingedEntityHandle { get; private set; }
    public CBaseEntity? PingedEntity => PingedEntityHandle.Get(Demo);

    public Int32 Type { get; private set; }

    public bool Urgent { get; private set; }

    public string PlaceName { get; private set; } = "";

    internal new static SendNodeDecoder<CPlayerPing> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlayerHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPingedEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PingedEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Type = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUrgent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Urgent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlaceName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PlaceName = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPlayerPing.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPlayerPing.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPlayerPing.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPlayerPing.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPlayerSprayDecal : CModelPointEntity
{
    internal CPlayerSprayDecal(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 UniqueID { get; private set; }

    public UInt32 AccountID { get; private set; }

    public UInt32 TraceID { get; private set; }

    public UInt32 RtGcTime { get; private set; }

    public Vector EndPos { get; private set; }

    public Vector Start { get; private set; }

    public Vector Left { get; private set; }

    public Vector Normal { get; private set; }

    public Int32 Player { get; private set; }

    public Int32 DecalEntity { get; private set; }

    public Int32 Hitbox { get; private set; }

    public float CreationTime { get; private set; }

    public Int32 TintID { get; private set; }

    public byte Version { get; private set; }

    public byte[] Signature { get; private set; } = Array.Empty<byte>();

    internal new static SendNodeDecoder<CPlayerSprayDecal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nUniqueID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UniqueID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unAccountID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AccountID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unTraceID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TraceID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rtGcTime")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RtGcTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStart")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Start = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLeft")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Left = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecNormal")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Normal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Player = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEntity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DecalEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitbox")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Hitbox = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCreationTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CreationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTintID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TintID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVersion")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Version = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ubSignature")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.Signature.Length == 0) @this.Signature = new byte[fixedArraySize];
                @this.Signature[path[1]] = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPlayerSprayDecal.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPlayerSprayDecal.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPlayerSprayDecal.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPlayerSprayDecal.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPlayerVisibility : CBaseEntity
{
    internal CPlayerVisibility(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float VisibilityStrength { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FogDistanceMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FogMaxDensityMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float FadeTime { get; private set; }

    public bool StartDisabled { get; private set; }

    public bool IsEnabled { get; private set; }

    internal new static SendNodeDecoder<CPlayerVisibility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flVisibilityStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VisibilityStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogDistanceMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogDistanceMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensityMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxDensityMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPlayerVisibility.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointCamera : CBaseEntity
{
    internal CPointCamera(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FOV { get; private set; }

    public float Resolution { get; private set; }

    public bool FogEnable { get; private set; }

    public Color FogColor { get; private set; }

    public float FogStart { get; private set; }

    public float FogEnd { get; private set; }

    public float FogMaxDensity { get; private set; }

    public bool Active { get; private set; }

    public bool UseScreenAspectRatio { get; private set; }

    public float AspectRatio { get; private set; }

    public bool NoSky { get; private set; }

    public float Brightness { get; private set; }

    public float ZFar { get; private set; }

    public float ZNear { get; private set; }

    public bool CanHLTVUse { get; private set; }

    public bool DofEnabled { get; private set; }

    public float DofNearBlurry { get; private set; }

    public float DofNearCrisp { get; private set; }

    public float DofFarCrisp { get; private set; }

    public float DofFarBlurry { get; private set; }

    public float DofTiltToGround { get; private set; }

    internal new static SendNodeDecoder<CPointCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_FOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Resolution")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Resolution = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFogEnable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEnable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FogMaxDensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseScreenAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseScreenAspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSky")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoSky = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZFar")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ZNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanHLTVUse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CanHLTVUse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDofEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofNearBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofNearCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofFarCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofFarBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofTiltToGround")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DofTiltToGround = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointCamera.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointCamera.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointCamera.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointCamera.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointClientUIDialog : CBaseClientUIEntity
{
    internal CPointClientUIDialog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnDialogActivatorChanged"
    public CHandle<CBaseEntity> ActivatorHandle { get; private set; }
    public CBaseEntity? Activator => ActivatorHandle.Get(Demo);

    internal new static SendNodeDecoder<CPointClientUIDialog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActivator")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointClientUIDialog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActivatorHandle = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIDialog.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointClientUIWorldPanel : CBaseClientUIEntity
{
    internal CPointClientUIWorldPanel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IgnoreInput { get; private set; }

    public bool Lit { get; private set; }

    public bool FollowPlayerAcrossTeleport { get; private set; }

    public float Width { get; private set; }

    public float Height { get; private set; }

    public float DPI { get; private set; }

    public float InteractDistance { get; private set; }

    public float DepthOffset { get; private set; }

    public UInt32 OwnerContext { get; private set; }

    public UInt32 HorizontalAlign { get; private set; }

    public UInt32 VerticalAlign { get; private set; }

    public UInt32 Orientation { get; private set; }

    public bool AllowInteractionFromAllSceneWorlds { get; private set; }

    public NetworkedVector<NetworkedString> CSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    public bool Opaque { get; private set; }

    public bool NoDepth { get; private set; }

    public bool RenderBackface { get; private set; }

    public bool UseOffScreenIndicator { get; private set; }

    public bool ExcludeFromSaveGames { get; private set; }

    public bool Grabbable { get; private set; }

    public bool OnlyRenderToTexture { get; private set; }

    public bool DisableMipGen { get; private set; }

    public Int32 ExplicitImageLayout { get; private set; }

    internal new static SendNodeDecoder<CPointClientUIWorldPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIgnoreInput")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IgnoreInput = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLit")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFollowPlayerAcrossTeleport")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FollowPlayerAcrossTeleport = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Height = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDPI")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DPI = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInteractDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOwnerContext")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerContext = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unHorizontalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HorizontalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unVerticalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.VerticalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOrientation")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Orientation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAllowInteractionFromAllSceneWorlds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AllowInteractionFromAllSceneWorlds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.CSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.CSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.CSSClasses[index] = element;
                }
            };
        }
        if (field.VarName == "m_bOpaque")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Opaque = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoDepth")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderBackface")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RenderBackface = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseOffScreenIndicator")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseOffScreenIndicator = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExcludeFromSaveGames")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExcludeFromSaveGames = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGrabbable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Grabbable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOnlyRenderToTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OnlyRenderToTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDisableMipGen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisableMipGen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplicitImageLayout")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExplicitImageLayout = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldPanel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointClientUIWorldTextPanel : CPointClientUIWorldPanel
{
    internal CPointClientUIWorldTextPanel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string MessageText { get; private set; } = "";

    internal new static SendNodeDecoder<CPointClientUIWorldTextPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointClientUIWorldTextPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MessageText = decoder(ref buffer);
            };
        }
        return CPointClientUIWorldPanel.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointClientUIWorldTextPanel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointCommentaryNode : CBaseAnimGraph
{
    internal CPointCommentaryNode(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString CommentaryFile { get; private set; }

    public CHandle<CBaseEntity> ViewPositionHandle { get; private set; }
    public CBaseEntity? ViewPosition => ViewPositionHandle.Get(Demo);

    public bool Active { get; private set; }

    public GameTime StartTime { get; private set; } = new();

    public float StartTimeInCommentary { get; private set; }

    public NetworkedString Title { get; private set; }

    public NetworkedString Speakers { get; private set; }

    public Int32 NodeNumber { get; private set; }

    public Int32 NodeNumberMax { get; private set; }

    public bool ListenedTo { get; private set; }

    internal new static SendNodeDecoder<CPointCommentaryNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszCommentaryFile")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CommentaryFile = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewPosition")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ViewPositionHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Active = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTimeInCommentary")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTimeInCommentary = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszTitle")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Title = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSpeakers")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Speakers = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NodeNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumberMax")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NodeNumberMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bListenedTo")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ListenedTo = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointCommentaryNode.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointEntity : CBaseEntity
{
    internal CPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointValueRemapper : CBaseEntity
{
    internal CPointValueRemapper(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public bool UpdateOnClient { get; private set; }

    public ValueRemapperInputType InputType { get; private set; }

    public CHandle<CBaseEntity> RemapLineStartHandle { get; private set; }
    public CBaseEntity? RemapLineStart => RemapLineStartHandle.Get(Demo);

    public CHandle<CBaseEntity> RemapLineEndHandle { get; private set; }
    public CBaseEntity? RemapLineEnd => RemapLineEndHandle.Get(Demo);

    public float MaximumChangePerSecond { get; private set; }

    public float DisengageDistance { get; private set; }

    public float EngageDistance { get; private set; }

    public bool RequiresUseKey { get; private set; }

    public ValueRemapperOutputType OutputType { get; private set; }

    public NetworkedVector<CHandle<CBaseEntity>> OutputEntities { get; private set; } = new NetworkedVector<CHandle<CBaseEntity>>();

    public ValueRemapperHapticsType HapticsType { get; private set; }

    public ValueRemapperMomentumType MomentumType { get; private set; }

    public float MomentumModifier { get; private set; }

    public float SnapValue { get; private set; }

    public ValueRemapperRatchetType RatchetType { get; private set; }

    public float InputOffset { get; private set; }

    internal new static SendNodeDecoder<CPointValueRemapper> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUpdateOnClient")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UpdateOnClient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperInputType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineStart")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RemapLineStartHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineEnd")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RemapLineEndHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaximumChangePerSecond")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaximumChangePerSecond = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDisengageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisengageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEngageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EngageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRequiresUseKey")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RequiresUseKey = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOutputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperOutputType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OutputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOutputEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.OutputEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.OutputEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.OutputEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nHapticsType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperHapticsType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HapticsType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMomentumType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperMomentumType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MomentumType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMomentumModifier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MomentumModifier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSnapValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SnapValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRatchetType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperRatchetType>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RatchetType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInputOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InputOffset = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointValueRemapper.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPointWorldText : CModelPointEntity
{
    internal CPointWorldText(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string MessageText { get; private set; } = "";

    public string FontName { get; private set; } = "";

    public bool Enabled { get; private set; }

    public bool Fullbright { get; private set; }

    public float WorldUnitsPerPx { get; private set; }

    public float FontSize { get; private set; }

    public float DepthOffset { get; private set; }

    public Color Color { get; private set; }

    public PointWorldTextJustifyHorizontal JustifyHorizontal { get; private set; }

    public PointWorldTextJustifyVertical JustifyVertical { get; private set; }

    public PointWorldTextReorientMode ReorientMode { get; private set; }

    internal new static SendNodeDecoder<CPointWorldText> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MessageText = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FontName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FontName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFullbright")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Fullbright = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWorldUnitsPerPx")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldUnitsPerPx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFontSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FontSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyHorizontal>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JustifyHorizontal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyVertical")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyVertical>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.JustifyVertical = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nReorientMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextReorientMode>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ReorientMode = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPointWorldText.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPointWorldText.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPointWorldText.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPointWorldText.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPostProcessingVolume : CBaseTrigger
{
    internal CPostProcessingVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCPostProcessingResource> PostSettings { get; private set; }

    public float FadeDuration { get; private set; }

    public float MinLogExposure { get; private set; }

    public float MaxLogExposure { get; private set; }

    public float MinExposure { get; private set; }

    public float MaxExposure { get; private set; }

    public float ExposureCompensation { get; private set; }

    public float ExposureFadeSpeedUp { get; private set; }

    public float ExposureFadeSpeedDown { get; private set; }

    public float TonemapEVSmoothingRange { get; private set; }

    public bool Master { get; private set; }

    public bool ExposureControl { get; private set; }

    public float Rate { get; private set; }

    public float TonemapPercentTarget { get; private set; }

    public float TonemapPercentBrightPixels { get; private set; }

    public float TonemapMinAvgLum { get; private set; }

    internal new static SendNodeDecoder<CPostProcessingVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPostSettings")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCPostProcessingResource>(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PostSettings = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MinExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureCompensation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureCompensation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureFadeSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureFadeSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Master = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExposureControl")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureControl = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Rate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentBrightPixels")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentBrightPixels = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapMinAvgLum")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapMinAvgLum = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPostProcessingVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPrecipitation : CBaseTrigger
{
    internal CPrecipitation(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitation> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPrecipitation.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPrecipitation.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitation.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitation.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPrecipitationBlocker : CBaseModelEntity
{
    internal CPrecipitationBlocker(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitationBlocker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPrecipitationBlocker.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPredictedViewModel : CBaseViewModel
{
    internal CPredictedViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPredictedViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseViewModel.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPredictedViewModel.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPredictedViewModel.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPredictedViewModel.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPredictedViewModel.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CPropDoorRotating : CBasePropDoor
{
    internal CPropDoorRotating(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPropDoorRotating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBasePropDoor.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CPropDoorRotating.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollManager : CBaseEntity
{
    internal CRagdollManager(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public sbyte CurrentMaxRagdollCount { get; private set; }

    internal new static SendNodeDecoder<CRagdollManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iCurrentMaxRagdollCount")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CRagdollManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CurrentMaxRagdollCount = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollManager.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollManager.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollManager.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollManager.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollProp : CBaseAnimGraph
{
    internal CRagdollProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public NetworkedVector<Vector> RagPos { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkEncoder "qangle"
    // MNetworkBitCount 13
    public NetworkedVector<QAngle> RagAngles { get; private set; } = new NetworkedVector<QAngle>();

    public CHandle<CBaseEntity> RagdollSourceHandle { get; private set; }
    public CBaseEntity? RagdollSource => RagdollSourceHandle.Get(Demo);

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    // MNetworkEncodeFlags 1
    public float BlendWeight { get; private set; }

    internal new static SendNodeDecoder<CRagdollProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ragPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RagPos.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.RagPos.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.RagPos[index] = element;
                }
            };
        }
        if (field.VarName == "m_ragAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.RagAngles.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.RagAngles.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.RagAngles[index] = element;
                }
            };
        }
        if (field.VarName == "m_hRagdollSource")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollSourceHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBlendWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BlendWeight = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollProp.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollProp.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollProp.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollProp.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRagdollPropAttached : CRagdollProp
{
    internal CRagdollPropAttached(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 BoneIndexAttached { get; private set; }

    public UInt32 RagdollAttachedObjectIndex { get; private set; }

    // MNetworkEncoder "coord"
    public Vector AttachmentPointBoneSpace { get; private set; }

    // MNetworkEncoder "coord"
    public Vector AttachmentPointRagdollSpace { get; private set; }

    internal new static SendNodeDecoder<CRagdollPropAttached> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_boneIndexAttached")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BoneIndexAttached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ragdollAttachedObjectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RagdollAttachedObjectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointBoneSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachmentPointBoneSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointRagdollSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachmentPointRagdollSpace = decoder(ref buffer);
            };
        }
        return CRagdollProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRagdollPropAttached.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRectLight : CBarnLight
{
    internal CRectLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool ShowLight { get; private set; }

    internal new static SendNodeDecoder<CRectLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRectLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CRectLight.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRectLight.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRectLight.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRectLight.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CRenderComponent : CEntityComponent
{
    internal static SendNodeDecoder<CRenderComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CRenderComponent> factory)
    {
        if (serializerKey.Name == "CRenderComponent")
        {
            factory = () => new CRenderComponent();
            return decoderSet.GetDecoder<CRenderComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CRenderComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CRenderComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRetakeGameRules
{
    public Int32 MatchSeed { get; private set; }

    public bool BlockersPresent { get; private set; }

    public bool RoundInProgress { get; private set; }

    public Int32 FirstSecondHalfRound { get; private set; }

    public Int32 BombSite { get; private set; }

    internal static SendNodeDecoder<CRetakeGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nMatchSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MatchSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBlockersPresent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BlockersPresent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRoundInProgress")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RoundInProgress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iFirstSecondHalfRound")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FirstSecondHalfRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBombSite")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BombSite = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MNetworkIncludeByUserGroup "Origin"
// MNetworkIncludeByName "CGameSceneNode::m_hParent"
// MNetworkIncludeByName "CGameSceneNode::m_hierarchyAttachName"
// MNetworkIncludeByName "m_nMinCPULevel"
// MNetworkIncludeByName "m_nMaxCPULevel"
// MNetworkIncludeByName "m_nMinGPULevel"
// MNetworkIncludeByName "m_nMaxGPULevel"
public partial class CRopeKeyframe : CBaseModelEntity
{
    internal CRopeKeyframe(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt16 RopeFlags { get; private set; }

    public Int16 Slack { get; private set; }

    public float Width { get; private set; }

    // MNetworkBitCount 10
    // MNetworkMinValue 0.1
    // MNetworkMaxValue 10
    public float TextureScale { get; private set; }

    public byte Segments { get; private set; }

    public bool ConstrainBetweenEndpoints { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> RopeMaterialModelIndex { get; private set; }

    public byte Subdiv { get; private set; }

    public byte ChangeCount { get; private set; }

    public Int16 RopeLength { get; private set; }

    public byte LockedPoints { get; private set; }

    public float ScrollSpeed { get; private set; }

    public CHandle<CBaseEntity> StartPointHandle { get; private set; }
    public CBaseEntity? StartPoint => StartPointHandle.Get(Demo);

    public CHandle<CBaseEntity> EndPointHandle { get; private set; }
    public CBaseEntity? EndPoint => EndPointHandle.Get(Demo);

    public AttachmentHandle StartAttachment { get; private set; } = new();

    public AttachmentHandle EndAttachment { get; private set; } = new();

    internal new static SendNodeDecoder<CRopeKeyframe> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_RopeFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Slack")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Slack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Width")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TextureScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TextureScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSegments")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Segments = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bConstrainBetweenEndpoints")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConstrainBetweenEndpoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRopeMaterialModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeMaterialModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Subdiv")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Subdiv = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RopeLength")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RopeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLockedPoints")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LockedPoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScrollSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScrollSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hStartPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartPointHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hEndPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndPointHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iStartAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartAttachment = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEndAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndAttachment = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CRopeKeyframe.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSceneEntity : CPointEntity
{
    internal CSceneEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool IsPlayingBack { get; private set; }

    public bool Paused { get; private set; }

    public bool Multiplayer { get; private set; }

    public bool Autogenerated { get; private set; }

    public float ForceClientTime { get; private set; }

    public NetworkedVector<CHandle<CBaseFlex>> ActorList { get; private set; } = new NetworkedVector<CHandle<CBaseFlex>>();

    public UInt16 SceneStringIndex { get; private set; }

    internal new static SendNodeDecoder<CSceneEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsPlayingBack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsPlayingBack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Paused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMultiplayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Multiplayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAutogenerated")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Autogenerated = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flForceClientTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ForceClientTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hActorList")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseFlex>(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.ActorList.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.ActorList.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.ActorList[index] = element;
                }
            };
        }
        if (field.VarName == "m_nSceneStringIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SceneStringIndex = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSceneEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSceneEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSceneEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSceneEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CScriptComponent : CEntityComponent
{
    internal static SendNodeDecoder<CScriptComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CScriptComponent> factory)
    {
        if (serializerKey.Name == "CScriptComponent")
        {
            factory = () => new CScriptComponent();
            return decoderSet.GetDecoder<CScriptComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CScriptComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CScriptComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSensorGrenade : CBaseCSGrenade
{
    internal CSensorGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSensorGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSensorGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSensorGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSensorGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSensorGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSensorGrenadeProjectile : CBaseCSGrenadeProjectile
{
    internal CSensorGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSensorGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSensorGrenadeProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSensorGrenadeProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSensorGrenadeProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSensorGrenadeProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkExcludeByName "m_hModel"
public partial class CShatterGlassShardPhysics : CPhysicsProp
{
    internal CShatterGlassShardPhysics(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public SharedModelDesc ShardDesc { get; private set; } = new();

    internal new static SendNodeDecoder<CShatterGlassShardPhysics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ShardDesc")
        {
            var innerDecoder = SharedModelDesc.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CShatterGlassShardPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ShardDesc, path, ref buffer);
            };
        }
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CShatterGlassShardPhysics.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSkeletonAnimationController : ISkeletonAnimationController
{
    internal new static SendNodeDecoder<CSkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return ISkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkeletonInstance : CGameSceneNode
{
    public CModelState ModelState { get; private set; } = new();

    public bool IsAnimationEnabled { get; private set; }

    public bool UseParentRenderBounds { get; private set; }

    // MNetworkChangeCallback "skeletonMaterialGroupChanged"
    public CUtlStringToken MaterialGroup { get; private set; }

    public byte HitboxSet { get; private set; }

    internal new static SendNodeDecoder<CSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_modelState")
        {
            var innerDecoder = CModelState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.ModelState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsAnimationEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsAnimationEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseParentRenderBounds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseParentRenderBounds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_materialGroup")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaterialGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitboxSet")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HitboxSet = decoder(ref buffer);
            };
        }
        return CGameSceneNode.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkyCamera : CBaseEntity
{
    internal CSkyCamera(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Sky3DParams SkyboxData { get; private set; } = new();

    public CUtlStringToken SkyboxSlotToken { get; private set; }

    internal new static SendNodeDecoder<CSkyCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skyboxData")
        {
            var innerDecoder = Sky3DParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SkyboxData, path, ref buffer);
            };
        }
        if (field.VarName == "m_skyboxSlotToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxSlotToken = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSkyCamera.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSkyCamera.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSkyCamera.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSkyCamera.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSMatchStats : CSPerRoundStats
{
    public Int32 Enemy5Ks { get; private set; }

    public Int32 Enemy4Ks { get; private set; }

    public Int32 Enemy3Ks { get; private set; }

    public Int32 EnemyKnifeKills { get; private set; }

    public Int32 EnemyTaserKills { get; private set; }

    internal new static SendNodeDecoder<CSMatchStats> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iEnemy5Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enemy5Ks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemy4Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enemy4Ks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemy3Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enemy3Ks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemyKnifeKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyKnifeKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemyTaserKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemyTaserKills = decoder(ref buffer);
            };
        }
        return CSPerRoundStats.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSmokeGrenade : CBaseCSGrenade
{
    internal CSmokeGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSmokeGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSmokeGrenade.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSmokeGrenade.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSmokeGrenade.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSmokeGrenade.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSmokeGrenadeProjectile : CBaseCSGrenadeProjectile
{
    internal CSmokeGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 SmokeEffectTickBegin { get; private set; }

    public bool DidSmokeEffect { get; private set; }

    public Int32 RandomSeed { get; private set; }

    public Vector SmokeColor { get; private set; }

    public Vector SmokeDetonationPos { get; private set; }

    public NetworkedVector<byte> VoxelFrameData { get; private set; } = new NetworkedVector<byte>();

    internal new static SendNodeDecoder<CSmokeGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nSmokeEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SmokeEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDidSmokeEffect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DidSmokeEffect = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandomSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RandomSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSmokeColor")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SmokeColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSmokeDetonationPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SmokeDetonationPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_VoxelFrameData")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.VoxelFrameData.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.VoxelFrameData.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.VoxelFrameData[index] = element;
                }
            };
        }
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSmokeGrenadeProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSmokeGrenadeProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSmokeGrenadeProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSmokeGrenadeProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntityBase : CBaseEntity
{
    internal CSoundAreaEntityBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Disabled { get; private set; }

    public NetworkedString SoundAreaType { get; private set; }

    public Vector Pos { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Disabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSoundAreaType")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SoundAreaType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Pos = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntityOrientedBox : CSoundAreaEntityBase
{
    internal CSoundAreaEntityOrientedBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Min { get; private set; }

    public Vector Max { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityOrientedBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Min = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Max = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntityOrientedBox.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundAreaEntitySphere : CSoundAreaEntityBase
{
    internal CSoundAreaEntitySphere(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float Radius { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntitySphere> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSoundAreaEntitySphere @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundAreaEntitySphere.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetAABBEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetAABBEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetAABBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAABBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetAutoRoomEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetAutoRoomEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetAutoRoomEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetAutoRoomEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetOBBEntity : CSoundOpvarSetAABBEntity
{
    internal CSoundOpvarSetOBBEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetAABBEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetOBBWindEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetOBBWindEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBWindEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetOBBWindEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPathCornerEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetPathCornerEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPathCornerEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPathCornerEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPointBase : CBaseEntity
{
    internal CSoundOpvarSetPointBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString StackName { get; private set; }

    public NetworkedString OperatorName { get; private set; }

    public NetworkedString OpvarName { get; private set; }

    public Int32 OpvarIndex { get; private set; }

    public bool UseAutoCompare { get; private set; }

    internal new static SendNodeDecoder<CSoundOpvarSetPointBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszStackName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StackName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOperatorName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OperatorName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOpvarName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OpvarName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOpvarIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OpvarIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAutoCompare")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UseAutoCompare = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointBase.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSoundOpvarSetPointEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSoundOpvarSetPointEntity.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSPerRoundStats
{
    public Int32 Kills { get; private set; }

    public Int32 Deaths { get; private set; }

    public Int32 Assists { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriodOrMatchEnd"
    public Int32 Damage { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 EquipmentValue { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 MoneySaved { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 KillReward { get; private set; }

    public Int32 LiveTime { get; private set; }

    public Int32 HeadShotKills { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriodOrMatchEnd"
    public Int32 Objective { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 CashEarned { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriodOrMatchEnd"
    public Int32 UtilityDamage { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriodOrMatchEnd"
    public Int32 EnemiesFlashed { get; private set; }

    internal static SendNodeDecoder<CSPerRoundStats> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Kills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDeaths")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Deaths = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAssists")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Assists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Damage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMoneySaved")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MoneySaved = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iKillReward")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.KillReward = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLiveTime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LiveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHeadShotKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HeadShotKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iObjective")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Objective = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCashEarned")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CashEarned = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iUtilityDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.UtilityDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemiesFlashed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EnemiesFlashed = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (CSPerRoundStats @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CSpotlightEnd : CBaseModelEntity
{
    internal CSpotlightEnd(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float LightScale { get; private set; }

    public float Radius { get; private set; }

    internal new static SendNodeDecoder<CSpotlightEnd> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flLightScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LightScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Radius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSpotlightEnd.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSprite : CBaseModelEntity
{
    internal CSprite(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> SpriteMaterial { get; private set; }

    public CHandle<CBaseEntity> AttachedToEntityHandle { get; private set; }
    public CBaseEntity? AttachedToEntity => AttachedToEntityHandle.Get(Demo);

    public AttachmentHandle Attachment { get; private set; } = new();

    // MNetworkBitCount 8
    // MNetworkMinValue 0
    // MNetworkMaxValue 60
    // MNetworkEncodeFlags 2
    public float SpriteFramerate { get; private set; }

    // MNetworkBitCount 20
    // MNetworkMinValue 0
    // MNetworkMaxValue 256
    // MNetworkEncodeFlags 1
    public float Frame { get; private set; }

    public UInt32 Brightness { get; private set; }

    public float BrightnessDuration { get; private set; }

    // MNetworkChangeCallback "OnSpriteScaleChanged"
    public float SpriteScale { get; private set; }

    public float ScaleDuration { get; private set; }

    public bool WorldSpaceScale { get; private set; }

    // MNetworkBitCount 6
    // MNetworkMinValue 0
    // MNetworkMaxValue 64
    // MNetworkEncodeFlags 2
    public float GlowProxySize { get; private set; }

    public float HDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CSprite> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSpriteMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachedToEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AttachedToEntityHandle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Attachment = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteFramerate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteFramerate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Brightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BrightnessDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SpriteScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ScaleDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldSpaceScale")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldSpaceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSprite.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSprite.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSprite.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSprite.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CSpriteOriented : CSprite
{
    internal CSpriteOriented(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSpriteOriented> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSprite.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSpriteOriented.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSpriteOriented.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_clrRender"
public partial class CSun : CBaseModelEntity
{
    internal CSun(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector Direction { get; private set; }

    public Color Overlay { get; private set; }

    public NetworkedString EffectName { get; private set; }

    public NetworkedString SSEffectName { get; private set; }

    public bool On { get; private set; }

    public bool BmaxColor { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float Size { get; private set; }

    // MNetworkMinValue -360
    // MNetworkMaxValue 360
    public float SunRotation { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HazeScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaHaze { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaHdr { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 2
    public float AlphaScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 100
    public float HDRColorScale { get; private set; }

    // MNetworkMinValue 0
    // MNetworkMaxValue 1
    public float FarZScale { get; private set; }

    internal new static SendNodeDecoder<CSun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Direction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Overlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSSEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SSEffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.On = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bmaxColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.BmaxColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Size = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SunRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHazeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HazeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHaze")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaHaze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHdr")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaHdr = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FarZScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CSun.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CSun.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CSun.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CSun.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTablet : CCSWeaponBase
{
    internal CTablet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTablet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTablet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTablet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTablet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTablet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

// MNetworkIncludeByName "m_iTeamNum"
public partial class CTeam : CBaseEntity
{
    internal CTeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkAlias "m_aPlayers"
    public NetworkedVector<CHandle<CBasePlayerController>> PlayerControllers { get; private set; } = new NetworkedVector<CHandle<CBasePlayerController>>();

    // MNetworkAlias "m_aPawns"
    public NetworkedVector<CHandle<CBasePlayerPawn>> Players { get; private set; } = new NetworkedVector<CHandle<CBasePlayerPawn>>();

    public Int32 Score { get; private set; }

    public string Teamname { get; private set; } = "";

    internal new static SendNodeDecoder<CTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_aPlayers")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PlayerControllers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PlayerControllers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PlayerControllers[index] = element;
                }
            };
        }
        if (field.VarName == "m_aPawns")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Players.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Players.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Players[index] = element;
                }
            };
        }
        if (field.VarName == "m_iScore")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Score = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamname")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Teamname = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTeam.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTeam.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTeam.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTeam.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTeamplayRules : CMultiplayRules
{
    internal new static SendNodeDecoder<CTeamplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CMultiplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTextureBasedAnimatable : CBaseModelEntity
{
    internal CTextureBasedAnimatable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool Loop { get; private set; }

    public float FPS { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> PositionKeys { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> RotationKeys { get; private set; }

    public Vector AnimationBoundsMin { get; private set; }

    public Vector AnimationBoundsMax { get; private set; }

    public float StartTime { get; private set; }

    public float StartFrame { get; private set; }

    internal new static SendNodeDecoder<CTextureBasedAnimatable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bLoop")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Loop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFPS")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FPS = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPositionKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PositionKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRotationKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.RotationKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationBoundsMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AnimationBoundsMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartFrame = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTextureBasedAnimatable.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTonemapController2 : CBaseEntity
{
    internal CTonemapController2(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float AutoExposureMin { get; private set; }

    public float AutoExposureMax { get; private set; }

    public float TonemapPercentTarget { get; private set; }

    public float TonemapPercentBrightPixels { get; private set; }

    public float TonemapMinAvgLum { get; private set; }

    public float ExposureAdaptationSpeedUp { get; private set; }

    public float ExposureAdaptationSpeedDown { get; private set; }

    public float TonemapEVSmoothingRange { get; private set; }

    internal new static SendNodeDecoder<CTonemapController2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAutoExposureMin")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoExposureMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoExposureMax")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AutoExposureMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentBrightPixels")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapPercentBrightPixels = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapMinAvgLum")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapMinAvgLum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureAdaptationSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ExposureAdaptationSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTonemapController2.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTonemapController2.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTonemapController2.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTonemapController2.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTouchExpansionComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CTouchExpansionComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTriggerBuoyancy : CBaseTrigger
{
    internal CTriggerBuoyancy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float FluidDensity { get; private set; }

    internal new static SendNodeDecoder<CTriggerBuoyancy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFluidDensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerBuoyancy @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FluidDensity = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerBuoyancy.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerBuoyancy.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerBuoyancy.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerBuoyancy.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerPhysics : CBaseTrigger
{
    internal CTriggerPhysics(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float TriggerGravityScale { get; private set; }

    public float LinearLimit { get; private set; }

    public float LinearDamping { get; private set; }

    public float AngularLimit { get; private set; }

    public float AngularDamping { get; private set; }

    public float LinearForce { get; private set; }

    public float Frequency { get; private set; }

    public float DampingRatio { get; private set; }

    public Vector LinearForcePointAt { get; private set; }

    public bool CollapseToForcePoint { get; private set; }

    public Vector LinearForcePointAtWorld { get; private set; }

    public Vector LinearForceDirection { get; private set; }

    public bool ConvertToDebrisWhenPossible { get; private set; }

    internal new static SendNodeDecoder<CTriggerPhysics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_gravityScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.TriggerGravityScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearLimit")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearLimit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearDamping")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearDamping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angularLimit")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AngularLimit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angularDamping")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.AngularDamping = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_linearForce")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrequency")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Frequency = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDampingRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DampingRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForcePointAt")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForcePointAt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCollapseToForcePoint")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollapseToForcePoint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForcePointAtWorld")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForcePointAtWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLinearForceDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.LinearForceDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bConvertToDebrisWhenPossible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTriggerPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ConvertToDebrisWhenPossible = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerPhysics.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerTripWire : CBaseTrigger
{
    internal CTriggerTripWire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerTripWire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerTripWire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerTripWire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerTripWire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerTripWire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTriggerVolume : CBaseModelEntity
{
    internal CTriggerVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTriggerVolume.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTriggerVolume.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTripWireFire : CBaseCSGrenade
{
    internal CTripWireFire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTripWireFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTripWireFire.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTripWireFire.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTripWireFire.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTripWireFire.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CTripWireFireProjectile : CBaseGrenade
{
    internal CTripWireFireProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTripWireFireProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CTripWireFireProjectile.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CTripWireFireProjectile.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CTripWireFireProjectile.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CTripWireFireProjectile.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CVoteController : CBaseEntity
{
    internal CVoteController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 ActiveIssueIndex { get; private set; }

    public Int32 OnlyTeamToVote { get; private set; }

    public Int32[] VoteOptionCount { get; private set; } = Array.Empty<Int32>();

    public Int32 PotentialVotes { get; private set; }

    public bool IsYesNoVote { get; private set; }

    internal new static SendNodeDecoder<CVoteController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iActiveIssueIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ActiveIssueIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOnlyTeamToVote")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OnlyTeamToVote = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVoteOptionCount")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.VoteOptionCount.Length == 0) @this.VoteOptionCount = new Int32[fixedArraySize];
                @this.VoteOptionCount[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPotentialVotes")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PotentialVotes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsYesNoVote")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.IsYesNoVote = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CVoteController.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CVoteController.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CVoteController.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CVoteController.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWaterBullet : CBaseAnimGraph
{
    internal CWaterBullet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWaterBullet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWaterBullet.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWaterBullet.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWaterBullet.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWaterBullet.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponAug : CCSWeaponBaseGun
{
    internal CWeaponAug(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponAug> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponAug.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponAug.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponAug.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponAug.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponAWP : CCSWeaponBaseGun
{
    internal CWeaponAWP(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponAWP> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponAWP.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponAWP.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponAWP.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponAWP.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponBaseItem : CCSWeaponBase
{
    internal CWeaponBaseItem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CountdownTimer SequenceCompleteTimer { get; private set; } = new();

    public bool Redraw { get; private set; }

    internal new static SendNodeDecoder<CWeaponBaseItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_SequenceCompleteTimer")
        {
            var innerDecoder = CountdownTimer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CWeaponBaseItem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.SequenceCompleteTimer, path, ref buffer);
            };
        }
        if (field.VarName == "m_bRedraw")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CWeaponBaseItem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Redraw = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponBaseItem.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponBaseItem.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponBaseItem.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponBaseItem.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponBizon : CCSWeaponBaseGun
{
    internal CWeaponBizon(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponBizon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponBizon.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponBizon.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponBizon.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponBizon.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponCZ75a : CCSWeaponBaseGun
{
    internal CWeaponCZ75a(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponCZ75a> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponCZ75a.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponCZ75a.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponCZ75a.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponCZ75a.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponElite : CCSWeaponBaseGun
{
    internal CWeaponElite(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponElite> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponElite.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponElite.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponElite.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponElite.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponFamas : CCSWeaponBaseGun
{
    internal CWeaponFamas(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponFamas> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponFamas.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponFamas.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponFamas.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponFamas.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponFiveSeven : CCSWeaponBaseGun
{
    internal CWeaponFiveSeven(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponFiveSeven> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponFiveSeven.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponFiveSeven.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponFiveSeven.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponFiveSeven.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponG3SG1 : CCSWeaponBaseGun
{
    internal CWeaponG3SG1(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponG3SG1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponG3SG1.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponG3SG1.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponG3SG1.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponG3SG1.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponGalilAR : CCSWeaponBaseGun
{
    internal CWeaponGalilAR(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponGalilAR> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponGalilAR.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponGalilAR.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponGalilAR.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponGalilAR.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponGlock : CCSWeaponBaseGun
{
    internal CWeaponGlock(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponGlock> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponGlock.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponGlock.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponGlock.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponGlock.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponHKP2000 : CCSWeaponBaseGun
{
    internal CWeaponHKP2000(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponHKP2000> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponHKP2000.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponHKP2000.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponHKP2000.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponHKP2000.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponM249 : CCSWeaponBaseGun
{
    internal CWeaponM249(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponM249> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponM249.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponM249.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM249.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM249.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponM4A1 : CCSWeaponBaseGun
{
    internal CWeaponM4A1(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponM4A1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponM4A1.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponM4A1Silencer : CCSWeaponBaseGun
{
    internal CWeaponM4A1Silencer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponM4A1Silencer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1Silencer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponM4A1Silencer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1Silencer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponM4A1Silencer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponMAC10 : CCSWeaponBaseGun
{
    internal CWeaponMAC10(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMAC10> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponMAC10.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponMAC10.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMAC10.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMAC10.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponMag7 : CCSWeaponBaseGun
{
    internal CWeaponMag7(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMag7> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponMag7.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponMag7.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMag7.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMag7.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponMP5SD : CCSWeaponBaseGun
{
    internal CWeaponMP5SD(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMP5SD> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponMP5SD.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponMP5SD.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP5SD.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP5SD.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponMP7 : CCSWeaponBaseGun
{
    internal CWeaponMP7(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMP7> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponMP7.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponMP7.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP7.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP7.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponMP9 : CCSWeaponBaseGun
{
    internal CWeaponMP9(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMP9> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponMP9.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponMP9.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP9.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponMP9.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponNegev : CCSWeaponBaseGun
{
    internal CWeaponNegev(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponNegev> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponNegev.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponNegev.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponNegev.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponNegev.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponNOVA : CCSWeaponBase
{
    internal CWeaponNOVA(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponNOVA> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponNOVA.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponNOVA.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponNOVA.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponNOVA.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponP250 : CCSWeaponBaseGun
{
    internal CWeaponP250(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponP250> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponP250.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponP250.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponP250.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponP250.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponP90 : CCSWeaponBaseGun
{
    internal CWeaponP90(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponP90> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponP90.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponP90.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponP90.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponP90.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponRevolver : CCSWeaponBaseGun
{
    internal CWeaponRevolver(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponRevolver> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponRevolver.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponRevolver.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponRevolver.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponRevolver.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponSawedoff : CCSWeaponBase
{
    internal CWeaponSawedoff(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSawedoff> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponSawedoff.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponSawedoff.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSawedoff.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSawedoff.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponSCAR20 : CCSWeaponBaseGun
{
    internal CWeaponSCAR20(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSCAR20> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponSCAR20.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponSCAR20.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSCAR20.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSCAR20.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponSG556 : CCSWeaponBaseGun
{
    internal CWeaponSG556(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSG556> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponSG556.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponSG556.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSG556.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSG556.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponShield : CCSWeaponBaseGun
{
    internal CWeaponShield(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float DisplayHealth { get; private set; }

    internal new static SendNodeDecoder<CWeaponShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDisplayHealth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CWeaponShield @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DisplayHealth = decoder(ref buffer);
            };
        }
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponShield.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponShield.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponShield.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponShield.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponSSG08 : CCSWeaponBaseGun
{
    internal CWeaponSSG08(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSSG08> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponSSG08.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponSSG08.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSSG08.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponSSG08.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponTaser : CCSWeaponBaseGun
{
    internal CWeaponTaser(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime FireTime { get; private set; } = new();

    internal new static SendNodeDecoder<CWeaponTaser> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_fFireTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (CWeaponTaser @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.FireTime = decoder(ref buffer);
            };
        }
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponTaser.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponTaser.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponTaser.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponTaser.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponTec9 : CCSWeaponBaseGun
{
    internal CWeaponTec9(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponTec9> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponTec9.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponTec9.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponTec9.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponTec9.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponUMP45 : CCSWeaponBaseGun
{
    internal CWeaponUMP45(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponUMP45> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponUMP45.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponUMP45.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponUMP45.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponUMP45.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponUSPSilencer : CCSWeaponBaseGun
{
    internal CWeaponUSPSilencer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponUSPSilencer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponUSPSilencer.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponUSPSilencer.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponUSPSilencer.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponUSPSilencer.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponXM1014 : CCSWeaponBase
{
    internal CWeaponXM1014(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponXM1014> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponXM1014.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponXM1014.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponXM1014.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponXM1014.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWeaponZoneRepulsor : CCSWeaponBaseGun
{
    internal CWeaponZoneRepulsor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponZoneRepulsor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWeaponZoneRepulsor.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWeaponZoneRepulsor.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWeaponZoneRepulsor.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWeaponZoneRepulsor.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class CWorld : CBaseModelEntity
{
    internal CWorld(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWorld> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }

    internal override void FireCreateEvent()
    {
        Demo.EntityEvents.CWorld.Create?.Invoke(this);
        base.FireCreateEvent();
    }

    internal override void FireDeleteEvent()
    {
        Demo.EntityEvents.CWorld.Delete?.Invoke(this);
        base.FireDeleteEvent();
    }

    internal override void FirePreUpdateEvent()
    {
        Demo.EntityEvents.CWorld.PreUpdate?.Invoke(this);
        base.FirePreUpdateEvent();
    }

    internal override void FirePostUpdateEvent()
    {
        Demo.EntityEvents.CWorld.PostUpdate?.Invoke(this);
        base.FirePostUpdateEvent();
    }
}

public partial class EntityRenderAttribute
{
    public CUtlStringToken ID { get; private set; }

    public Vector4D Values { get; private set; }

    internal static SendNodeDecoder<EntityRenderAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Values")
        {
            var decoder = FieldDecode.CreateDecoder_Vector4D(field.FieldEncodingInfo);
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Values = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (EntityRenderAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class EntitySpottedState
{
    // MNetworkChangeCallback "OnIsSpottedChanged"
    public bool Spotted { get; private set; }

    // MNetworkChangeCallback "OnIsSpottedChanged"
    public UInt32[] SpottedByMask { get; private set; } = Array.Empty<UInt32>();

    internal static SendNodeDecoder<EntitySpottedState> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bSpotted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (EntitySpottedState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Spotted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSpottedByMask")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (EntitySpottedState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.SpottedByMask.Length == 0) @this.SpottedByMask = new UInt32[fixedArraySize];
                @this.SpottedByMask[path[1]] = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (EntitySpottedState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class FogParams
{
    // MNetworkEncoder "coord"
    public Vector DirPrimary { get; private set; }

    public Color ColorPrimary { get; private set; }

    public Color ColorSecondary { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color ColorPrimaryLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color ColorSecondaryLerpTo { get; private set; }

    public float Start { get; private set; }

    public float End { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Farz { get; private set; }

    public float Maxdensity { get; private set; }

    public float Exponent { get; private set; }

    public float HDRColorScale { get; private set; }

    // MNetworkUserGroup "FogController"
    public float SkyboxFogFactor { get; private set; }

    // MNetworkUserGroup "FogController"
    public float SkyboxFogFactorLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float StartLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float EndLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float MaxdensityLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public GameTime Lerptime { get; private set; } = new();

    // MNetworkUserGroup "FogController"
    public float Duration { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Blendtobackground { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Scattering { get; private set; }

    // MNetworkUserGroup "FogController"
    public float Locallightscale { get; private set; }

    public bool Enable { get; private set; }

    public bool Blend { get; private set; }

    public bool NoReflectionFog { get; private set; }

    internal static SendNodeDecoder<FogParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "dirPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DirPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorSecondary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorPrimaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ColorSecondaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "start")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Start = decoder(ref buffer);
            };
        }
        if (field.VarName == "end")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.End = decoder(ref buffer);
            };
        }
        if (field.VarName == "farz")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Farz = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Maxdensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "exponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "HDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactor")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxFogFactor = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactorLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SkyboxFogFactorLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "startLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StartLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "endLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EndLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensityLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.MaxdensityLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "lerptime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Lerptime = decoder(ref buffer);
            };
        }
        if (field.VarName == "duration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Duration = decoder(ref buffer);
            };
        }
        if (field.VarName == "blendtobackground")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blendtobackground = decoder(ref buffer);
            };
        }
        if (field.VarName == "scattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "locallightscale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Locallightscale = decoder(ref buffer);
            };
        }
        if (field.VarName == "enable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Enable = decoder(ref buffer);
            };
        }
        if (field.VarName == "blend")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Blend = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoReflectionFog")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.NoReflectionFog = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (FogParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class FogPlayerParams
{
    // MNetworkUserGroup "PlayerFogController"
    public CHandle<CFogController> CtrlHandle { get; private set; }

    internal static SendNodeDecoder<FogPlayerParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CFogController>(field.FieldEncodingInfo);
            return (FogPlayerParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CtrlHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (FogPlayerParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class IEconItemInterface
{
    internal static SendNodeDecoder<IEconItemInterface> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (IEconItemInterface @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCModel
{
    internal static SendNodeDecoder<InfoForResourceTypeCModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCPostProcessingResource
{
    internal static SendNodeDecoder<InfoForResourceTypeCPostProcessingResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCPostProcessingResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeCTextureBase
{
    internal static SendNodeDecoder<InfoForResourceTypeCTextureBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeCTextureBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeIMaterial2
{
    internal static SendNodeDecoder<InfoForResourceTypeIMaterial2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeIMaterial2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

// MResourceTypeForInfoType
public partial class InfoForResourceTypeIParticleSystemDefinition
{
    internal static SendNodeDecoder<InfoForResourceTypeIParticleSystemDefinition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (InfoForResourceTypeIParticleSystemDefinition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ISkeletonAnimationController
{
    internal static SendNodeDecoder<ISkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ISkeletonAnimationController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class PhysicsRagdollPose
{
    internal static SendNodeDecoder<PhysicsRagdollPose> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<PhysicsRagdollPose> factory)
    {
        if (serializerKey.Name == "PhysicsRagdollPose_t")
        {
            factory = () => new PhysicsRagdollPose();
            return decoderSet.GetDecoder<PhysicsRagdollPose>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of PhysicsRagdollPose: {serializerKey}");
    }

    // MNetworkChangeCallback "OnTransformChanged"
    public NetworkedVector<CTransform> Transforms { get; private set; } = new NetworkedVector<CTransform>();

    public CHandle<CBaseEntity> OwnerHandle { get; private set; }

    internal static SendNodeDecoder<PhysicsRagdollPose> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Transforms")
        {
            var decoder = FieldDecode.CreateDecoder_CTransform(field.FieldEncodingInfo);
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.Transforms.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.Transforms.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.Transforms[index] = element;
                }
            };
        }
        if (field.VarName == "m_hOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (PhysicsRagdollPose @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class SellbackPurchaseEntry
{
    public UInt16 DefIdx { get; private set; }

    public Int32 Cost { get; private set; }

    public Int32 PrevArmor { get; private set; }

    public bool PrevHelmet { get; private set; }

    public CHandle<CEntityInstance> ItemHandle { get; private set; }

    internal static SendNodeDecoder<SellbackPurchaseEntry> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_unDefIdx")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.DefIdx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCost")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Cost = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPrevArmor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrevArmor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrevHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PrevHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hItem")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CEntityInstance>(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemHandle = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (SellbackPurchaseEntry @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ServerAuthoritativeWeaponSlot
{
    public UInt16 Class { get; private set; }

    public UInt16 Slot { get; private set; }

    public UInt16 ItemDefIdx { get; private set; }

    internal static SendNodeDecoder<ServerAuthoritativeWeaponSlot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "unClass")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (ServerAuthoritativeWeaponSlot @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Class = decoder(ref buffer);
            };
        }
        if (field.VarName == "unSlot")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (ServerAuthoritativeWeaponSlot @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Slot = decoder(ref buffer);
            };
        }
        if (field.VarName == "unItemDefIdx")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (ServerAuthoritativeWeaponSlot @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemDefIdx = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ServerAuthoritativeWeaponSlot @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class SharedModelDesc
{
    public Int32 ModelID { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> Material { get; private set; }

    public ShardSolid Solid { get; private set; }

    public ShatterPanelMode ShatterPanelMode { get; private set; }

    public Vector2D PanelSize { get; private set; }

    public Vector2D StressPositionA { get; private set; }

    public Vector2D StressPositionB { get; private set; }

    public NetworkedVector<Vector2D> PanelVertices { get; private set; } = new NetworkedVector<Vector2D>();

    public float GlassHalfThickness { get; private set; }

    public bool HasParent { get; private set; }

    public bool ParentFrozen { get; private set; }

    public CUtlStringToken SurfacePropStringToken { get; private set; }

    internal static SendNodeDecoder<SharedModelDesc> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nModelID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ModelID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Material = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_solid")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ShardSolid>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Solid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ShatterPanelMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ShatterPanelMode>(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ShatterPanelMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.PanelSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionA")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StressPositionA = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionB")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.StressPositionB = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelVertices")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.PanelVertices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.PanelVertices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.PanelVertices[index] = element;
                }
            };
        }
        if (field.VarName == "m_flGlassHalfThickness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.GlassHalfThickness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasParent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HasParent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bParentFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ParentFrozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SurfacePropStringToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.SurfacePropStringToken = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (SharedModelDesc @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class Sky3DParams
{
    public Int16 Scale { get; private set; }

    // MNetworkEncoder "coord"
    public Vector Origin { get; private set; }

    public bool Clip3DSkyBoxNearToWorldFar { get; private set; }

    public float Clip3DSkyBoxNearToWorldFarOffset { get; private set; }

    public FogParams Fog { get; private set; } = new();

    public WorldGroupId WorldGroupID { get; private set; }

    internal static SendNodeDecoder<Sky3DParams> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "scale")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "origin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Origin = decoder(ref buffer);
            };
        }
        if (field.VarName == "bClip3DSkyBoxNearToWorldFar")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip3DSkyBoxNearToWorldFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "flClip3DSkyBoxNearToWorldFarOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Clip3DSkyBoxNearToWorldFarOffset = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "fog")
        {
            var innerDecoder = FogParams.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.Fog, path, ref buffer);
            };
        }
        if (field.VarName == "m_nWorldGroupID")
        {
            var decoder = FieldDecode.CreateDecoder_WorldGroupId(field.FieldEncodingInfo);
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.WorldGroupID = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (Sky3DParams @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ViewAngleServerChange
{
    public FixAngleSet Type { get; private set; }

    // MNetworkEncoder "qangle_precise"
    public QAngle Angle { get; private set; }

    public UInt32 Index { get; private set; }

    internal static SendNodeDecoder<ViewAngleServerChange> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "nType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<FixAngleSet>(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Type = decoder(ref buffer);
            };
        }
        if (field.VarName == "qAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Angle = decoder(ref buffer);
            };
        }
        if (field.VarName == "nIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Index = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (ViewAngleServerChange @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class VPhysicsCollisionAttribute
{
    public UInt64 InteractsAs { get; private set; }

    public UInt64 InteractsWith { get; private set; }

    public UInt64 InteractsExclude { get; private set; }

    public UInt32 EntityId { get; private set; }

    public UInt32 OwnerId { get; private set; }

    public UInt16 HierarchyId { get; private set; }

    public byte CollisionGroup { get; private set; }

    public byte CollisionFunctionMask { get; private set; }

    internal static SendNodeDecoder<VPhysicsCollisionAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nInteractsAs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsAs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsWith")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsWith = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsExclude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.InteractsExclude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEntityId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.EntityId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.OwnerId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHierarchyId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HierarchyId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionFunctionMask")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.CollisionFunctionMask = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (VPhysicsCollisionAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class WeaponPurchaseCount
{
    public UInt16 ItemDefIndex { get; private set; }

    public UInt16 Count { get; private set; }

    internal static SendNodeDecoder<WeaponPurchaseCount> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nItemDefIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (WeaponPurchaseCount @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.ItemDefIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCount")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (WeaponPurchaseCount @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.Count = decoder(ref buffer);
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (WeaponPurchaseCount @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class WeaponPurchaseTracker
{
    public NetworkedVector<WeaponPurchaseCount> WeaponPurchases { get; private set; } = new NetworkedVector<WeaponPurchaseCount>();

    internal static SendNodeDecoder<WeaponPurchaseTracker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_weaponPurchases")
        {
            var innerDecoder = decoderSet.GetDecoder<WeaponPurchaseCount>(field.FieldSerializerKey!.Value);
            return (WeaponPurchaseTracker @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.WeaponPurchases.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.WeaponPurchases.EnsureSize(index + 1);
                    var element = @this.WeaponPurchases[index] ??= new WeaponPurchaseCount();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (FallbackDecoder.TryCreate(field.VarName, field.VarType, field.FieldEncodingInfo, decoderSet, out var fallback))
        {
            return (WeaponPurchaseTracker @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
#if DEBUG
                var _field = field;
#endif
                fallback(default, path, ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

internal static class SendNodeDecoders
{
    public static SendNodeDecoderFactory<T> GetFactory<T>()
    {
        if (typeof(T) == typeof(AudioParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<AudioParams>(AudioParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAK47))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAK47>(CAK47.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAnimGraphNetworkedVariables))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAnimGraphNetworkedVariables>(CAnimGraphNetworkedVariables.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeContainer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeContainer>(CAttributeContainer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeList))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeList>(CAttributeList.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeManager>(CAttributeManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBarnLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBarnLight>(CBarnLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraph>(CBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraphController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraphController>(CBaseAnimGraphController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseButton))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseButton>(CBaseButton.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseClientUIEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseClientUIEntity>(CBaseClientUIEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCombatCharacter))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCombatCharacter>(CBaseCombatCharacter.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCSGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCSGrenade>(CBaseCSGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCSGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseDoor>(CBaseDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseEntity>(CBaseEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFire>(CBaseFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFlex))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFlex>(CBaseFlex.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseGrenade>(CBaseGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseModelEntity>(CBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerController>(CBasePlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerPawn>(CBasePlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerWeapon>(CBasePlayerWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseProp>(CBaseProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePropDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePropDoor>(CBasePropDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseToggle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseToggle>(CBaseToggle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseTrigger>(CBaseTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseViewModel>(CBaseViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBeam>(CBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponent>(CBodyComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseAnimGraph>(CBodyComponentBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseModelEntity>(CBodyComponentBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentPoint))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentPoint>(CBodyComponentPoint.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentSkeletonInstance>(CBodyComponentSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBombTarget))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBombTarget>(CBombTarget.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreachCharge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreachCharge>(CBreachCharge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreachChargeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreachChargeProjectile>(CBreachChargeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakable>(CBreakable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakableProp>(CBreakableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBumpMine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBumpMine>(CBumpMine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBumpMineProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBumpMineProjectile>(CBumpMineProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CC4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CC4>(CC4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CChicken))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CChicken>(CChicken.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCollisionProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCollisionProperty>(CCollisionProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrection))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrection>(CColorCorrection.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrectionVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrectionVolume>(CColorCorrectionVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules>(CCSGameModeRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_ArmsRace))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_ArmsRace>(CCSGameModeRules_ArmsRace.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Deathmatch))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Deathmatch>(CCSGameModeRules_Deathmatch.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Noop))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Noop>(CCSGameModeRules_Noop.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Scripted))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Scripted>(CCSGameModeRules_Scripted.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameRules>(CCSGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameRulesProxy>(CCSGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroCharacterPosition>(CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroCounterTerroristPosition>(CCSGO_TeamIntroCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroTerroristPosition>(CCSGO_TeamIntroTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamPreviewCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamPreviewCharacterPosition>(CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectCharacterPosition>(CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectCounterTerroristPosition>(CCSGO_TeamSelectCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectTerroristPosition>(CCSGO_TeamSelectTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroCharacterPosition>(CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroCounterTerroristPosition>(CCSGO_WingmanIntroCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroTerroristPosition>(CCSGO_WingmanIntroTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGOViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGOViewModel>(CCSGOViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSMinimapBoundary))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSMinimapBoundary>(CCSMinimapBoundary.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_CameraServices>(CCSObserver_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_MovementServices>(CCSObserver_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_ObserverServices>(CCSObserver_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_UseServices>(CCSObserver_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_ViewModelServices>(CCSObserver_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserverPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserverPawn>(CCSObserverPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ActionTrackingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ActionTrackingServices>(CCSPlayer_ActionTrackingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_BulletServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_BulletServices>(CCSPlayer_BulletServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_BuyServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_BuyServices>(CCSPlayer_BuyServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_CameraServices>(CCSPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_HostageServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_HostageServices>(CCSPlayer_HostageServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ItemServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ItemServices>(CCSPlayer_ItemServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_MovementServices>(CCSPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_PingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_PingServices>(CCSPlayer_PingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_UseServices>(CCSPlayer_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ViewModelServices>(CCSPlayer_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_WaterServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_WaterServices>(CCSPlayer_WaterServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_WeaponServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_WeaponServices>(CCSPlayer_WeaponServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerBase_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerBase_CameraServices>(CCSPlayerBase_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController>(CCSPlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_ActionTrackingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_ActionTrackingServices>(CCSPlayerController_ActionTrackingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_DamageServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_DamageServices>(CCSPlayerController_DamageServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_InGameMoneyServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_InGameMoneyServices>(CCSPlayerController_InGameMoneyServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_InventoryServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_InventoryServices>(CCSPlayerController_InventoryServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerPawn>(CCSPlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerPawnBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerPawnBase>(CCSPlayerPawnBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerResource>(CCSPlayerResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSTeam>(CCSTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSWeaponBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSWeaponBase>(CCSWeaponBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSWeaponBaseGun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSWeaponBaseGun>(CCSWeaponBaseGun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDamageRecord))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDamageRecord>(CDamageRecord.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDEagle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDEagle>(CDEagle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDecoyGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDecoyGrenade>(CDecoyGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDecoyProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDecoyProjectile>(CDecoyProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicLight>(CDynamicLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicProp>(CDynamicProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconEntity>(CEconEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemAttribute>(CEconItemAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemView))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemView>(CEconItemView.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconWearable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconWearable>(CEconWearable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityComponent>(CEntityComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityDissolve))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityDissolve>(CEntityDissolve.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityFlame))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityFlame>(CEntityFlame.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityIdentity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityIdentity>(CEntityIdentity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityInstance>(CEntityInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCombinedLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCombinedLightProbeVolume>(CEnvCombinedLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemap>(CEnvCubemap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemapBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemapBox>(CEnvCubemapBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemapFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemapFog>(CEnvCubemapFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDecal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDecal>(CEnvDecal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDetailController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDetailController>(CEnvDetailController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvLightProbeVolume>(CEnvLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvParticleGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvParticleGlow>(CEnvParticleGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvProjectedTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvProjectedTexture>(CEnvProjectedTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvScreenOverlay))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvScreenOverlay>(CEnvScreenOverlay.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvSky))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvSky>(CEnvSky.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogController>(CEnvVolumetricFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogVolume>(CEnvVolumetricFogVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWind))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWind>(CEnvWind.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWindShared))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWindShared>(CEnvWindShared.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFireCrackerBlast))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFireCrackerBlast>(CFireCrackerBlast.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFireSmoke))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFireSmoke>(CFireSmoke.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFish))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFish>(CFish.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFists))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFists>(CFists.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFlashbang))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFlashbang>(CFlashbang.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFlashbangProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFlashbangProjectile>(CFlashbangProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFogController>(CFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFootstepControl))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFootstepControl>(CFootstepControl.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncBrush))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncBrush>(CFuncBrush.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncConveyor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncConveyor>(CFuncConveyor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncElectrifiedVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncElectrifiedVolume>(CFuncElectrifiedVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncLadder))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncLadder>(CFuncLadder.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMonitor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMonitor>(CFuncMonitor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMoveLinear))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMoveLinear>(CFuncMoveLinear.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncRotating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncRotating>(CFuncRotating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncTrackTrain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncTrackTrain>(CFuncTrackTrain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncWater))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncWater>(CFuncWater.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRules>(CGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRulesProxy>(CGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameSceneNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameSceneNode>(CGameSceneNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGlowProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGlowProperty>(CGlowProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGradientFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGradientFog>(CGradientFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHandleTest))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHandleTest>(CHandleTest.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHEGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHEGrenade>(CHEGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHEGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHEGrenadeProjectile>(CHEGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHitboxComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHitboxComponent>(CHitboxComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostage>(CHostage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageCarriableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageCarriableProp>(CHostageCarriableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageExpresserShim))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageExpresserShim>(CHostageExpresserShim.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageRescueZone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageRescueZone>(CHostageRescueZone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageRescueZoneShim))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageRescueZoneShim>(CHostageRescueZoneShim.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CIncendiaryGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CIncendiaryGrenade>(CIncendiaryGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInferno))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInferno>(CInferno.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoInstructorHintHostageRescueZone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoInstructorHintHostageRescueZone>(CInfoInstructorHintHostageRescueZone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoLadderDismount))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoLadderDismount>(CInfoLadderDismount.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoOffscreenPanoramaTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoOffscreenPanoramaTexture>(CInfoOffscreenPanoramaTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoVisibilityBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoVisibilityBox>(CInfoVisibilityBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoWorldLayer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoWorldLayer>(CInfoWorldLayer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem>(CItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem_Healthshot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem_Healthshot>(CItem_Healthshot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemDogtags))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemDogtags>(CItemDogtags.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CKnife))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CKnife>(CKnife.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightComponent>(CLightComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightDirectionalEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightDirectionalEntity>(CLightDirectionalEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEntity>(CLightEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEnvironmentEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEnvironmentEntity>(CLightEnvironmentEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightGlow>(CLightGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightOrthoEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightOrthoEntity>(CLightOrthoEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightSpotEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightSpotEntity>(CLightSpotEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMapVetoPickController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMapVetoPickController>(CMapVetoPickController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMelee))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMelee>(CMelee.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelPointEntity>(CModelPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelState))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelState>(CModelState.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMolotovGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMolotovGrenade>(CMolotovGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMolotovProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMolotovProjectile>(CMolotovProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMultiplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMultiplayRules>(CMultiplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkOriginCellCoordQuantizedVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkOriginCellCoordQuantizedVector>(CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkVelocityVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkVelocityVector>(CNetworkVelocityVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkViewOffsetVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkViewOffsetVector>(CNetworkViewOffsetVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(COmniLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<COmniLight>(COmniLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CountdownTimer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CountdownTimer>(CountdownTimer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CParticleSystem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CParticleSystem>(CParticleSystem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPathParticleRope))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPathParticleRope>(CPathParticleRope.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysBox>(CPhysBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysicsProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysicsProp>(CPhysicsProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysicsPropMultiplayer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysMagnet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysMagnet>(CPhysMagnet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlantedC4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlantedC4>(CPlantedC4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_AutoaimServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_AutoaimServices>(CPlayer_AutoaimServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_CameraServices>(CPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_FlashlightServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_FlashlightServices>(CPlayer_FlashlightServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ItemServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ItemServices>(CPlayer_ItemServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices>(CPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices_Humanoid))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices_Humanoid>(CPlayer_MovementServices_Humanoid.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ObserverServices>(CPlayer_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_UseServices>(CPlayer_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ViewModelServices>(CPlayer_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WaterServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WaterServices>(CPlayer_WaterServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WeaponServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WeaponServices>(CPlayer_WeaponServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerControllerComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerControllerComponent>(CPlayerControllerComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerPawnComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerPawnComponent>(CPlayerPawnComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerPing))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerPing>(CPlayerPing.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerSprayDecal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerSprayDecal>(CPlayerSprayDecal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerVisibility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerVisibility>(CPlayerVisibility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCamera>(CPointCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIDialog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIDialog>(CPointClientUIDialog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldPanel>(CPointClientUIWorldPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldTextPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldTextPanel>(CPointClientUIWorldTextPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCommentaryNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCommentaryNode>(CPointCommentaryNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointEntity>(CPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointValueRemapper))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointValueRemapper>(CPointValueRemapper.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointWorldText))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointWorldText>(CPointWorldText.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPostProcessingVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPostProcessingVolume>(CPostProcessingVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitation))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitation>(CPrecipitation.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitationBlocker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitationBlocker>(CPrecipitationBlocker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPredictedViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPredictedViewModel>(CPredictedViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPropDoorRotating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPropDoorRotating>(CPropDoorRotating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollManager>(CRagdollManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollProp>(CRagdollProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollPropAttached))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollPropAttached>(CRagdollPropAttached.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRectLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRectLight>(CRectLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRenderComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRenderComponent>(CRenderComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRetakeGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRetakeGameRules>(CRetakeGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRopeKeyframe))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRopeKeyframe>(CRopeKeyframe.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSceneEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSceneEntity>(CSceneEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CScriptComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CScriptComponent>(CScriptComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSensorGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSensorGrenade>(CSensorGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSensorGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSensorGrenadeProjectile>(CSensorGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CShatterGlassShardPhysics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CShatterGlassShardPhysics>(CShatterGlassShardPhysics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonAnimationController>(CSkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonInstance>(CSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkyCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkyCamera>(CSkyCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSMatchStats))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSMatchStats>(CSMatchStats.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSmokeGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSmokeGrenade>(CSmokeGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSmokeGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityBase>(CSoundAreaEntityBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityOrientedBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityOrientedBox>(CSoundAreaEntityOrientedBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntitySphere))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntitySphere>(CSoundAreaEntitySphere.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetAABBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetAABBEntity>(CSoundOpvarSetAABBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetAutoRoomEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetAutoRoomEntity>(CSoundOpvarSetAutoRoomEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBEntity>(CSoundOpvarSetOBBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBWindEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBWindEntity>(CSoundOpvarSetOBBWindEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPathCornerEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPathCornerEntity>(CSoundOpvarSetPathCornerEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointBase>(CSoundOpvarSetPointBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointEntity>(CSoundOpvarSetPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSPerRoundStats))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSPerRoundStats>(CSPerRoundStats.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpotlightEnd))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpotlightEnd>(CSpotlightEnd.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSprite))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSprite>(CSprite.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpriteOriented))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpriteOriented>(CSpriteOriented.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSun>(CSun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTablet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTablet>(CTablet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeam>(CTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeamplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeamplayRules>(CTeamplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTextureBasedAnimatable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTextureBasedAnimatable>(CTextureBasedAnimatable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTonemapController2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTonemapController2>(CTonemapController2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTouchExpansionComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTouchExpansionComponent>(CTouchExpansionComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerBuoyancy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerBuoyancy>(CTriggerBuoyancy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerPhysics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerPhysics>(CTriggerPhysics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerTripWire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerTripWire>(CTriggerTripWire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerVolume>(CTriggerVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTripWireFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTripWireFire>(CTripWireFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTripWireFireProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTripWireFireProjectile>(CTripWireFireProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CVoteController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CVoteController>(CVoteController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWaterBullet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWaterBullet>(CWaterBullet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponAug))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponAug>(CWeaponAug.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponAWP))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponAWP>(CWeaponAWP.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponBaseItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponBaseItem>(CWeaponBaseItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponBizon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponBizon>(CWeaponBizon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponCZ75a))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponCZ75a>(CWeaponCZ75a.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponElite))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponElite>(CWeaponElite.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponFamas))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponFamas>(CWeaponFamas.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponFiveSeven))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponFiveSeven>(CWeaponFiveSeven.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponG3SG1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponG3SG1>(CWeaponG3SG1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponGalilAR))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponGalilAR>(CWeaponGalilAR.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponGlock))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponGlock>(CWeaponGlock.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponHKP2000))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponHKP2000>(CWeaponHKP2000.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponM249))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponM249>(CWeaponM249.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponM4A1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponM4A1>(CWeaponM4A1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponM4A1Silencer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponM4A1Silencer>(CWeaponM4A1Silencer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMAC10))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMAC10>(CWeaponMAC10.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMag7))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMag7>(CWeaponMag7.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMP5SD))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMP5SD>(CWeaponMP5SD.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMP7))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMP7>(CWeaponMP7.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMP9))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMP9>(CWeaponMP9.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponNegev))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponNegev>(CWeaponNegev.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponNOVA))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponNOVA>(CWeaponNOVA.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponP250))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponP250>(CWeaponP250.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponP90))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponP90>(CWeaponP90.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponRevolver))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponRevolver>(CWeaponRevolver.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSawedoff))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSawedoff>(CWeaponSawedoff.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSCAR20))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSCAR20>(CWeaponSCAR20.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSG556))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSG556>(CWeaponSG556.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponShield>(CWeaponShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSSG08))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSSG08>(CWeaponSSG08.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponTaser))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponTaser>(CWeaponTaser.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponTec9))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponTec9>(CWeaponTec9.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponUMP45))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponUMP45>(CWeaponUMP45.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponUSPSilencer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponUSPSilencer>(CWeaponUSPSilencer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponXM1014))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponXM1014>(CWeaponXM1014.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponZoneRepulsor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponZoneRepulsor>(CWeaponZoneRepulsor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWorld))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWorld>(CWorld.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(EntityRenderAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<EntityRenderAttribute>(EntityRenderAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(EntitySpottedState))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<EntitySpottedState>(EntitySpottedState.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(FogParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<FogParams>(FogParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(FogPlayerParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<FogPlayerParams>(FogPlayerParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(IEconItemInterface))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<IEconItemInterface>(IEconItemInterface.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCModel>(InfoForResourceTypeCModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCPostProcessingResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCPostProcessingResource>(InfoForResourceTypeCPostProcessingResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCTextureBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCTextureBase>(InfoForResourceTypeCTextureBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIMaterial2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIMaterial2>(InfoForResourceTypeIMaterial2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIParticleSystemDefinition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIParticleSystemDefinition>(InfoForResourceTypeIParticleSystemDefinition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ISkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ISkeletonAnimationController>(ISkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(PhysicsRagdollPose))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<PhysicsRagdollPose>(PhysicsRagdollPose.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(SellbackPurchaseEntry))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<SellbackPurchaseEntry>(SellbackPurchaseEntry.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ServerAuthoritativeWeaponSlot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ServerAuthoritativeWeaponSlot>(ServerAuthoritativeWeaponSlot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(SharedModelDesc))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<SharedModelDesc>(SharedModelDesc.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(Sky3DParams))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<Sky3DParams>(Sky3DParams.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ViewAngleServerChange))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ViewAngleServerChange>(ViewAngleServerChange.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(VPhysicsCollisionAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<VPhysicsCollisionAttribute>(VPhysicsCollisionAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(WeaponPurchaseCount))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<WeaponPurchaseCount>(WeaponPurchaseCount.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(WeaponPurchaseTracker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<WeaponPurchaseTracker>(WeaponPurchaseTracker.CreateFieldDecoder);
        }

        throw new NotImplementedException($"Unknown send node class: {typeof(T)}");
    }
}

internal static class EntityFactories
{
    public static readonly IReadOnlyDictionary<string, EntityFactory> All = new Dictionary<string, EntityFactory>
    {
        {"CAK47", (context, decoder) => new CAK47(context, decoder)},
        {"CBarnLight", (context, decoder) => new CBarnLight(context, decoder)},
        {"CBaseAnimGraph", (context, decoder) => new CBaseAnimGraph(context, decoder)},
        {"CBaseButton", (context, decoder) => new CBaseButton(context, decoder)},
        {"CBaseClientUIEntity", (context, decoder) => new CBaseClientUIEntity(context, decoder)},
        {"CBaseCombatCharacter", (context, decoder) => new CBaseCombatCharacter(context, decoder)},
        {"CBaseCSGrenade", (context, decoder) => new CBaseCSGrenade(context, decoder)},
        {"CBaseCSGrenadeProjectile", (context, decoder) => new CBaseCSGrenadeProjectile(context, decoder)},
        {"CBaseDoor", (context, decoder) => new CBaseDoor(context, decoder)},
        {"CBaseEntity", (context, decoder) => new CBaseEntity(context, decoder)},
        {"CBaseFire", (context, decoder) => new CBaseFire(context, decoder)},
        {"CBaseFlex", (context, decoder) => new CBaseFlex(context, decoder)},
        {"CBaseGrenade", (context, decoder) => new CBaseGrenade(context, decoder)},
        {"CBaseModelEntity", (context, decoder) => new CBaseModelEntity(context, decoder)},
        {"CBasePlayerController", (context, decoder) => new CBasePlayerController(context, decoder)},
        {"CBasePlayerPawn", (context, decoder) => new CBasePlayerPawn(context, decoder)},
        {"CBasePlayerWeapon", (context, decoder) => new CBasePlayerWeapon(context, decoder)},
        {"CBaseProp", (context, decoder) => new CBaseProp(context, decoder)},
        {"CBasePropDoor", (context, decoder) => new CBasePropDoor(context, decoder)},
        {"CBaseToggle", (context, decoder) => new CBaseToggle(context, decoder)},
        {"CBaseTrigger", (context, decoder) => new CBaseTrigger(context, decoder)},
        {"CBaseViewModel", (context, decoder) => new CBaseViewModel(context, decoder)},
        {"CBeam", (context, decoder) => new CBeam(context, decoder)},
        {"CBombTarget", (context, decoder) => new CBombTarget(context, decoder)},
        {"CBreachCharge", (context, decoder) => new CBreachCharge(context, decoder)},
        {"CBreachChargeProjectile", (context, decoder) => new CBreachChargeProjectile(context, decoder)},
        {"CBreakable", (context, decoder) => new CBreakable(context, decoder)},
        {"CBreakableProp", (context, decoder) => new CBreakableProp(context, decoder)},
        {"CBumpMine", (context, decoder) => new CBumpMine(context, decoder)},
        {"CBumpMineProjectile", (context, decoder) => new CBumpMineProjectile(context, decoder)},
        {"CC4", (context, decoder) => new CC4(context, decoder)},
        {"CChicken", (context, decoder) => new CChicken(context, decoder)},
        {"CColorCorrection", (context, decoder) => new CColorCorrection(context, decoder)},
        {"CColorCorrectionVolume", (context, decoder) => new CColorCorrectionVolume(context, decoder)},
        {"CCSGameRulesProxy", (context, decoder) => new CCSGameRulesProxy(context, decoder)},
        {"CCSGO_TeamIntroCharacterPosition", (context, decoder) => new CCSGO_TeamIntroCharacterPosition(context, decoder)},
        {"CCSGO_TeamIntroCounterTerroristPosition", (context, decoder) => new CCSGO_TeamIntroCounterTerroristPosition(context, decoder)},
        {"CCSGO_TeamIntroTerroristPosition", (context, decoder) => new CCSGO_TeamIntroTerroristPosition(context, decoder)},
        {"CCSGO_TeamPreviewCharacterPosition", (context, decoder) => new CCSGO_TeamPreviewCharacterPosition(context, decoder)},
        {"CCSGO_TeamSelectCharacterPosition", (context, decoder) => new CCSGO_TeamSelectCharacterPosition(context, decoder)},
        {"CCSGO_TeamSelectCounterTerroristPosition", (context, decoder) => new CCSGO_TeamSelectCounterTerroristPosition(context, decoder)},
        {"CCSGO_TeamSelectTerroristPosition", (context, decoder) => new CCSGO_TeamSelectTerroristPosition(context, decoder)},
        {"CCSGO_WingmanIntroCharacterPosition", (context, decoder) => new CCSGO_WingmanIntroCharacterPosition(context, decoder)},
        {"CCSGO_WingmanIntroCounterTerroristPosition", (context, decoder) => new CCSGO_WingmanIntroCounterTerroristPosition(context, decoder)},
        {"CCSGO_WingmanIntroTerroristPosition", (context, decoder) => new CCSGO_WingmanIntroTerroristPosition(context, decoder)},
        {"CCSGOViewModel", (context, decoder) => new CCSGOViewModel(context, decoder)},
        {"CCSMinimapBoundary", (context, decoder) => new CCSMinimapBoundary(context, decoder)},
        {"CCSObserverPawn", (context, decoder) => new CCSObserverPawn(context, decoder)},
        {"CCSPlayerController", (context, decoder) => new CCSPlayerController(context, decoder)},
        {"CCSPlayerPawn", (context, decoder) => new CCSPlayerPawn(context, decoder)},
        {"CCSPlayerPawnBase", (context, decoder) => new CCSPlayerPawnBase(context, decoder)},
        {"CCSPlayerResource", (context, decoder) => new CCSPlayerResource(context, decoder)},
        {"CCSTeam", (context, decoder) => new CCSTeam(context, decoder)},
        {"CCSWeaponBase", (context, decoder) => new CCSWeaponBase(context, decoder)},
        {"CCSWeaponBaseGun", (context, decoder) => new CCSWeaponBaseGun(context, decoder)},
        {"CDEagle", (context, decoder) => new CDEagle(context, decoder)},
        {"CDecoyGrenade", (context, decoder) => new CDecoyGrenade(context, decoder)},
        {"CDecoyProjectile", (context, decoder) => new CDecoyProjectile(context, decoder)},
        {"CDynamicLight", (context, decoder) => new CDynamicLight(context, decoder)},
        {"CDynamicProp", (context, decoder) => new CDynamicProp(context, decoder)},
        {"CEconEntity", (context, decoder) => new CEconEntity(context, decoder)},
        {"CEconWearable", (context, decoder) => new CEconWearable(context, decoder)},
        {"CEntityDissolve", (context, decoder) => new CEntityDissolve(context, decoder)},
        {"CEntityFlame", (context, decoder) => new CEntityFlame(context, decoder)},
        {"CEntityInstance", (context, decoder) => new CEntityInstance(context, decoder)},
        {"CEnvCombinedLightProbeVolume", (context, decoder) => new CEnvCombinedLightProbeVolume(context, decoder)},
        {"CEnvCubemap", (context, decoder) => new CEnvCubemap(context, decoder)},
        {"CEnvCubemapBox", (context, decoder) => new CEnvCubemapBox(context, decoder)},
        {"CEnvCubemapFog", (context, decoder) => new CEnvCubemapFog(context, decoder)},
        {"CEnvDecal", (context, decoder) => new CEnvDecal(context, decoder)},
        {"CEnvDetailController", (context, decoder) => new CEnvDetailController(context, decoder)},
        {"CEnvLightProbeVolume", (context, decoder) => new CEnvLightProbeVolume(context, decoder)},
        {"CEnvParticleGlow", (context, decoder) => new CEnvParticleGlow(context, decoder)},
        {"CEnvProjectedTexture", (context, decoder) => new CEnvProjectedTexture(context, decoder)},
        {"CEnvScreenOverlay", (context, decoder) => new CEnvScreenOverlay(context, decoder)},
        {"CEnvSky", (context, decoder) => new CEnvSky(context, decoder)},
        {"CEnvVolumetricFogController", (context, decoder) => new CEnvVolumetricFogController(context, decoder)},
        {"CEnvVolumetricFogVolume", (context, decoder) => new CEnvVolumetricFogVolume(context, decoder)},
        {"CEnvWind", (context, decoder) => new CEnvWind(context, decoder)},
        {"CFireCrackerBlast", (context, decoder) => new CFireCrackerBlast(context, decoder)},
        {"CFireSmoke", (context, decoder) => new CFireSmoke(context, decoder)},
        {"CFish", (context, decoder) => new CFish(context, decoder)},
        {"CFists", (context, decoder) => new CFists(context, decoder)},
        {"CFlashbang", (context, decoder) => new CFlashbang(context, decoder)},
        {"CFlashbangProjectile", (context, decoder) => new CFlashbangProjectile(context, decoder)},
        {"CFogController", (context, decoder) => new CFogController(context, decoder)},
        {"CFootstepControl", (context, decoder) => new CFootstepControl(context, decoder)},
        {"CFuncBrush", (context, decoder) => new CFuncBrush(context, decoder)},
        {"CFuncConveyor", (context, decoder) => new CFuncConveyor(context, decoder)},
        {"CFuncElectrifiedVolume", (context, decoder) => new CFuncElectrifiedVolume(context, decoder)},
        {"CFuncLadder", (context, decoder) => new CFuncLadder(context, decoder)},
        {"CFuncMonitor", (context, decoder) => new CFuncMonitor(context, decoder)},
        {"CFuncMoveLinear", (context, decoder) => new CFuncMoveLinear(context, decoder)},
        {"CFuncRotating", (context, decoder) => new CFuncRotating(context, decoder)},
        {"CFuncTrackTrain", (context, decoder) => new CFuncTrackTrain(context, decoder)},
        {"CFuncWater", (context, decoder) => new CFuncWater(context, decoder)},
        {"CGameRulesProxy", (context, decoder) => new CGameRulesProxy(context, decoder)},
        {"CGradientFog", (context, decoder) => new CGradientFog(context, decoder)},
        {"CHandleTest", (context, decoder) => new CHandleTest(context, decoder)},
        {"CHEGrenade", (context, decoder) => new CHEGrenade(context, decoder)},
        {"CHEGrenadeProjectile", (context, decoder) => new CHEGrenadeProjectile(context, decoder)},
        {"CHostage", (context, decoder) => new CHostage(context, decoder)},
        {"CHostageCarriableProp", (context, decoder) => new CHostageCarriableProp(context, decoder)},
        {"CHostageExpresserShim", (context, decoder) => new CHostageExpresserShim(context, decoder)},
        {"CHostageRescueZone", (context, decoder) => new CHostageRescueZone(context, decoder)},
        {"CHostageRescueZoneShim", (context, decoder) => new CHostageRescueZoneShim(context, decoder)},
        {"CIncendiaryGrenade", (context, decoder) => new CIncendiaryGrenade(context, decoder)},
        {"CInferno", (context, decoder) => new CInferno(context, decoder)},
        {"CInfoInstructorHintHostageRescueZone", (context, decoder) => new CInfoInstructorHintHostageRescueZone(context, decoder)},
        {"CInfoLadderDismount", (context, decoder) => new CInfoLadderDismount(context, decoder)},
        {"CInfoOffscreenPanoramaTexture", (context, decoder) => new CInfoOffscreenPanoramaTexture(context, decoder)},
        {"CInfoVisibilityBox", (context, decoder) => new CInfoVisibilityBox(context, decoder)},
        {"CInfoWorldLayer", (context, decoder) => new CInfoWorldLayer(context, decoder)},
        {"CItem", (context, decoder) => new CItem(context, decoder)},
        {"CItem_Healthshot", (context, decoder) => new CItem_Healthshot(context, decoder)},
        {"CItemDogtags", (context, decoder) => new CItemDogtags(context, decoder)},
        {"CKnife", (context, decoder) => new CKnife(context, decoder)},
        {"CLightDirectionalEntity", (context, decoder) => new CLightDirectionalEntity(context, decoder)},
        {"CLightEntity", (context, decoder) => new CLightEntity(context, decoder)},
        {"CLightEnvironmentEntity", (context, decoder) => new CLightEnvironmentEntity(context, decoder)},
        {"CLightGlow", (context, decoder) => new CLightGlow(context, decoder)},
        {"CLightOrthoEntity", (context, decoder) => new CLightOrthoEntity(context, decoder)},
        {"CLightSpotEntity", (context, decoder) => new CLightSpotEntity(context, decoder)},
        {"CMapVetoPickController", (context, decoder) => new CMapVetoPickController(context, decoder)},
        {"CMelee", (context, decoder) => new CMelee(context, decoder)},
        {"CModelPointEntity", (context, decoder) => new CModelPointEntity(context, decoder)},
        {"CMolotovGrenade", (context, decoder) => new CMolotovGrenade(context, decoder)},
        {"CMolotovProjectile", (context, decoder) => new CMolotovProjectile(context, decoder)},
        {"COmniLight", (context, decoder) => new COmniLight(context, decoder)},
        {"CParticleSystem", (context, decoder) => new CParticleSystem(context, decoder)},
        {"CPathParticleRope", (context, decoder) => new CPathParticleRope(context, decoder)},
        {"CPhysBox", (context, decoder) => new CPhysBox(context, decoder)},
        {"CPhysicsProp", (context, decoder) => new CPhysicsProp(context, decoder)},
        {"CPhysicsPropMultiplayer", (context, decoder) => new CPhysicsPropMultiplayer(context, decoder)},
        {"CPhysMagnet", (context, decoder) => new CPhysMagnet(context, decoder)},
        {"CPlantedC4", (context, decoder) => new CPlantedC4(context, decoder)},
        {"CPlayerPing", (context, decoder) => new CPlayerPing(context, decoder)},
        {"CPlayerSprayDecal", (context, decoder) => new CPlayerSprayDecal(context, decoder)},
        {"CPlayerVisibility", (context, decoder) => new CPlayerVisibility(context, decoder)},
        {"CPointCamera", (context, decoder) => new CPointCamera(context, decoder)},
        {"CPointClientUIDialog", (context, decoder) => new CPointClientUIDialog(context, decoder)},
        {"CPointClientUIWorldPanel", (context, decoder) => new CPointClientUIWorldPanel(context, decoder)},
        {"CPointClientUIWorldTextPanel", (context, decoder) => new CPointClientUIWorldTextPanel(context, decoder)},
        {"CPointCommentaryNode", (context, decoder) => new CPointCommentaryNode(context, decoder)},
        {"CPointEntity", (context, decoder) => new CPointEntity(context, decoder)},
        {"CPointValueRemapper", (context, decoder) => new CPointValueRemapper(context, decoder)},
        {"CPointWorldText", (context, decoder) => new CPointWorldText(context, decoder)},
        {"CPostProcessingVolume", (context, decoder) => new CPostProcessingVolume(context, decoder)},
        {"CPrecipitation", (context, decoder) => new CPrecipitation(context, decoder)},
        {"CPrecipitationBlocker", (context, decoder) => new CPrecipitationBlocker(context, decoder)},
        {"CPredictedViewModel", (context, decoder) => new CPredictedViewModel(context, decoder)},
        {"CPropDoorRotating", (context, decoder) => new CPropDoorRotating(context, decoder)},
        {"CRagdollManager", (context, decoder) => new CRagdollManager(context, decoder)},
        {"CRagdollProp", (context, decoder) => new CRagdollProp(context, decoder)},
        {"CRagdollPropAttached", (context, decoder) => new CRagdollPropAttached(context, decoder)},
        {"CRectLight", (context, decoder) => new CRectLight(context, decoder)},
        {"CRopeKeyframe", (context, decoder) => new CRopeKeyframe(context, decoder)},
        {"CSceneEntity", (context, decoder) => new CSceneEntity(context, decoder)},
        {"CSensorGrenade", (context, decoder) => new CSensorGrenade(context, decoder)},
        {"CSensorGrenadeProjectile", (context, decoder) => new CSensorGrenadeProjectile(context, decoder)},
        {"CShatterGlassShardPhysics", (context, decoder) => new CShatterGlassShardPhysics(context, decoder)},
        {"CSkyCamera", (context, decoder) => new CSkyCamera(context, decoder)},
        {"CSmokeGrenade", (context, decoder) => new CSmokeGrenade(context, decoder)},
        {"CSmokeGrenadeProjectile", (context, decoder) => new CSmokeGrenadeProjectile(context, decoder)},
        {"CSoundAreaEntityBase", (context, decoder) => new CSoundAreaEntityBase(context, decoder)},
        {"CSoundAreaEntityOrientedBox", (context, decoder) => new CSoundAreaEntityOrientedBox(context, decoder)},
        {"CSoundAreaEntitySphere", (context, decoder) => new CSoundAreaEntitySphere(context, decoder)},
        {"CSoundOpvarSetAABBEntity", (context, decoder) => new CSoundOpvarSetAABBEntity(context, decoder)},
        {"CSoundOpvarSetAutoRoomEntity", (context, decoder) => new CSoundOpvarSetAutoRoomEntity(context, decoder)},
        {"CSoundOpvarSetOBBEntity", (context, decoder) => new CSoundOpvarSetOBBEntity(context, decoder)},
        {"CSoundOpvarSetOBBWindEntity", (context, decoder) => new CSoundOpvarSetOBBWindEntity(context, decoder)},
        {"CSoundOpvarSetPathCornerEntity", (context, decoder) => new CSoundOpvarSetPathCornerEntity(context, decoder)},
        {"CSoundOpvarSetPointBase", (context, decoder) => new CSoundOpvarSetPointBase(context, decoder)},
        {"CSoundOpvarSetPointEntity", (context, decoder) => new CSoundOpvarSetPointEntity(context, decoder)},
        {"CSpotlightEnd", (context, decoder) => new CSpotlightEnd(context, decoder)},
        {"CSprite", (context, decoder) => new CSprite(context, decoder)},
        {"CSpriteOriented", (context, decoder) => new CSpriteOriented(context, decoder)},
        {"CSun", (context, decoder) => new CSun(context, decoder)},
        {"CTablet", (context, decoder) => new CTablet(context, decoder)},
        {"CTeam", (context, decoder) => new CTeam(context, decoder)},
        {"CTextureBasedAnimatable", (context, decoder) => new CTextureBasedAnimatable(context, decoder)},
        {"CTonemapController2", (context, decoder) => new CTonemapController2(context, decoder)},
        {"CTriggerBuoyancy", (context, decoder) => new CTriggerBuoyancy(context, decoder)},
        {"CTriggerPhysics", (context, decoder) => new CTriggerPhysics(context, decoder)},
        {"CTriggerTripWire", (context, decoder) => new CTriggerTripWire(context, decoder)},
        {"CTriggerVolume", (context, decoder) => new CTriggerVolume(context, decoder)},
        {"CTripWireFire", (context, decoder) => new CTripWireFire(context, decoder)},
        {"CTripWireFireProjectile", (context, decoder) => new CTripWireFireProjectile(context, decoder)},
        {"CVoteController", (context, decoder) => new CVoteController(context, decoder)},
        {"CWaterBullet", (context, decoder) => new CWaterBullet(context, decoder)},
        {"CWeaponAug", (context, decoder) => new CWeaponAug(context, decoder)},
        {"CWeaponAWP", (context, decoder) => new CWeaponAWP(context, decoder)},
        {"CWeaponBaseItem", (context, decoder) => new CWeaponBaseItem(context, decoder)},
        {"CWeaponBizon", (context, decoder) => new CWeaponBizon(context, decoder)},
        {"CWeaponCZ75a", (context, decoder) => new CWeaponCZ75a(context, decoder)},
        {"CWeaponElite", (context, decoder) => new CWeaponElite(context, decoder)},
        {"CWeaponFamas", (context, decoder) => new CWeaponFamas(context, decoder)},
        {"CWeaponFiveSeven", (context, decoder) => new CWeaponFiveSeven(context, decoder)},
        {"CWeaponG3SG1", (context, decoder) => new CWeaponG3SG1(context, decoder)},
        {"CWeaponGalilAR", (context, decoder) => new CWeaponGalilAR(context, decoder)},
        {"CWeaponGlock", (context, decoder) => new CWeaponGlock(context, decoder)},
        {"CWeaponHKP2000", (context, decoder) => new CWeaponHKP2000(context, decoder)},
        {"CWeaponM249", (context, decoder) => new CWeaponM249(context, decoder)},
        {"CWeaponM4A1", (context, decoder) => new CWeaponM4A1(context, decoder)},
        {"CWeaponM4A1Silencer", (context, decoder) => new CWeaponM4A1Silencer(context, decoder)},
        {"CWeaponMAC10", (context, decoder) => new CWeaponMAC10(context, decoder)},
        {"CWeaponMag7", (context, decoder) => new CWeaponMag7(context, decoder)},
        {"CWeaponMP5SD", (context, decoder) => new CWeaponMP5SD(context, decoder)},
        {"CWeaponMP7", (context, decoder) => new CWeaponMP7(context, decoder)},
        {"CWeaponMP9", (context, decoder) => new CWeaponMP9(context, decoder)},
        {"CWeaponNegev", (context, decoder) => new CWeaponNegev(context, decoder)},
        {"CWeaponNOVA", (context, decoder) => new CWeaponNOVA(context, decoder)},
        {"CWeaponP250", (context, decoder) => new CWeaponP250(context, decoder)},
        {"CWeaponP90", (context, decoder) => new CWeaponP90(context, decoder)},
        {"CWeaponRevolver", (context, decoder) => new CWeaponRevolver(context, decoder)},
        {"CWeaponSawedoff", (context, decoder) => new CWeaponSawedoff(context, decoder)},
        {"CWeaponSCAR20", (context, decoder) => new CWeaponSCAR20(context, decoder)},
        {"CWeaponSG556", (context, decoder) => new CWeaponSG556(context, decoder)},
        {"CWeaponShield", (context, decoder) => new CWeaponShield(context, decoder)},
        {"CWeaponSSG08", (context, decoder) => new CWeaponSSG08(context, decoder)},
        {"CWeaponTaser", (context, decoder) => new CWeaponTaser(context, decoder)},
        {"CWeaponTec9", (context, decoder) => new CWeaponTec9(context, decoder)},
        {"CWeaponUMP45", (context, decoder) => new CWeaponUMP45(context, decoder)},
        {"CWeaponUSPSilencer", (context, decoder) => new CWeaponUSPSilencer(context, decoder)},
        {"CWeaponXM1014", (context, decoder) => new CWeaponXM1014(context, decoder)},
        {"CWeaponZoneRepulsor", (context, decoder) => new CWeaponZoneRepulsor(context, decoder)},
        {"CWorld", (context, decoder) => new CWorld(context, decoder)},
    };
}

internal partial class DecoderSet
{
    public bool TryGetDecoder(string className, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor), NotNullWhen(true)] out Type? classType, [NotNullWhen(true)] out SendNodeDecoder<object>? decoder)
    {
        switch (className)
        {
        case "audioparams_t":
        {
            var innerDecoder = GetDecoder<AudioParams>(new SerializerKey(className, 0));
            classType = typeof(AudioParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is AudioParams);
                var @this = Unsafe.As<AudioParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAK47":
        {
            var innerDecoder = GetDecoder<CAK47>(new SerializerKey(className, 0));
            classType = typeof(CAK47);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAK47);
                var @this = Unsafe.As<CAK47>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAnimGraphNetworkedVariables":
        {
            var innerDecoder = GetDecoder<CAnimGraphNetworkedVariables>(new SerializerKey(className, 0));
            classType = typeof(CAnimGraphNetworkedVariables);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAnimGraphNetworkedVariables);
                var @this = Unsafe.As<CAnimGraphNetworkedVariables>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeContainer":
        {
            var innerDecoder = GetDecoder<CAttributeContainer>(new SerializerKey(className, 0));
            classType = typeof(CAttributeContainer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeContainer);
                var @this = Unsafe.As<CAttributeContainer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeList":
        {
            var innerDecoder = GetDecoder<CAttributeList>(new SerializerKey(className, 0));
            classType = typeof(CAttributeList);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeList);
                var @this = Unsafe.As<CAttributeList>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CAttributeManager":
        {
            var innerDecoder = GetDecoder<CAttributeManager>(new SerializerKey(className, 0));
            classType = typeof(CAttributeManager);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CAttributeManager);
                var @this = Unsafe.As<CAttributeManager>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBarnLight":
        {
            var innerDecoder = GetDecoder<CBarnLight>(new SerializerKey(className, 0));
            classType = typeof(CBarnLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBarnLight);
                var @this = Unsafe.As<CBarnLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseAnimGraph":
        {
            var innerDecoder = GetDecoder<CBaseAnimGraph>(new SerializerKey(className, 0));
            classType = typeof(CBaseAnimGraph);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseAnimGraph);
                var @this = Unsafe.As<CBaseAnimGraph>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseAnimGraphController":
        {
            var innerDecoder = GetDecoder<CBaseAnimGraphController>(new SerializerKey(className, 0));
            classType = typeof(CBaseAnimGraphController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseAnimGraphController);
                var @this = Unsafe.As<CBaseAnimGraphController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseButton":
        {
            var innerDecoder = GetDecoder<CBaseButton>(new SerializerKey(className, 0));
            classType = typeof(CBaseButton);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseButton);
                var @this = Unsafe.As<CBaseButton>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseClientUIEntity":
        {
            var innerDecoder = GetDecoder<CBaseClientUIEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseClientUIEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseClientUIEntity);
                var @this = Unsafe.As<CBaseClientUIEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseCombatCharacter":
        {
            var innerDecoder = GetDecoder<CBaseCombatCharacter>(new SerializerKey(className, 0));
            classType = typeof(CBaseCombatCharacter);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseCombatCharacter);
                var @this = Unsafe.As<CBaseCombatCharacter>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseCSGrenade":
        {
            var innerDecoder = GetDecoder<CBaseCSGrenade>(new SerializerKey(className, 0));
            classType = typeof(CBaseCSGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseCSGrenade);
                var @this = Unsafe.As<CBaseCSGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseCSGrenadeProjectile":
        {
            var innerDecoder = GetDecoder<CBaseCSGrenadeProjectile>(new SerializerKey(className, 0));
            classType = typeof(CBaseCSGrenadeProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseCSGrenadeProjectile);
                var @this = Unsafe.As<CBaseCSGrenadeProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseDoor":
        {
            var innerDecoder = GetDecoder<CBaseDoor>(new SerializerKey(className, 0));
            classType = typeof(CBaseDoor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseDoor);
                var @this = Unsafe.As<CBaseDoor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseEntity":
        {
            var innerDecoder = GetDecoder<CBaseEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseEntity);
                var @this = Unsafe.As<CBaseEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseFire":
        {
            var innerDecoder = GetDecoder<CBaseFire>(new SerializerKey(className, 0));
            classType = typeof(CBaseFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseFire);
                var @this = Unsafe.As<CBaseFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseFlex":
        {
            var innerDecoder = GetDecoder<CBaseFlex>(new SerializerKey(className, 0));
            classType = typeof(CBaseFlex);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseFlex);
                var @this = Unsafe.As<CBaseFlex>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseGrenade":
        {
            var innerDecoder = GetDecoder<CBaseGrenade>(new SerializerKey(className, 0));
            classType = typeof(CBaseGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseGrenade);
                var @this = Unsafe.As<CBaseGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseModelEntity":
        {
            var innerDecoder = GetDecoder<CBaseModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CBaseModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseModelEntity);
                var @this = Unsafe.As<CBaseModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerController":
        {
            var innerDecoder = GetDecoder<CBasePlayerController>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerController);
                var @this = Unsafe.As<CBasePlayerController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerPawn":
        {
            var innerDecoder = GetDecoder<CBasePlayerPawn>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerPawn);
                var @this = Unsafe.As<CBasePlayerPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePlayerWeapon":
        {
            var innerDecoder = GetDecoder<CBasePlayerWeapon>(new SerializerKey(className, 0));
            classType = typeof(CBasePlayerWeapon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePlayerWeapon);
                var @this = Unsafe.As<CBasePlayerWeapon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseProp":
        {
            var innerDecoder = GetDecoder<CBaseProp>(new SerializerKey(className, 0));
            classType = typeof(CBaseProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseProp);
                var @this = Unsafe.As<CBaseProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBasePropDoor":
        {
            var innerDecoder = GetDecoder<CBasePropDoor>(new SerializerKey(className, 0));
            classType = typeof(CBasePropDoor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBasePropDoor);
                var @this = Unsafe.As<CBasePropDoor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseToggle":
        {
            var innerDecoder = GetDecoder<CBaseToggle>(new SerializerKey(className, 0));
            classType = typeof(CBaseToggle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseToggle);
                var @this = Unsafe.As<CBaseToggle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseTrigger":
        {
            var innerDecoder = GetDecoder<CBaseTrigger>(new SerializerKey(className, 0));
            classType = typeof(CBaseTrigger);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseTrigger);
                var @this = Unsafe.As<CBaseTrigger>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBaseViewModel":
        {
            var innerDecoder = GetDecoder<CBaseViewModel>(new SerializerKey(className, 0));
            classType = typeof(CBaseViewModel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBaseViewModel);
                var @this = Unsafe.As<CBaseViewModel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBeam":
        {
            var innerDecoder = GetDecoder<CBeam>(new SerializerKey(className, 0));
            classType = typeof(CBeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBeam);
                var @this = Unsafe.As<CBeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponent":
        {
            var innerDecoder = GetDecoder<CBodyComponent>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponent);
                var @this = Unsafe.As<CBodyComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentBaseAnimGraph":
        {
            var innerDecoder = GetDecoder<CBodyComponentBaseAnimGraph>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentBaseAnimGraph);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseAnimGraph);
                var @this = Unsafe.As<CBodyComponentBaseAnimGraph>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentBaseModelEntity":
        {
            var innerDecoder = GetDecoder<CBodyComponentBaseModelEntity>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentBaseModelEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentBaseModelEntity);
                var @this = Unsafe.As<CBodyComponentBaseModelEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentPoint":
        {
            var innerDecoder = GetDecoder<CBodyComponentPoint>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentPoint);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentPoint);
                var @this = Unsafe.As<CBodyComponentPoint>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBodyComponentSkeletonInstance":
        {
            var innerDecoder = GetDecoder<CBodyComponentSkeletonInstance>(new SerializerKey(className, 0));
            classType = typeof(CBodyComponentSkeletonInstance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBodyComponentSkeletonInstance);
                var @this = Unsafe.As<CBodyComponentSkeletonInstance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBombTarget":
        {
            var innerDecoder = GetDecoder<CBombTarget>(new SerializerKey(className, 0));
            classType = typeof(CBombTarget);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBombTarget);
                var @this = Unsafe.As<CBombTarget>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreachCharge":
        {
            var innerDecoder = GetDecoder<CBreachCharge>(new SerializerKey(className, 0));
            classType = typeof(CBreachCharge);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreachCharge);
                var @this = Unsafe.As<CBreachCharge>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreachChargeProjectile":
        {
            var innerDecoder = GetDecoder<CBreachChargeProjectile>(new SerializerKey(className, 0));
            classType = typeof(CBreachChargeProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreachChargeProjectile);
                var @this = Unsafe.As<CBreachChargeProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreakable":
        {
            var innerDecoder = GetDecoder<CBreakable>(new SerializerKey(className, 0));
            classType = typeof(CBreakable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreakable);
                var @this = Unsafe.As<CBreakable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBreakableProp":
        {
            var innerDecoder = GetDecoder<CBreakableProp>(new SerializerKey(className, 0));
            classType = typeof(CBreakableProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBreakableProp);
                var @this = Unsafe.As<CBreakableProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBumpMine":
        {
            var innerDecoder = GetDecoder<CBumpMine>(new SerializerKey(className, 0));
            classType = typeof(CBumpMine);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBumpMine);
                var @this = Unsafe.As<CBumpMine>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CBumpMineProjectile":
        {
            var innerDecoder = GetDecoder<CBumpMineProjectile>(new SerializerKey(className, 0));
            classType = typeof(CBumpMineProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CBumpMineProjectile);
                var @this = Unsafe.As<CBumpMineProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CC4":
        {
            var innerDecoder = GetDecoder<CC4>(new SerializerKey(className, 0));
            classType = typeof(CC4);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CC4);
                var @this = Unsafe.As<CC4>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CChicken":
        {
            var innerDecoder = GetDecoder<CChicken>(new SerializerKey(className, 0));
            classType = typeof(CChicken);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CChicken);
                var @this = Unsafe.As<CChicken>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCollisionProperty":
        {
            var innerDecoder = GetDecoder<CCollisionProperty>(new SerializerKey(className, 0));
            classType = typeof(CCollisionProperty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCollisionProperty);
                var @this = Unsafe.As<CCollisionProperty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CColorCorrection":
        {
            var innerDecoder = GetDecoder<CColorCorrection>(new SerializerKey(className, 0));
            classType = typeof(CColorCorrection);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CColorCorrection);
                var @this = Unsafe.As<CColorCorrection>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CColorCorrectionVolume":
        {
            var innerDecoder = GetDecoder<CColorCorrectionVolume>(new SerializerKey(className, 0));
            classType = typeof(CColorCorrectionVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CColorCorrectionVolume);
                var @this = Unsafe.As<CColorCorrectionVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameModeRules":
        {
            var innerDecoder = GetDecoder<CCSGameModeRules>(new SerializerKey(className, 0));
            classType = typeof(CCSGameModeRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules);
                var @this = Unsafe.As<CCSGameModeRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameModeRules_ArmsRace":
        {
            var innerDecoder = GetDecoder<CCSGameModeRules_ArmsRace>(new SerializerKey(className, 0));
            classType = typeof(CCSGameModeRules_ArmsRace);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_ArmsRace);
                var @this = Unsafe.As<CCSGameModeRules_ArmsRace>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameModeRules_Deathmatch":
        {
            var innerDecoder = GetDecoder<CCSGameModeRules_Deathmatch>(new SerializerKey(className, 0));
            classType = typeof(CCSGameModeRules_Deathmatch);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_Deathmatch);
                var @this = Unsafe.As<CCSGameModeRules_Deathmatch>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameModeRules_Noop":
        {
            var innerDecoder = GetDecoder<CCSGameModeRules_Noop>(new SerializerKey(className, 0));
            classType = typeof(CCSGameModeRules_Noop);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameModeRules_Noop);
                var @this = Unsafe.As<CCSGameModeRules_Noop>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameRules":
        {
            var innerDecoder = GetDecoder<CCSGameRules>(new SerializerKey(className, 0));
            classType = typeof(CCSGameRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameRules);
                var @this = Unsafe.As<CCSGameRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGameRulesProxy":
        {
            var innerDecoder = GetDecoder<CCSGameRulesProxy>(new SerializerKey(className, 0));
            classType = typeof(CCSGameRulesProxy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGameRulesProxy);
                var @this = Unsafe.As<CCSGameRulesProxy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamIntroCharacterPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamIntroCharacterPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamIntroCharacterPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamIntroCharacterPosition);
                var @this = Unsafe.As<CCSGO_TeamIntroCharacterPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamIntroCounterTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamIntroCounterTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamIntroCounterTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamIntroCounterTerroristPosition);
                var @this = Unsafe.As<CCSGO_TeamIntroCounterTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamIntroTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamIntroTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamIntroTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamIntroTerroristPosition);
                var @this = Unsafe.As<CCSGO_TeamIntroTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamPreviewCharacterPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamPreviewCharacterPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamPreviewCharacterPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamPreviewCharacterPosition);
                var @this = Unsafe.As<CCSGO_TeamPreviewCharacterPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamSelectCharacterPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamSelectCharacterPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamSelectCharacterPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamSelectCharacterPosition);
                var @this = Unsafe.As<CCSGO_TeamSelectCharacterPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamSelectCounterTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamSelectCounterTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamSelectCounterTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamSelectCounterTerroristPosition);
                var @this = Unsafe.As<CCSGO_TeamSelectCounterTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_TeamSelectTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_TeamSelectTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_TeamSelectTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_TeamSelectTerroristPosition);
                var @this = Unsafe.As<CCSGO_TeamSelectTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_WingmanIntroCharacterPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_WingmanIntroCharacterPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_WingmanIntroCharacterPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_WingmanIntroCharacterPosition);
                var @this = Unsafe.As<CCSGO_WingmanIntroCharacterPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_WingmanIntroCounterTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_WingmanIntroCounterTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_WingmanIntroCounterTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_WingmanIntroCounterTerroristPosition);
                var @this = Unsafe.As<CCSGO_WingmanIntroCounterTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGO_WingmanIntroTerroristPosition":
        {
            var innerDecoder = GetDecoder<CCSGO_WingmanIntroTerroristPosition>(new SerializerKey(className, 0));
            classType = typeof(CCSGO_WingmanIntroTerroristPosition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGO_WingmanIntroTerroristPosition);
                var @this = Unsafe.As<CCSGO_WingmanIntroTerroristPosition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSGOViewModel":
        {
            var innerDecoder = GetDecoder<CCSGOViewModel>(new SerializerKey(className, 0));
            classType = typeof(CCSGOViewModel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSGOViewModel);
                var @this = Unsafe.As<CCSGOViewModel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSMinimapBoundary":
        {
            var innerDecoder = GetDecoder<CCSMinimapBoundary>(new SerializerKey(className, 0));
            classType = typeof(CCSMinimapBoundary);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSMinimapBoundary);
                var @this = Unsafe.As<CCSMinimapBoundary>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserver_CameraServices":
        {
            var innerDecoder = GetDecoder<CCSObserver_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CCSObserver_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_CameraServices);
                var @this = Unsafe.As<CCSObserver_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserver_MovementServices":
        {
            var innerDecoder = GetDecoder<CCSObserver_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CCSObserver_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_MovementServices);
                var @this = Unsafe.As<CCSObserver_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserver_ObserverServices":
        {
            var innerDecoder = GetDecoder<CCSObserver_ObserverServices>(new SerializerKey(className, 0));
            classType = typeof(CCSObserver_ObserverServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_ObserverServices);
                var @this = Unsafe.As<CCSObserver_ObserverServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserver_UseServices":
        {
            var innerDecoder = GetDecoder<CCSObserver_UseServices>(new SerializerKey(className, 0));
            classType = typeof(CCSObserver_UseServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_UseServices);
                var @this = Unsafe.As<CCSObserver_UseServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserver_ViewModelServices":
        {
            var innerDecoder = GetDecoder<CCSObserver_ViewModelServices>(new SerializerKey(className, 0));
            classType = typeof(CCSObserver_ViewModelServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserver_ViewModelServices);
                var @this = Unsafe.As<CCSObserver_ViewModelServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSObserverPawn":
        {
            var innerDecoder = GetDecoder<CCSObserverPawn>(new SerializerKey(className, 0));
            classType = typeof(CCSObserverPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSObserverPawn);
                var @this = Unsafe.As<CCSObserverPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_ActionTrackingServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_ActionTrackingServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_ActionTrackingServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_ActionTrackingServices);
                var @this = Unsafe.As<CCSPlayer_ActionTrackingServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_BulletServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_BulletServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_BulletServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_BulletServices);
                var @this = Unsafe.As<CCSPlayer_BulletServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_BuyServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_BuyServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_BuyServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_BuyServices);
                var @this = Unsafe.As<CCSPlayer_BuyServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_CameraServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_CameraServices);
                var @this = Unsafe.As<CCSPlayer_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_HostageServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_HostageServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_HostageServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_HostageServices);
                var @this = Unsafe.As<CCSPlayer_HostageServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_ItemServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_ItemServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_ItemServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_ItemServices);
                var @this = Unsafe.As<CCSPlayer_ItemServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_MovementServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_MovementServices);
                var @this = Unsafe.As<CCSPlayer_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_PingServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_PingServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_PingServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_PingServices);
                var @this = Unsafe.As<CCSPlayer_PingServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_UseServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_UseServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_UseServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_UseServices);
                var @this = Unsafe.As<CCSPlayer_UseServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_ViewModelServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_ViewModelServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_ViewModelServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_ViewModelServices);
                var @this = Unsafe.As<CCSPlayer_ViewModelServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_WaterServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_WaterServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_WaterServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_WaterServices);
                var @this = Unsafe.As<CCSPlayer_WaterServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayer_WeaponServices":
        {
            var innerDecoder = GetDecoder<CCSPlayer_WeaponServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayer_WeaponServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayer_WeaponServices);
                var @this = Unsafe.As<CCSPlayer_WeaponServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerBase_CameraServices":
        {
            var innerDecoder = GetDecoder<CCSPlayerBase_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerBase_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerBase_CameraServices);
                var @this = Unsafe.As<CCSPlayerBase_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerController":
        {
            var innerDecoder = GetDecoder<CCSPlayerController>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerController);
                var @this = Unsafe.As<CCSPlayerController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerController_ActionTrackingServices":
        {
            var innerDecoder = GetDecoder<CCSPlayerController_ActionTrackingServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerController_ActionTrackingServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerController_ActionTrackingServices);
                var @this = Unsafe.As<CCSPlayerController_ActionTrackingServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerController_DamageServices":
        {
            var innerDecoder = GetDecoder<CCSPlayerController_DamageServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerController_DamageServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerController_DamageServices);
                var @this = Unsafe.As<CCSPlayerController_DamageServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerController_InGameMoneyServices":
        {
            var innerDecoder = GetDecoder<CCSPlayerController_InGameMoneyServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerController_InGameMoneyServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerController_InGameMoneyServices);
                var @this = Unsafe.As<CCSPlayerController_InGameMoneyServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerController_InventoryServices":
        {
            var innerDecoder = GetDecoder<CCSPlayerController_InventoryServices>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerController_InventoryServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerController_InventoryServices);
                var @this = Unsafe.As<CCSPlayerController_InventoryServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerPawn":
        {
            var innerDecoder = GetDecoder<CCSPlayerPawn>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerPawn);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerPawn);
                var @this = Unsafe.As<CCSPlayerPawn>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerPawnBase":
        {
            var innerDecoder = GetDecoder<CCSPlayerPawnBase>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerPawnBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerPawnBase);
                var @this = Unsafe.As<CCSPlayerPawnBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSPlayerResource":
        {
            var innerDecoder = GetDecoder<CCSPlayerResource>(new SerializerKey(className, 0));
            classType = typeof(CCSPlayerResource);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSPlayerResource);
                var @this = Unsafe.As<CCSPlayerResource>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSTeam":
        {
            var innerDecoder = GetDecoder<CCSTeam>(new SerializerKey(className, 0));
            classType = typeof(CCSTeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSTeam);
                var @this = Unsafe.As<CCSTeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSWeaponBase":
        {
            var innerDecoder = GetDecoder<CCSWeaponBase>(new SerializerKey(className, 0));
            classType = typeof(CCSWeaponBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSWeaponBase);
                var @this = Unsafe.As<CCSWeaponBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CCSWeaponBaseGun":
        {
            var innerDecoder = GetDecoder<CCSWeaponBaseGun>(new SerializerKey(className, 0));
            classType = typeof(CCSWeaponBaseGun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CCSWeaponBaseGun);
                var @this = Unsafe.As<CCSWeaponBaseGun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDamageRecord":
        {
            var innerDecoder = GetDecoder<CDamageRecord>(new SerializerKey(className, 0));
            classType = typeof(CDamageRecord);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDamageRecord);
                var @this = Unsafe.As<CDamageRecord>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDEagle":
        {
            var innerDecoder = GetDecoder<CDEagle>(new SerializerKey(className, 0));
            classType = typeof(CDEagle);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDEagle);
                var @this = Unsafe.As<CDEagle>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDecoyGrenade":
        {
            var innerDecoder = GetDecoder<CDecoyGrenade>(new SerializerKey(className, 0));
            classType = typeof(CDecoyGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDecoyGrenade);
                var @this = Unsafe.As<CDecoyGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDecoyProjectile":
        {
            var innerDecoder = GetDecoder<CDecoyProjectile>(new SerializerKey(className, 0));
            classType = typeof(CDecoyProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDecoyProjectile);
                var @this = Unsafe.As<CDecoyProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDynamicLight":
        {
            var innerDecoder = GetDecoder<CDynamicLight>(new SerializerKey(className, 0));
            classType = typeof(CDynamicLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDynamicLight);
                var @this = Unsafe.As<CDynamicLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CDynamicProp":
        {
            var innerDecoder = GetDecoder<CDynamicProp>(new SerializerKey(className, 0));
            classType = typeof(CDynamicProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CDynamicProp);
                var @this = Unsafe.As<CDynamicProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconEntity":
        {
            var innerDecoder = GetDecoder<CEconEntity>(new SerializerKey(className, 0));
            classType = typeof(CEconEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconEntity);
                var @this = Unsafe.As<CEconEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconItemAttribute":
        {
            var innerDecoder = GetDecoder<CEconItemAttribute>(new SerializerKey(className, 0));
            classType = typeof(CEconItemAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconItemAttribute);
                var @this = Unsafe.As<CEconItemAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconItemView":
        {
            var innerDecoder = GetDecoder<CEconItemView>(new SerializerKey(className, 0));
            classType = typeof(CEconItemView);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconItemView);
                var @this = Unsafe.As<CEconItemView>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEconWearable":
        {
            var innerDecoder = GetDecoder<CEconWearable>(new SerializerKey(className, 0));
            classType = typeof(CEconWearable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEconWearable);
                var @this = Unsafe.As<CEconWearable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityComponent":
        {
            var innerDecoder = GetDecoder<CEntityComponent>(new SerializerKey(className, 0));
            classType = typeof(CEntityComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityComponent);
                var @this = Unsafe.As<CEntityComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityDissolve":
        {
            var innerDecoder = GetDecoder<CEntityDissolve>(new SerializerKey(className, 0));
            classType = typeof(CEntityDissolve);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityDissolve);
                var @this = Unsafe.As<CEntityDissolve>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityFlame":
        {
            var innerDecoder = GetDecoder<CEntityFlame>(new SerializerKey(className, 0));
            classType = typeof(CEntityFlame);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityFlame);
                var @this = Unsafe.As<CEntityFlame>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityIdentity":
        {
            var innerDecoder = GetDecoder<CEntityIdentity>(new SerializerKey(className, 0));
            classType = typeof(CEntityIdentity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityIdentity);
                var @this = Unsafe.As<CEntityIdentity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEntityInstance":
        {
            var innerDecoder = GetDecoder<CEntityInstance>(new SerializerKey(className, 0));
            classType = typeof(CEntityInstance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEntityInstance);
                var @this = Unsafe.As<CEntityInstance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCombinedLightProbeVolume":
        {
            var innerDecoder = GetDecoder<CEnvCombinedLightProbeVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvCombinedLightProbeVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCombinedLightProbeVolume);
                var @this = Unsafe.As<CEnvCombinedLightProbeVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCubemap":
        {
            var innerDecoder = GetDecoder<CEnvCubemap>(new SerializerKey(className, 0));
            classType = typeof(CEnvCubemap);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCubemap);
                var @this = Unsafe.As<CEnvCubemap>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCubemapBox":
        {
            var innerDecoder = GetDecoder<CEnvCubemapBox>(new SerializerKey(className, 0));
            classType = typeof(CEnvCubemapBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCubemapBox);
                var @this = Unsafe.As<CEnvCubemapBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvCubemapFog":
        {
            var innerDecoder = GetDecoder<CEnvCubemapFog>(new SerializerKey(className, 0));
            classType = typeof(CEnvCubemapFog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvCubemapFog);
                var @this = Unsafe.As<CEnvCubemapFog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvDecal":
        {
            var innerDecoder = GetDecoder<CEnvDecal>(new SerializerKey(className, 0));
            classType = typeof(CEnvDecal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvDecal);
                var @this = Unsafe.As<CEnvDecal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvDetailController":
        {
            var innerDecoder = GetDecoder<CEnvDetailController>(new SerializerKey(className, 0));
            classType = typeof(CEnvDetailController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvDetailController);
                var @this = Unsafe.As<CEnvDetailController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvLightProbeVolume":
        {
            var innerDecoder = GetDecoder<CEnvLightProbeVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvLightProbeVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvLightProbeVolume);
                var @this = Unsafe.As<CEnvLightProbeVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvParticleGlow":
        {
            var innerDecoder = GetDecoder<CEnvParticleGlow>(new SerializerKey(className, 0));
            classType = typeof(CEnvParticleGlow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvParticleGlow);
                var @this = Unsafe.As<CEnvParticleGlow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvProjectedTexture":
        {
            var innerDecoder = GetDecoder<CEnvProjectedTexture>(new SerializerKey(className, 0));
            classType = typeof(CEnvProjectedTexture);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvProjectedTexture);
                var @this = Unsafe.As<CEnvProjectedTexture>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvScreenOverlay":
        {
            var innerDecoder = GetDecoder<CEnvScreenOverlay>(new SerializerKey(className, 0));
            classType = typeof(CEnvScreenOverlay);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvScreenOverlay);
                var @this = Unsafe.As<CEnvScreenOverlay>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvSky":
        {
            var innerDecoder = GetDecoder<CEnvSky>(new SerializerKey(className, 0));
            classType = typeof(CEnvSky);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvSky);
                var @this = Unsafe.As<CEnvSky>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvVolumetricFogController":
        {
            var innerDecoder = GetDecoder<CEnvVolumetricFogController>(new SerializerKey(className, 0));
            classType = typeof(CEnvVolumetricFogController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvVolumetricFogController);
                var @this = Unsafe.As<CEnvVolumetricFogController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvVolumetricFogVolume":
        {
            var innerDecoder = GetDecoder<CEnvVolumetricFogVolume>(new SerializerKey(className, 0));
            classType = typeof(CEnvVolumetricFogVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvVolumetricFogVolume);
                var @this = Unsafe.As<CEnvVolumetricFogVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvWind":
        {
            var innerDecoder = GetDecoder<CEnvWind>(new SerializerKey(className, 0));
            classType = typeof(CEnvWind);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvWind);
                var @this = Unsafe.As<CEnvWind>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CEnvWindShared":
        {
            var innerDecoder = GetDecoder<CEnvWindShared>(new SerializerKey(className, 0));
            classType = typeof(CEnvWindShared);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CEnvWindShared);
                var @this = Unsafe.As<CEnvWindShared>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFireCrackerBlast":
        {
            var innerDecoder = GetDecoder<CFireCrackerBlast>(new SerializerKey(className, 0));
            classType = typeof(CFireCrackerBlast);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFireCrackerBlast);
                var @this = Unsafe.As<CFireCrackerBlast>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFireSmoke":
        {
            var innerDecoder = GetDecoder<CFireSmoke>(new SerializerKey(className, 0));
            classType = typeof(CFireSmoke);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFireSmoke);
                var @this = Unsafe.As<CFireSmoke>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFish":
        {
            var innerDecoder = GetDecoder<CFish>(new SerializerKey(className, 0));
            classType = typeof(CFish);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFish);
                var @this = Unsafe.As<CFish>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFists":
        {
            var innerDecoder = GetDecoder<CFists>(new SerializerKey(className, 0));
            classType = typeof(CFists);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFists);
                var @this = Unsafe.As<CFists>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFlashbang":
        {
            var innerDecoder = GetDecoder<CFlashbang>(new SerializerKey(className, 0));
            classType = typeof(CFlashbang);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFlashbang);
                var @this = Unsafe.As<CFlashbang>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFlashbangProjectile":
        {
            var innerDecoder = GetDecoder<CFlashbangProjectile>(new SerializerKey(className, 0));
            classType = typeof(CFlashbangProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFlashbangProjectile);
                var @this = Unsafe.As<CFlashbangProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFogController":
        {
            var innerDecoder = GetDecoder<CFogController>(new SerializerKey(className, 0));
            classType = typeof(CFogController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFogController);
                var @this = Unsafe.As<CFogController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFootstepControl":
        {
            var innerDecoder = GetDecoder<CFootstepControl>(new SerializerKey(className, 0));
            classType = typeof(CFootstepControl);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFootstepControl);
                var @this = Unsafe.As<CFootstepControl>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncBrush":
        {
            var innerDecoder = GetDecoder<CFuncBrush>(new SerializerKey(className, 0));
            classType = typeof(CFuncBrush);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncBrush);
                var @this = Unsafe.As<CFuncBrush>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncConveyor":
        {
            var innerDecoder = GetDecoder<CFuncConveyor>(new SerializerKey(className, 0));
            classType = typeof(CFuncConveyor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncConveyor);
                var @this = Unsafe.As<CFuncConveyor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncElectrifiedVolume":
        {
            var innerDecoder = GetDecoder<CFuncElectrifiedVolume>(new SerializerKey(className, 0));
            classType = typeof(CFuncElectrifiedVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncElectrifiedVolume);
                var @this = Unsafe.As<CFuncElectrifiedVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncLadder":
        {
            var innerDecoder = GetDecoder<CFuncLadder>(new SerializerKey(className, 0));
            classType = typeof(CFuncLadder);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncLadder);
                var @this = Unsafe.As<CFuncLadder>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncMonitor":
        {
            var innerDecoder = GetDecoder<CFuncMonitor>(new SerializerKey(className, 0));
            classType = typeof(CFuncMonitor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncMonitor);
                var @this = Unsafe.As<CFuncMonitor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncMoveLinear":
        {
            var innerDecoder = GetDecoder<CFuncMoveLinear>(new SerializerKey(className, 0));
            classType = typeof(CFuncMoveLinear);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncMoveLinear);
                var @this = Unsafe.As<CFuncMoveLinear>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncRotating":
        {
            var innerDecoder = GetDecoder<CFuncRotating>(new SerializerKey(className, 0));
            classType = typeof(CFuncRotating);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncRotating);
                var @this = Unsafe.As<CFuncRotating>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncTrackTrain":
        {
            var innerDecoder = GetDecoder<CFuncTrackTrain>(new SerializerKey(className, 0));
            classType = typeof(CFuncTrackTrain);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncTrackTrain);
                var @this = Unsafe.As<CFuncTrackTrain>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CFuncWater":
        {
            var innerDecoder = GetDecoder<CFuncWater>(new SerializerKey(className, 0));
            classType = typeof(CFuncWater);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CFuncWater);
                var @this = Unsafe.As<CFuncWater>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameRules":
        {
            var innerDecoder = GetDecoder<CGameRules>(new SerializerKey(className, 0));
            classType = typeof(CGameRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameRules);
                var @this = Unsafe.As<CGameRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameRulesProxy":
        {
            var innerDecoder = GetDecoder<CGameRulesProxy>(new SerializerKey(className, 0));
            classType = typeof(CGameRulesProxy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameRulesProxy);
                var @this = Unsafe.As<CGameRulesProxy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGameSceneNode":
        {
            var innerDecoder = GetDecoder<CGameSceneNode>(new SerializerKey(className, 0));
            classType = typeof(CGameSceneNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGameSceneNode);
                var @this = Unsafe.As<CGameSceneNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGlowProperty":
        {
            var innerDecoder = GetDecoder<CGlowProperty>(new SerializerKey(className, 0));
            classType = typeof(CGlowProperty);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGlowProperty);
                var @this = Unsafe.As<CGlowProperty>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CGradientFog":
        {
            var innerDecoder = GetDecoder<CGradientFog>(new SerializerKey(className, 0));
            classType = typeof(CGradientFog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CGradientFog);
                var @this = Unsafe.As<CGradientFog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHandleTest":
        {
            var innerDecoder = GetDecoder<CHandleTest>(new SerializerKey(className, 0));
            classType = typeof(CHandleTest);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHandleTest);
                var @this = Unsafe.As<CHandleTest>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHEGrenade":
        {
            var innerDecoder = GetDecoder<CHEGrenade>(new SerializerKey(className, 0));
            classType = typeof(CHEGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHEGrenade);
                var @this = Unsafe.As<CHEGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHEGrenadeProjectile":
        {
            var innerDecoder = GetDecoder<CHEGrenadeProjectile>(new SerializerKey(className, 0));
            classType = typeof(CHEGrenadeProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHEGrenadeProjectile);
                var @this = Unsafe.As<CHEGrenadeProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHitboxComponent":
        {
            var innerDecoder = GetDecoder<CHitboxComponent>(new SerializerKey(className, 0));
            classType = typeof(CHitboxComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHitboxComponent);
                var @this = Unsafe.As<CHitboxComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHostage":
        {
            var innerDecoder = GetDecoder<CHostage>(new SerializerKey(className, 0));
            classType = typeof(CHostage);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHostage);
                var @this = Unsafe.As<CHostage>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHostageCarriableProp":
        {
            var innerDecoder = GetDecoder<CHostageCarriableProp>(new SerializerKey(className, 0));
            classType = typeof(CHostageCarriableProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHostageCarriableProp);
                var @this = Unsafe.As<CHostageCarriableProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHostageExpresserShim":
        {
            var innerDecoder = GetDecoder<CHostageExpresserShim>(new SerializerKey(className, 0));
            classType = typeof(CHostageExpresserShim);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHostageExpresserShim);
                var @this = Unsafe.As<CHostageExpresserShim>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHostageRescueZone":
        {
            var innerDecoder = GetDecoder<CHostageRescueZone>(new SerializerKey(className, 0));
            classType = typeof(CHostageRescueZone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHostageRescueZone);
                var @this = Unsafe.As<CHostageRescueZone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CHostageRescueZoneShim":
        {
            var innerDecoder = GetDecoder<CHostageRescueZoneShim>(new SerializerKey(className, 0));
            classType = typeof(CHostageRescueZoneShim);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CHostageRescueZoneShim);
                var @this = Unsafe.As<CHostageRescueZoneShim>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CIncendiaryGrenade":
        {
            var innerDecoder = GetDecoder<CIncendiaryGrenade>(new SerializerKey(className, 0));
            classType = typeof(CIncendiaryGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CIncendiaryGrenade);
                var @this = Unsafe.As<CIncendiaryGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInferno":
        {
            var innerDecoder = GetDecoder<CInferno>(new SerializerKey(className, 0));
            classType = typeof(CInferno);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInferno);
                var @this = Unsafe.As<CInferno>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoInstructorHintHostageRescueZone":
        {
            var innerDecoder = GetDecoder<CInfoInstructorHintHostageRescueZone>(new SerializerKey(className, 0));
            classType = typeof(CInfoInstructorHintHostageRescueZone);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoInstructorHintHostageRescueZone);
                var @this = Unsafe.As<CInfoInstructorHintHostageRescueZone>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoLadderDismount":
        {
            var innerDecoder = GetDecoder<CInfoLadderDismount>(new SerializerKey(className, 0));
            classType = typeof(CInfoLadderDismount);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoLadderDismount);
                var @this = Unsafe.As<CInfoLadderDismount>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoOffscreenPanoramaTexture":
        {
            var innerDecoder = GetDecoder<CInfoOffscreenPanoramaTexture>(new SerializerKey(className, 0));
            classType = typeof(CInfoOffscreenPanoramaTexture);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoOffscreenPanoramaTexture);
                var @this = Unsafe.As<CInfoOffscreenPanoramaTexture>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoVisibilityBox":
        {
            var innerDecoder = GetDecoder<CInfoVisibilityBox>(new SerializerKey(className, 0));
            classType = typeof(CInfoVisibilityBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoVisibilityBox);
                var @this = Unsafe.As<CInfoVisibilityBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CInfoWorldLayer":
        {
            var innerDecoder = GetDecoder<CInfoWorldLayer>(new SerializerKey(className, 0));
            classType = typeof(CInfoWorldLayer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CInfoWorldLayer);
                var @this = Unsafe.As<CInfoWorldLayer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem":
        {
            var innerDecoder = GetDecoder<CItem>(new SerializerKey(className, 0));
            classType = typeof(CItem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem);
                var @this = Unsafe.As<CItem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItem_Healthshot":
        {
            var innerDecoder = GetDecoder<CItem_Healthshot>(new SerializerKey(className, 0));
            classType = typeof(CItem_Healthshot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItem_Healthshot);
                var @this = Unsafe.As<CItem_Healthshot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CItemDogtags":
        {
            var innerDecoder = GetDecoder<CItemDogtags>(new SerializerKey(className, 0));
            classType = typeof(CItemDogtags);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CItemDogtags);
                var @this = Unsafe.As<CItemDogtags>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CKnife":
        {
            var innerDecoder = GetDecoder<CKnife>(new SerializerKey(className, 0));
            classType = typeof(CKnife);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CKnife);
                var @this = Unsafe.As<CKnife>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightComponent":
        {
            var innerDecoder = GetDecoder<CLightComponent>(new SerializerKey(className, 0));
            classType = typeof(CLightComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightComponent);
                var @this = Unsafe.As<CLightComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightDirectionalEntity":
        {
            var innerDecoder = GetDecoder<CLightDirectionalEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightDirectionalEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightDirectionalEntity);
                var @this = Unsafe.As<CLightDirectionalEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightEntity":
        {
            var innerDecoder = GetDecoder<CLightEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightEntity);
                var @this = Unsafe.As<CLightEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightEnvironmentEntity":
        {
            var innerDecoder = GetDecoder<CLightEnvironmentEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightEnvironmentEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightEnvironmentEntity);
                var @this = Unsafe.As<CLightEnvironmentEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightGlow":
        {
            var innerDecoder = GetDecoder<CLightGlow>(new SerializerKey(className, 0));
            classType = typeof(CLightGlow);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightGlow);
                var @this = Unsafe.As<CLightGlow>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightOrthoEntity":
        {
            var innerDecoder = GetDecoder<CLightOrthoEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightOrthoEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightOrthoEntity);
                var @this = Unsafe.As<CLightOrthoEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CLightSpotEntity":
        {
            var innerDecoder = GetDecoder<CLightSpotEntity>(new SerializerKey(className, 0));
            classType = typeof(CLightSpotEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CLightSpotEntity);
                var @this = Unsafe.As<CLightSpotEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMapVetoPickController":
        {
            var innerDecoder = GetDecoder<CMapVetoPickController>(new SerializerKey(className, 0));
            classType = typeof(CMapVetoPickController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMapVetoPickController);
                var @this = Unsafe.As<CMapVetoPickController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMelee":
        {
            var innerDecoder = GetDecoder<CMelee>(new SerializerKey(className, 0));
            classType = typeof(CMelee);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMelee);
                var @this = Unsafe.As<CMelee>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CModelPointEntity":
        {
            var innerDecoder = GetDecoder<CModelPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CModelPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CModelPointEntity);
                var @this = Unsafe.As<CModelPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CModelState":
        {
            var innerDecoder = GetDecoder<CModelState>(new SerializerKey(className, 0));
            classType = typeof(CModelState);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CModelState);
                var @this = Unsafe.As<CModelState>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMolotovGrenade":
        {
            var innerDecoder = GetDecoder<CMolotovGrenade>(new SerializerKey(className, 0));
            classType = typeof(CMolotovGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMolotovGrenade);
                var @this = Unsafe.As<CMolotovGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMolotovProjectile":
        {
            var innerDecoder = GetDecoder<CMolotovProjectile>(new SerializerKey(className, 0));
            classType = typeof(CMolotovProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMolotovProjectile);
                var @this = Unsafe.As<CMolotovProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CMultiplayRules":
        {
            var innerDecoder = GetDecoder<CMultiplayRules>(new SerializerKey(className, 0));
            classType = typeof(CMultiplayRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CMultiplayRules);
                var @this = Unsafe.As<CMultiplayRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkOriginCellCoordQuantizedVector":
        {
            var innerDecoder = GetDecoder<CNetworkOriginCellCoordQuantizedVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkOriginCellCoordQuantizedVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkOriginCellCoordQuantizedVector);
                var @this = Unsafe.As<CNetworkOriginCellCoordQuantizedVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkVelocityVector":
        {
            var innerDecoder = GetDecoder<CNetworkVelocityVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkVelocityVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkVelocityVector);
                var @this = Unsafe.As<CNetworkVelocityVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CNetworkViewOffsetVector":
        {
            var innerDecoder = GetDecoder<CNetworkViewOffsetVector>(new SerializerKey(className, 0));
            classType = typeof(CNetworkViewOffsetVector);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CNetworkViewOffsetVector);
                var @this = Unsafe.As<CNetworkViewOffsetVector>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "COmniLight":
        {
            var innerDecoder = GetDecoder<COmniLight>(new SerializerKey(className, 0));
            classType = typeof(COmniLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is COmniLight);
                var @this = Unsafe.As<COmniLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CountdownTimer":
        {
            var innerDecoder = GetDecoder<CountdownTimer>(new SerializerKey(className, 0));
            classType = typeof(CountdownTimer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CountdownTimer);
                var @this = Unsafe.As<CountdownTimer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CParticleSystem":
        {
            var innerDecoder = GetDecoder<CParticleSystem>(new SerializerKey(className, 0));
            classType = typeof(CParticleSystem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CParticleSystem);
                var @this = Unsafe.As<CParticleSystem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPathParticleRope":
        {
            var innerDecoder = GetDecoder<CPathParticleRope>(new SerializerKey(className, 0));
            classType = typeof(CPathParticleRope);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPathParticleRope);
                var @this = Unsafe.As<CPathParticleRope>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysBox":
        {
            var innerDecoder = GetDecoder<CPhysBox>(new SerializerKey(className, 0));
            classType = typeof(CPhysBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysBox);
                var @this = Unsafe.As<CPhysBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysicsProp":
        {
            var innerDecoder = GetDecoder<CPhysicsProp>(new SerializerKey(className, 0));
            classType = typeof(CPhysicsProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysicsProp);
                var @this = Unsafe.As<CPhysicsProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysicsPropMultiplayer":
        {
            var innerDecoder = GetDecoder<CPhysicsPropMultiplayer>(new SerializerKey(className, 0));
            classType = typeof(CPhysicsPropMultiplayer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysicsPropMultiplayer);
                var @this = Unsafe.As<CPhysicsPropMultiplayer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPhysMagnet":
        {
            var innerDecoder = GetDecoder<CPhysMagnet>(new SerializerKey(className, 0));
            classType = typeof(CPhysMagnet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPhysMagnet);
                var @this = Unsafe.As<CPhysMagnet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlantedC4":
        {
            var innerDecoder = GetDecoder<CPlantedC4>(new SerializerKey(className, 0));
            classType = typeof(CPlantedC4);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlantedC4);
                var @this = Unsafe.As<CPlantedC4>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_AutoaimServices":
        {
            var innerDecoder = GetDecoder<CPlayer_AutoaimServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_AutoaimServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_AutoaimServices);
                var @this = Unsafe.As<CPlayer_AutoaimServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_CameraServices":
        {
            var innerDecoder = GetDecoder<CPlayer_CameraServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_CameraServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_CameraServices);
                var @this = Unsafe.As<CPlayer_CameraServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_FlashlightServices":
        {
            var innerDecoder = GetDecoder<CPlayer_FlashlightServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_FlashlightServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_FlashlightServices);
                var @this = Unsafe.As<CPlayer_FlashlightServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_ItemServices":
        {
            var innerDecoder = GetDecoder<CPlayer_ItemServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_ItemServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_ItemServices);
                var @this = Unsafe.As<CPlayer_ItemServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_MovementServices":
        {
            var innerDecoder = GetDecoder<CPlayer_MovementServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_MovementServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices);
                var @this = Unsafe.As<CPlayer_MovementServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_MovementServices_Humanoid":
        {
            var innerDecoder = GetDecoder<CPlayer_MovementServices_Humanoid>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_MovementServices_Humanoid);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_MovementServices_Humanoid);
                var @this = Unsafe.As<CPlayer_MovementServices_Humanoid>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_ObserverServices":
        {
            var innerDecoder = GetDecoder<CPlayer_ObserverServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_ObserverServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_ObserverServices);
                var @this = Unsafe.As<CPlayer_ObserverServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_UseServices":
        {
            var innerDecoder = GetDecoder<CPlayer_UseServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_UseServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_UseServices);
                var @this = Unsafe.As<CPlayer_UseServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_ViewModelServices":
        {
            var innerDecoder = GetDecoder<CPlayer_ViewModelServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_ViewModelServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_ViewModelServices);
                var @this = Unsafe.As<CPlayer_ViewModelServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_WaterServices":
        {
            var innerDecoder = GetDecoder<CPlayer_WaterServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_WaterServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_WaterServices);
                var @this = Unsafe.As<CPlayer_WaterServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayer_WeaponServices":
        {
            var innerDecoder = GetDecoder<CPlayer_WeaponServices>(new SerializerKey(className, 0));
            classType = typeof(CPlayer_WeaponServices);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayer_WeaponServices);
                var @this = Unsafe.As<CPlayer_WeaponServices>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerControllerComponent":
        {
            var innerDecoder = GetDecoder<CPlayerControllerComponent>(new SerializerKey(className, 0));
            classType = typeof(CPlayerControllerComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerControllerComponent);
                var @this = Unsafe.As<CPlayerControllerComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerPawnComponent":
        {
            var innerDecoder = GetDecoder<CPlayerPawnComponent>(new SerializerKey(className, 0));
            classType = typeof(CPlayerPawnComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerPawnComponent);
                var @this = Unsafe.As<CPlayerPawnComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerPing":
        {
            var innerDecoder = GetDecoder<CPlayerPing>(new SerializerKey(className, 0));
            classType = typeof(CPlayerPing);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerPing);
                var @this = Unsafe.As<CPlayerPing>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerSprayDecal":
        {
            var innerDecoder = GetDecoder<CPlayerSprayDecal>(new SerializerKey(className, 0));
            classType = typeof(CPlayerSprayDecal);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerSprayDecal);
                var @this = Unsafe.As<CPlayerSprayDecal>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPlayerVisibility":
        {
            var innerDecoder = GetDecoder<CPlayerVisibility>(new SerializerKey(className, 0));
            classType = typeof(CPlayerVisibility);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPlayerVisibility);
                var @this = Unsafe.As<CPlayerVisibility>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointCamera":
        {
            var innerDecoder = GetDecoder<CPointCamera>(new SerializerKey(className, 0));
            classType = typeof(CPointCamera);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointCamera);
                var @this = Unsafe.As<CPointCamera>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIDialog":
        {
            var innerDecoder = GetDecoder<CPointClientUIDialog>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIDialog);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIDialog);
                var @this = Unsafe.As<CPointClientUIDialog>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIWorldPanel":
        {
            var innerDecoder = GetDecoder<CPointClientUIWorldPanel>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIWorldPanel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIWorldPanel);
                var @this = Unsafe.As<CPointClientUIWorldPanel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointClientUIWorldTextPanel":
        {
            var innerDecoder = GetDecoder<CPointClientUIWorldTextPanel>(new SerializerKey(className, 0));
            classType = typeof(CPointClientUIWorldTextPanel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointClientUIWorldTextPanel);
                var @this = Unsafe.As<CPointClientUIWorldTextPanel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointCommentaryNode":
        {
            var innerDecoder = GetDecoder<CPointCommentaryNode>(new SerializerKey(className, 0));
            classType = typeof(CPointCommentaryNode);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointCommentaryNode);
                var @this = Unsafe.As<CPointCommentaryNode>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointEntity":
        {
            var innerDecoder = GetDecoder<CPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointEntity);
                var @this = Unsafe.As<CPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointValueRemapper":
        {
            var innerDecoder = GetDecoder<CPointValueRemapper>(new SerializerKey(className, 0));
            classType = typeof(CPointValueRemapper);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointValueRemapper);
                var @this = Unsafe.As<CPointValueRemapper>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPointWorldText":
        {
            var innerDecoder = GetDecoder<CPointWorldText>(new SerializerKey(className, 0));
            classType = typeof(CPointWorldText);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPointWorldText);
                var @this = Unsafe.As<CPointWorldText>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPostProcessingVolume":
        {
            var innerDecoder = GetDecoder<CPostProcessingVolume>(new SerializerKey(className, 0));
            classType = typeof(CPostProcessingVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPostProcessingVolume);
                var @this = Unsafe.As<CPostProcessingVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPrecipitation":
        {
            var innerDecoder = GetDecoder<CPrecipitation>(new SerializerKey(className, 0));
            classType = typeof(CPrecipitation);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPrecipitation);
                var @this = Unsafe.As<CPrecipitation>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPrecipitationBlocker":
        {
            var innerDecoder = GetDecoder<CPrecipitationBlocker>(new SerializerKey(className, 0));
            classType = typeof(CPrecipitationBlocker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPrecipitationBlocker);
                var @this = Unsafe.As<CPrecipitationBlocker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPredictedViewModel":
        {
            var innerDecoder = GetDecoder<CPredictedViewModel>(new SerializerKey(className, 0));
            classType = typeof(CPredictedViewModel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPredictedViewModel);
                var @this = Unsafe.As<CPredictedViewModel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CPropDoorRotating":
        {
            var innerDecoder = GetDecoder<CPropDoorRotating>(new SerializerKey(className, 0));
            classType = typeof(CPropDoorRotating);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CPropDoorRotating);
                var @this = Unsafe.As<CPropDoorRotating>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollManager":
        {
            var innerDecoder = GetDecoder<CRagdollManager>(new SerializerKey(className, 0));
            classType = typeof(CRagdollManager);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollManager);
                var @this = Unsafe.As<CRagdollManager>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollProp":
        {
            var innerDecoder = GetDecoder<CRagdollProp>(new SerializerKey(className, 0));
            classType = typeof(CRagdollProp);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollProp);
                var @this = Unsafe.As<CRagdollProp>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRagdollPropAttached":
        {
            var innerDecoder = GetDecoder<CRagdollPropAttached>(new SerializerKey(className, 0));
            classType = typeof(CRagdollPropAttached);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRagdollPropAttached);
                var @this = Unsafe.As<CRagdollPropAttached>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRectLight":
        {
            var innerDecoder = GetDecoder<CRectLight>(new SerializerKey(className, 0));
            classType = typeof(CRectLight);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRectLight);
                var @this = Unsafe.As<CRectLight>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRenderComponent":
        {
            var innerDecoder = GetDecoder<CRenderComponent>(new SerializerKey(className, 0));
            classType = typeof(CRenderComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRenderComponent);
                var @this = Unsafe.As<CRenderComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRetakeGameRules":
        {
            var innerDecoder = GetDecoder<CRetakeGameRules>(new SerializerKey(className, 0));
            classType = typeof(CRetakeGameRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRetakeGameRules);
                var @this = Unsafe.As<CRetakeGameRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CRopeKeyframe":
        {
            var innerDecoder = GetDecoder<CRopeKeyframe>(new SerializerKey(className, 0));
            classType = typeof(CRopeKeyframe);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CRopeKeyframe);
                var @this = Unsafe.As<CRopeKeyframe>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSceneEntity":
        {
            var innerDecoder = GetDecoder<CSceneEntity>(new SerializerKey(className, 0));
            classType = typeof(CSceneEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSceneEntity);
                var @this = Unsafe.As<CSceneEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CScriptComponent":
        {
            var innerDecoder = GetDecoder<CScriptComponent>(new SerializerKey(className, 0));
            classType = typeof(CScriptComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CScriptComponent);
                var @this = Unsafe.As<CScriptComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSensorGrenade":
        {
            var innerDecoder = GetDecoder<CSensorGrenade>(new SerializerKey(className, 0));
            classType = typeof(CSensorGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSensorGrenade);
                var @this = Unsafe.As<CSensorGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSensorGrenadeProjectile":
        {
            var innerDecoder = GetDecoder<CSensorGrenadeProjectile>(new SerializerKey(className, 0));
            classType = typeof(CSensorGrenadeProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSensorGrenadeProjectile);
                var @this = Unsafe.As<CSensorGrenadeProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CShatterGlassShardPhysics":
        {
            var innerDecoder = GetDecoder<CShatterGlassShardPhysics>(new SerializerKey(className, 0));
            classType = typeof(CShatterGlassShardPhysics);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CShatterGlassShardPhysics);
                var @this = Unsafe.As<CShatterGlassShardPhysics>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkeletonAnimationController":
        {
            var innerDecoder = GetDecoder<CSkeletonAnimationController>(new SerializerKey(className, 0));
            classType = typeof(CSkeletonAnimationController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkeletonAnimationController);
                var @this = Unsafe.As<CSkeletonAnimationController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkeletonInstance":
        {
            var innerDecoder = GetDecoder<CSkeletonInstance>(new SerializerKey(className, 0));
            classType = typeof(CSkeletonInstance);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkeletonInstance);
                var @this = Unsafe.As<CSkeletonInstance>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSkyCamera":
        {
            var innerDecoder = GetDecoder<CSkyCamera>(new SerializerKey(className, 0));
            classType = typeof(CSkyCamera);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSkyCamera);
                var @this = Unsafe.As<CSkyCamera>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSMatchStats_t":
        {
            var innerDecoder = GetDecoder<CSMatchStats>(new SerializerKey(className, 0));
            classType = typeof(CSMatchStats);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSMatchStats);
                var @this = Unsafe.As<CSMatchStats>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSmokeGrenade":
        {
            var innerDecoder = GetDecoder<CSmokeGrenade>(new SerializerKey(className, 0));
            classType = typeof(CSmokeGrenade);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSmokeGrenade);
                var @this = Unsafe.As<CSmokeGrenade>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSmokeGrenadeProjectile":
        {
            var innerDecoder = GetDecoder<CSmokeGrenadeProjectile>(new SerializerKey(className, 0));
            classType = typeof(CSmokeGrenadeProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSmokeGrenadeProjectile);
                var @this = Unsafe.As<CSmokeGrenadeProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntityBase":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntityBase>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntityBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntityBase);
                var @this = Unsafe.As<CSoundAreaEntityBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntityOrientedBox":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntityOrientedBox>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntityOrientedBox);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntityOrientedBox);
                var @this = Unsafe.As<CSoundAreaEntityOrientedBox>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundAreaEntitySphere":
        {
            var innerDecoder = GetDecoder<CSoundAreaEntitySphere>(new SerializerKey(className, 0));
            classType = typeof(CSoundAreaEntitySphere);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundAreaEntitySphere);
                var @this = Unsafe.As<CSoundAreaEntitySphere>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetAABBEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetAABBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetAABBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetAABBEntity);
                var @this = Unsafe.As<CSoundOpvarSetAABBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetAutoRoomEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetAutoRoomEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetAutoRoomEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetAutoRoomEntity);
                var @this = Unsafe.As<CSoundOpvarSetAutoRoomEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetOBBEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetOBBEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetOBBEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetOBBEntity);
                var @this = Unsafe.As<CSoundOpvarSetOBBEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetOBBWindEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetOBBWindEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetOBBWindEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetOBBWindEntity);
                var @this = Unsafe.As<CSoundOpvarSetOBBWindEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPathCornerEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPathCornerEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPathCornerEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPathCornerEntity);
                var @this = Unsafe.As<CSoundOpvarSetPathCornerEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPointBase":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPointBase>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPointBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPointBase);
                var @this = Unsafe.As<CSoundOpvarSetPointBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSoundOpvarSetPointEntity":
        {
            var innerDecoder = GetDecoder<CSoundOpvarSetPointEntity>(new SerializerKey(className, 0));
            classType = typeof(CSoundOpvarSetPointEntity);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSoundOpvarSetPointEntity);
                var @this = Unsafe.As<CSoundOpvarSetPointEntity>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSPerRoundStats_t":
        {
            var innerDecoder = GetDecoder<CSPerRoundStats>(new SerializerKey(className, 0));
            classType = typeof(CSPerRoundStats);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSPerRoundStats);
                var @this = Unsafe.As<CSPerRoundStats>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSpotlightEnd":
        {
            var innerDecoder = GetDecoder<CSpotlightEnd>(new SerializerKey(className, 0));
            classType = typeof(CSpotlightEnd);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSpotlightEnd);
                var @this = Unsafe.As<CSpotlightEnd>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSprite":
        {
            var innerDecoder = GetDecoder<CSprite>(new SerializerKey(className, 0));
            classType = typeof(CSprite);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSprite);
                var @this = Unsafe.As<CSprite>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSpriteOriented":
        {
            var innerDecoder = GetDecoder<CSpriteOriented>(new SerializerKey(className, 0));
            classType = typeof(CSpriteOriented);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSpriteOriented);
                var @this = Unsafe.As<CSpriteOriented>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CSun":
        {
            var innerDecoder = GetDecoder<CSun>(new SerializerKey(className, 0));
            classType = typeof(CSun);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CSun);
                var @this = Unsafe.As<CSun>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTablet":
        {
            var innerDecoder = GetDecoder<CTablet>(new SerializerKey(className, 0));
            classType = typeof(CTablet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTablet);
                var @this = Unsafe.As<CTablet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTeam":
        {
            var innerDecoder = GetDecoder<CTeam>(new SerializerKey(className, 0));
            classType = typeof(CTeam);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTeam);
                var @this = Unsafe.As<CTeam>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTeamplayRules":
        {
            var innerDecoder = GetDecoder<CTeamplayRules>(new SerializerKey(className, 0));
            classType = typeof(CTeamplayRules);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTeamplayRules);
                var @this = Unsafe.As<CTeamplayRules>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTextureBasedAnimatable":
        {
            var innerDecoder = GetDecoder<CTextureBasedAnimatable>(new SerializerKey(className, 0));
            classType = typeof(CTextureBasedAnimatable);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTextureBasedAnimatable);
                var @this = Unsafe.As<CTextureBasedAnimatable>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTonemapController2":
        {
            var innerDecoder = GetDecoder<CTonemapController2>(new SerializerKey(className, 0));
            classType = typeof(CTonemapController2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTonemapController2);
                var @this = Unsafe.As<CTonemapController2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTouchExpansionComponent":
        {
            var innerDecoder = GetDecoder<CTouchExpansionComponent>(new SerializerKey(className, 0));
            classType = typeof(CTouchExpansionComponent);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTouchExpansionComponent);
                var @this = Unsafe.As<CTouchExpansionComponent>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerBuoyancy":
        {
            var innerDecoder = GetDecoder<CTriggerBuoyancy>(new SerializerKey(className, 0));
            classType = typeof(CTriggerBuoyancy);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerBuoyancy);
                var @this = Unsafe.As<CTriggerBuoyancy>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerPhysics":
        {
            var innerDecoder = GetDecoder<CTriggerPhysics>(new SerializerKey(className, 0));
            classType = typeof(CTriggerPhysics);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerPhysics);
                var @this = Unsafe.As<CTriggerPhysics>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerTripWire":
        {
            var innerDecoder = GetDecoder<CTriggerTripWire>(new SerializerKey(className, 0));
            classType = typeof(CTriggerTripWire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerTripWire);
                var @this = Unsafe.As<CTriggerTripWire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTriggerVolume":
        {
            var innerDecoder = GetDecoder<CTriggerVolume>(new SerializerKey(className, 0));
            classType = typeof(CTriggerVolume);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTriggerVolume);
                var @this = Unsafe.As<CTriggerVolume>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTripWireFire":
        {
            var innerDecoder = GetDecoder<CTripWireFire>(new SerializerKey(className, 0));
            classType = typeof(CTripWireFire);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTripWireFire);
                var @this = Unsafe.As<CTripWireFire>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CTripWireFireProjectile":
        {
            var innerDecoder = GetDecoder<CTripWireFireProjectile>(new SerializerKey(className, 0));
            classType = typeof(CTripWireFireProjectile);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CTripWireFireProjectile);
                var @this = Unsafe.As<CTripWireFireProjectile>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CVoteController":
        {
            var innerDecoder = GetDecoder<CVoteController>(new SerializerKey(className, 0));
            classType = typeof(CVoteController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CVoteController);
                var @this = Unsafe.As<CVoteController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWaterBullet":
        {
            var innerDecoder = GetDecoder<CWaterBullet>(new SerializerKey(className, 0));
            classType = typeof(CWaterBullet);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWaterBullet);
                var @this = Unsafe.As<CWaterBullet>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponAug":
        {
            var innerDecoder = GetDecoder<CWeaponAug>(new SerializerKey(className, 0));
            classType = typeof(CWeaponAug);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponAug);
                var @this = Unsafe.As<CWeaponAug>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponAWP":
        {
            var innerDecoder = GetDecoder<CWeaponAWP>(new SerializerKey(className, 0));
            classType = typeof(CWeaponAWP);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponAWP);
                var @this = Unsafe.As<CWeaponAWP>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponBaseItem":
        {
            var innerDecoder = GetDecoder<CWeaponBaseItem>(new SerializerKey(className, 0));
            classType = typeof(CWeaponBaseItem);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponBaseItem);
                var @this = Unsafe.As<CWeaponBaseItem>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponBizon":
        {
            var innerDecoder = GetDecoder<CWeaponBizon>(new SerializerKey(className, 0));
            classType = typeof(CWeaponBizon);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponBizon);
                var @this = Unsafe.As<CWeaponBizon>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponCZ75a":
        {
            var innerDecoder = GetDecoder<CWeaponCZ75a>(new SerializerKey(className, 0));
            classType = typeof(CWeaponCZ75a);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponCZ75a);
                var @this = Unsafe.As<CWeaponCZ75a>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponElite":
        {
            var innerDecoder = GetDecoder<CWeaponElite>(new SerializerKey(className, 0));
            classType = typeof(CWeaponElite);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponElite);
                var @this = Unsafe.As<CWeaponElite>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponFamas":
        {
            var innerDecoder = GetDecoder<CWeaponFamas>(new SerializerKey(className, 0));
            classType = typeof(CWeaponFamas);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponFamas);
                var @this = Unsafe.As<CWeaponFamas>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponFiveSeven":
        {
            var innerDecoder = GetDecoder<CWeaponFiveSeven>(new SerializerKey(className, 0));
            classType = typeof(CWeaponFiveSeven);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponFiveSeven);
                var @this = Unsafe.As<CWeaponFiveSeven>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponG3SG1":
        {
            var innerDecoder = GetDecoder<CWeaponG3SG1>(new SerializerKey(className, 0));
            classType = typeof(CWeaponG3SG1);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponG3SG1);
                var @this = Unsafe.As<CWeaponG3SG1>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponGalilAR":
        {
            var innerDecoder = GetDecoder<CWeaponGalilAR>(new SerializerKey(className, 0));
            classType = typeof(CWeaponGalilAR);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponGalilAR);
                var @this = Unsafe.As<CWeaponGalilAR>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponGlock":
        {
            var innerDecoder = GetDecoder<CWeaponGlock>(new SerializerKey(className, 0));
            classType = typeof(CWeaponGlock);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponGlock);
                var @this = Unsafe.As<CWeaponGlock>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponHKP2000":
        {
            var innerDecoder = GetDecoder<CWeaponHKP2000>(new SerializerKey(className, 0));
            classType = typeof(CWeaponHKP2000);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponHKP2000);
                var @this = Unsafe.As<CWeaponHKP2000>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponM249":
        {
            var innerDecoder = GetDecoder<CWeaponM249>(new SerializerKey(className, 0));
            classType = typeof(CWeaponM249);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponM249);
                var @this = Unsafe.As<CWeaponM249>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponM4A1":
        {
            var innerDecoder = GetDecoder<CWeaponM4A1>(new SerializerKey(className, 0));
            classType = typeof(CWeaponM4A1);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponM4A1);
                var @this = Unsafe.As<CWeaponM4A1>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponM4A1Silencer":
        {
            var innerDecoder = GetDecoder<CWeaponM4A1Silencer>(new SerializerKey(className, 0));
            classType = typeof(CWeaponM4A1Silencer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponM4A1Silencer);
                var @this = Unsafe.As<CWeaponM4A1Silencer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponMAC10":
        {
            var innerDecoder = GetDecoder<CWeaponMAC10>(new SerializerKey(className, 0));
            classType = typeof(CWeaponMAC10);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponMAC10);
                var @this = Unsafe.As<CWeaponMAC10>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponMag7":
        {
            var innerDecoder = GetDecoder<CWeaponMag7>(new SerializerKey(className, 0));
            classType = typeof(CWeaponMag7);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponMag7);
                var @this = Unsafe.As<CWeaponMag7>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponMP5SD":
        {
            var innerDecoder = GetDecoder<CWeaponMP5SD>(new SerializerKey(className, 0));
            classType = typeof(CWeaponMP5SD);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponMP5SD);
                var @this = Unsafe.As<CWeaponMP5SD>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponMP7":
        {
            var innerDecoder = GetDecoder<CWeaponMP7>(new SerializerKey(className, 0));
            classType = typeof(CWeaponMP7);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponMP7);
                var @this = Unsafe.As<CWeaponMP7>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponMP9":
        {
            var innerDecoder = GetDecoder<CWeaponMP9>(new SerializerKey(className, 0));
            classType = typeof(CWeaponMP9);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponMP9);
                var @this = Unsafe.As<CWeaponMP9>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponNegev":
        {
            var innerDecoder = GetDecoder<CWeaponNegev>(new SerializerKey(className, 0));
            classType = typeof(CWeaponNegev);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponNegev);
                var @this = Unsafe.As<CWeaponNegev>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponNOVA":
        {
            var innerDecoder = GetDecoder<CWeaponNOVA>(new SerializerKey(className, 0));
            classType = typeof(CWeaponNOVA);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponNOVA);
                var @this = Unsafe.As<CWeaponNOVA>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponP250":
        {
            var innerDecoder = GetDecoder<CWeaponP250>(new SerializerKey(className, 0));
            classType = typeof(CWeaponP250);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponP250);
                var @this = Unsafe.As<CWeaponP250>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponP90":
        {
            var innerDecoder = GetDecoder<CWeaponP90>(new SerializerKey(className, 0));
            classType = typeof(CWeaponP90);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponP90);
                var @this = Unsafe.As<CWeaponP90>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponRevolver":
        {
            var innerDecoder = GetDecoder<CWeaponRevolver>(new SerializerKey(className, 0));
            classType = typeof(CWeaponRevolver);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponRevolver);
                var @this = Unsafe.As<CWeaponRevolver>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponSawedoff":
        {
            var innerDecoder = GetDecoder<CWeaponSawedoff>(new SerializerKey(className, 0));
            classType = typeof(CWeaponSawedoff);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponSawedoff);
                var @this = Unsafe.As<CWeaponSawedoff>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponSCAR20":
        {
            var innerDecoder = GetDecoder<CWeaponSCAR20>(new SerializerKey(className, 0));
            classType = typeof(CWeaponSCAR20);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponSCAR20);
                var @this = Unsafe.As<CWeaponSCAR20>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponSG556":
        {
            var innerDecoder = GetDecoder<CWeaponSG556>(new SerializerKey(className, 0));
            classType = typeof(CWeaponSG556);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponSG556);
                var @this = Unsafe.As<CWeaponSG556>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponShield":
        {
            var innerDecoder = GetDecoder<CWeaponShield>(new SerializerKey(className, 0));
            classType = typeof(CWeaponShield);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponShield);
                var @this = Unsafe.As<CWeaponShield>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponSSG08":
        {
            var innerDecoder = GetDecoder<CWeaponSSG08>(new SerializerKey(className, 0));
            classType = typeof(CWeaponSSG08);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponSSG08);
                var @this = Unsafe.As<CWeaponSSG08>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponTaser":
        {
            var innerDecoder = GetDecoder<CWeaponTaser>(new SerializerKey(className, 0));
            classType = typeof(CWeaponTaser);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponTaser);
                var @this = Unsafe.As<CWeaponTaser>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponTec9":
        {
            var innerDecoder = GetDecoder<CWeaponTec9>(new SerializerKey(className, 0));
            classType = typeof(CWeaponTec9);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponTec9);
                var @this = Unsafe.As<CWeaponTec9>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponUMP45":
        {
            var innerDecoder = GetDecoder<CWeaponUMP45>(new SerializerKey(className, 0));
            classType = typeof(CWeaponUMP45);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponUMP45);
                var @this = Unsafe.As<CWeaponUMP45>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponUSPSilencer":
        {
            var innerDecoder = GetDecoder<CWeaponUSPSilencer>(new SerializerKey(className, 0));
            classType = typeof(CWeaponUSPSilencer);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponUSPSilencer);
                var @this = Unsafe.As<CWeaponUSPSilencer>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponXM1014":
        {
            var innerDecoder = GetDecoder<CWeaponXM1014>(new SerializerKey(className, 0));
            classType = typeof(CWeaponXM1014);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponXM1014);
                var @this = Unsafe.As<CWeaponXM1014>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWeaponZoneRepulsor":
        {
            var innerDecoder = GetDecoder<CWeaponZoneRepulsor>(new SerializerKey(className, 0));
            classType = typeof(CWeaponZoneRepulsor);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWeaponZoneRepulsor);
                var @this = Unsafe.As<CWeaponZoneRepulsor>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "CWorld":
        {
            var innerDecoder = GetDecoder<CWorld>(new SerializerKey(className, 0));
            classType = typeof(CWorld);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is CWorld);
                var @this = Unsafe.As<CWorld>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "EntityRenderAttribute_t":
        {
            var innerDecoder = GetDecoder<EntityRenderAttribute>(new SerializerKey(className, 0));
            classType = typeof(EntityRenderAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is EntityRenderAttribute);
                var @this = Unsafe.As<EntityRenderAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "EntitySpottedState_t":
        {
            var innerDecoder = GetDecoder<EntitySpottedState>(new SerializerKey(className, 0));
            classType = typeof(EntitySpottedState);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is EntitySpottedState);
                var @this = Unsafe.As<EntitySpottedState>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "fogparams_t":
        {
            var innerDecoder = GetDecoder<FogParams>(new SerializerKey(className, 0));
            classType = typeof(FogParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is FogParams);
                var @this = Unsafe.As<FogParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "fogplayerparams_t":
        {
            var innerDecoder = GetDecoder<FogPlayerParams>(new SerializerKey(className, 0));
            classType = typeof(FogPlayerParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is FogPlayerParams);
                var @this = Unsafe.As<FogPlayerParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "IEconItemInterface":
        {
            var innerDecoder = GetDecoder<IEconItemInterface>(new SerializerKey(className, 0));
            classType = typeof(IEconItemInterface);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is IEconItemInterface);
                var @this = Unsafe.As<IEconItemInterface>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCModel":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCModel>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCModel);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCModel);
                var @this = Unsafe.As<InfoForResourceTypeCModel>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCPostProcessingResource":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCPostProcessingResource>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCPostProcessingResource);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCPostProcessingResource);
                var @this = Unsafe.As<InfoForResourceTypeCPostProcessingResource>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeCTextureBase":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeCTextureBase>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeCTextureBase);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeCTextureBase);
                var @this = Unsafe.As<InfoForResourceTypeCTextureBase>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeIMaterial2":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeIMaterial2>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeIMaterial2);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeIMaterial2);
                var @this = Unsafe.As<InfoForResourceTypeIMaterial2>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "InfoForResourceTypeIParticleSystemDefinition":
        {
            var innerDecoder = GetDecoder<InfoForResourceTypeIParticleSystemDefinition>(new SerializerKey(className, 0));
            classType = typeof(InfoForResourceTypeIParticleSystemDefinition);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is InfoForResourceTypeIParticleSystemDefinition);
                var @this = Unsafe.As<InfoForResourceTypeIParticleSystemDefinition>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ISkeletonAnimationController":
        {
            var innerDecoder = GetDecoder<ISkeletonAnimationController>(new SerializerKey(className, 0));
            classType = typeof(ISkeletonAnimationController);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ISkeletonAnimationController);
                var @this = Unsafe.As<ISkeletonAnimationController>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "PhysicsRagdollPose_t":
        {
            var innerDecoder = GetDecoder<PhysicsRagdollPose>(new SerializerKey(className, 0));
            classType = typeof(PhysicsRagdollPose);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is PhysicsRagdollPose);
                var @this = Unsafe.As<PhysicsRagdollPose>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "SellbackPurchaseEntry_t":
        {
            var innerDecoder = GetDecoder<SellbackPurchaseEntry>(new SerializerKey(className, 0));
            classType = typeof(SellbackPurchaseEntry);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is SellbackPurchaseEntry);
                var @this = Unsafe.As<SellbackPurchaseEntry>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ServerAuthoritativeWeaponSlot_t":
        {
            var innerDecoder = GetDecoder<ServerAuthoritativeWeaponSlot>(new SerializerKey(className, 0));
            classType = typeof(ServerAuthoritativeWeaponSlot);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ServerAuthoritativeWeaponSlot);
                var @this = Unsafe.As<ServerAuthoritativeWeaponSlot>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "shard_model_desc_t":
        {
            var innerDecoder = GetDecoder<SharedModelDesc>(new SerializerKey(className, 0));
            classType = typeof(SharedModelDesc);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is SharedModelDesc);
                var @this = Unsafe.As<SharedModelDesc>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "sky3dparams_t":
        {
            var innerDecoder = GetDecoder<Sky3DParams>(new SerializerKey(className, 0));
            classType = typeof(Sky3DParams);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is Sky3DParams);
                var @this = Unsafe.As<Sky3DParams>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "ViewAngleServerChange_t":
        {
            var innerDecoder = GetDecoder<ViewAngleServerChange>(new SerializerKey(className, 0));
            classType = typeof(ViewAngleServerChange);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is ViewAngleServerChange);
                var @this = Unsafe.As<ViewAngleServerChange>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "VPhysicsCollisionAttribute_t":
        {
            var innerDecoder = GetDecoder<VPhysicsCollisionAttribute>(new SerializerKey(className, 0));
            classType = typeof(VPhysicsCollisionAttribute);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is VPhysicsCollisionAttribute);
                var @this = Unsafe.As<VPhysicsCollisionAttribute>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "WeaponPurchaseCount_t":
        {
            var innerDecoder = GetDecoder<WeaponPurchaseCount>(new SerializerKey(className, 0));
            classType = typeof(WeaponPurchaseCount);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is WeaponPurchaseCount);
                var @this = Unsafe.As<WeaponPurchaseCount>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        case "WeaponPurchaseTracker_t":
        {
            var innerDecoder = GetDecoder<WeaponPurchaseTracker>(new SerializerKey(className, 0));
            classType = typeof(WeaponPurchaseTracker);
            decoder = (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                Debug.Assert(instance is WeaponPurchaseTracker);
                var @this = Unsafe.As<WeaponPurchaseTracker>(instance);
                innerDecoder(@this, path, ref buffer);
            };
            return true;
        }
        default:
            classType = null;
            decoder = null;
            return false;
        }
    }
}
